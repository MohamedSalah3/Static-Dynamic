
Static design Rebuild.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000245e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017a  00800060  0000245e  000024f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000085  008001da  008001da  0000266c  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  0000266c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00004238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  000047c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c0b  00000000  00000000  00004a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000102e  00000000  00000000  0000760b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014ec  00000000  00000000  00008639  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cf0  00000000  00000000  00009b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dd5  00000000  00000000  0000a818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029cf  00000000  00000000  0000b5ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1c 04 	jmp	0x838	; 0x838 <__vector_1>
       8:	0c 94 43 04 	jmp	0x886	; 0x886 <__vector_2>
       c:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__vector_3>
      10:	0c 94 91 04 	jmp	0x922	; 0x922 <__vector_4>
      14:	0c 94 b8 04 	jmp	0x970	; 0x970 <__vector_5>
      18:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_6>
      1c:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__vector_7>
      20:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__vector_8>
      24:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__vector_9>
      28:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__vector_10>
      2c:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__vector_11>
      30:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__vector_12>
      34:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__vector_13>
      38:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__vector_14>
      3c:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__vector_15>
      40:	0c 94 65 06 	jmp	0xcca	; 0xcca <__vector_16>
      44:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__vector_17>
      48:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <__vector_18>
      4c:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__vector_19>
      50:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 35       	cpi	r26, 0x5F	; 95
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 10 	call	0x20ea	; 0x20ea <main>
      8a:	0c 94 2d 12 	jmp	0x245a	; 0x245a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Car_SM_Init>:
//extern uint16_t Distance;
static uint16_t Distance;
ERROR_STATUS Car_SM_Init(void)
{
uint8_t ret=E_OK;
Steering_Init();
      92:	0e 94 67 00 	call	0xce	; 0xce <Steering_Init>
Us_Init();
      96:	0e 94 b6 03 	call	0x76c	; 0x76c <Us_Init>
return ret;
}
      9a:	80 e0       	ldi	r24, 0x00	; 0
      9c:	08 95       	ret

0000009e <Car_SM_Update>:


ERROR_STATUS Car_SM_Update(void)
{uint8_t ret=E_OK;
Us_Trigger();
      9e:	0e 94 bf 03 	call	0x77e	; 0x77e <Us_Trigger>
Us_GetDistance(&Distance);
      a2:	8a ed       	ldi	r24, 0xDA	; 218
      a4:	91 e0       	ldi	r25, 0x01	; 1
      a6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <Us_GetDistance>

if(Distance <= 30)
      aa:	80 91 da 01 	lds	r24, 0x01DA
      ae:	90 91 db 01 	lds	r25, 0x01DB
      b2:	8f 31       	cpi	r24, 0x1F	; 31
      b4:	91 05       	cpc	r25, r1
      b6:	28 f4       	brcc	.+10     	; 0xc2 <Car_SM_Update+0x24>
{
	
	Steering_SteerCar(CAR_RIGHT,50);
      b8:	83 e0       	ldi	r24, 0x03	; 3
      ba:	62 e3       	ldi	r22, 0x32	; 50
      bc:	0e 94 6b 00 	call	0xd6	; 0xd6 <Steering_SteerCar>
      c0:	04 c0       	rjmp	.+8      	; 0xca <Car_SM_Update+0x2c>
}else
{
	Steering_SteerCar(CAR_FORWARD,50);
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	62 e3       	ldi	r22, 0x32	; 50
      c6:	0e 94 6b 00 	call	0xd6	; 0xd6 <Steering_SteerCar>
}

return ret;
}	
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	08 95       	ret

000000ce <Steering_Init>:


ERROR_STATUS Steering_Init(void)
{
	uint8_t ret=0;
	ret=Motor_Init(MOTOR_1|MOTOR_2);
      ce:	83 e0       	ldi	r24, 0x03	; 3
      d0:	0e 94 4d 02 	call	0x49a	; 0x49a <Motor_Init>
	return ret;
}
      d4:	08 95       	ret

000000d6 <Steering_SteerCar>:


ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
      d6:	cf 93       	push	r28
      d8:	c6 2f       	mov	r28, r22
	uint8_t ret=0;
		switch(Steering_CarCmd)
      da:	82 30       	cpi	r24, 0x02	; 2
      dc:	a1 f0       	breq	.+40     	; 0x106 <Steering_SteerCar+0x30>
      de:	83 30       	cpi	r24, 0x03	; 3
      e0:	20 f4       	brcc	.+8      	; 0xea <Steering_SteerCar+0x14>
      e2:	81 30       	cpi	r24, 0x01	; 1
      e4:	09 f0       	breq	.+2      	; 0xe8 <Steering_SteerCar+0x12>
      e6:	42 c0       	rjmp	.+132    	; 0x16c <Steering_SteerCar+0x96>
      e8:	05 c0       	rjmp	.+10     	; 0xf4 <Steering_SteerCar+0x1e>
      ea:	83 30       	cpi	r24, 0x03	; 3
      ec:	51 f1       	breq	.+84     	; 0x142 <Steering_SteerCar+0x6c>
      ee:	84 30       	cpi	r24, 0x04	; 4
      f0:	e9 f5       	brne	.+122    	; 0x16c <Steering_SteerCar+0x96>
      f2:	12 c0       	rjmp	.+36     	; 0x118 <Steering_SteerCar+0x42>
	{
		case CAR_FORWARD:
			ret= Motor_Direction(MOTOR_1|MOTOR_2, CAR_FORWARD);
      f4:	83 e0       	ldi	r24, 0x03	; 3
      f6:	61 e0       	ldi	r22, 0x01	; 1
      f8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret=Motor_Start(MOTOR_1|MOTOR_2,speed);
      fc:	83 e0       	ldi	r24, 0x03	; 3
      fe:	6c 2f       	mov	r22, r28
     100:	0e 94 25 03 	call	0x64a	; 0x64a <Motor_Start>
			break;
     104:	34 c0       	rjmp	.+104    	; 0x16e <Steering_SteerCar+0x98>
			case CAR_BACKWARD:
			ret= Motor_Direction(MOTOR_1|MOTOR_2,CAR_BACKWARD);
     106:	83 e0       	ldi	r24, 0x03	; 3
     108:	62 e0       	ldi	r22, 0x02	; 2
     10a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret=Motor_Start(MOTOR_1|MOTOR_2,speed);
     10e:	83 e0       	ldi	r24, 0x03	; 3
     110:	6c 2f       	mov	r22, r28
     112:	0e 94 25 03 	call	0x64a	; 0x64a <Motor_Start>
			break;
     116:	2b c0       	rjmp	.+86     	; 0x16e <Steering_SteerCar+0x98>
			case CAR_LEFT:
			ret= Motor_Direction(MOTOR_1, CAR_FORWARD);
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	61 e0       	ldi	r22, 0x01	; 1
     11c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret= Motor_Direction(MOTOR_2, CAR_BACKWARD);
     120:	82 e0       	ldi	r24, 0x02	; 2
     122:	62 e0       	ldi	r22, 0x02	; 2
     124:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret=Motor_Start(MOTOR_1|MOTOR_2,speed);
     128:	83 e0       	ldi	r24, 0x03	; 3
     12a:	6c 2f       	mov	r22, r28
     12c:	0e 94 25 03 	call	0x64a	; 0x64a <Motor_Start>

/*************************************************************/
			ret= Motor_Direction(MOTOR_1, CAR_STOP);
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret= Motor_Direction(MOTOR_2, CAR_STOP);
     138:	82 e0       	ldi	r24, 0x02	; 2
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			break;
     140:	16 c0       	rjmp	.+44     	; 0x16e <Steering_SteerCar+0x98>
			case CAR_RIGHT:
			ret= Motor_Direction(MOTOR_1, CAR_BACKWARD);
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	62 e0       	ldi	r22, 0x02	; 2
     146:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret= Motor_Direction(MOTOR_2, CAR_FORWARD);
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret=Motor_Start(MOTOR_1|MOTOR_2,speed);
     152:	83 e0       	ldi	r24, 0x03	; 3
     154:	6c 2f       	mov	r22, r28
     156:	0e 94 25 03 	call	0x64a	; 0x64a <Motor_Start>
		/*	timer2Start();
			timer2DelayMs(100);
*//***********************************************************/
			ret= Motor_Direction(MOTOR_1, CAR_STOP);
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret= Motor_Direction(MOTOR_2, CAR_STOP);
     162:	82 e0       	ldi	r24, 0x02	; 2
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			break;
     16a:	01 c0       	rjmp	.+2      	; 0x16e <Steering_SteerCar+0x98>
}


ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
	uint8_t ret=0;
     16c:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	
	
return ret;
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <LCD_EN_pulse>:
 #include <stdlib.h>
extern uint8_t u8_Init_finished;
  uint8_t U8_index=0;
 void LCD_EN_pulse(void)
 {
	 DIO_Write(LCD_EN_PORT, LCD_EN_PIN, HIGH);
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	68 e0       	ldi	r22, 0x08	; 8
     176:	4f ef       	ldi	r20, 0xFF	; 255
     178:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
/***********************************************************/
	 SwDelay_us(1);
     17c:	61 e0       	ldi	r22, 0x01	; 1
     17e:	70 e0       	ldi	r23, 0x00	; 0
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 ab 03 	call	0x756	; 0x756 <SwDelay_us>
	 DIO_Write(LCD_EN_PORT, LCD_EN_PIN, LOW);
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	68 e0       	ldi	r22, 0x08	; 8
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
/*************************************************************/	 
	 SwDelay_us(1);
     192:	61 e0       	ldi	r22, 0x01	; 1
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 ab 03 	call	0x756	; 0x756 <SwDelay_us>
 }
     19e:	08 95       	ret

000001a0 <LCD_config_pins>:

 void LCD_config_pins(void){

	 /* set LCD pins as outputs */
	DIO_init(&Dio_configurationA);
     1a0:	89 e7       	ldi	r24, 0x79	; 121
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_init>
}
     1a8:	08 95       	ret

000001aa <LCD_send_nibble>:

 void LCD_send_nibble(uint8_t data){
     1aa:	cf 93       	push	r28
	 uint8_t mask = 1;
	 data >>= 4;
     1ac:	c8 2f       	mov	r28, r24
     1ae:	c2 95       	swap	r28
     1b0:	cf 70       	andi	r28, 0x0F	; 15
	 if(data & mask)
     1b2:	c0 ff       	sbrs	r28, 0
     1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <LCD_send_nibble+0x18>
	 DIO_Write(LCD_D4_PORT, LCD_D4_PIN, HIGH);
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	60 e1       	ldi	r22, 0x10	; 16
     1ba:	4f ef       	ldi	r20, 0xFF	; 255
     1bc:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
     1c0:	05 c0       	rjmp	.+10     	; 0x1cc <LCD_send_nibble+0x22>
	 else
	 DIO_Write(LCD_D4_PORT, LCD_D4_PIN, LOW);
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	60 e1       	ldi	r22, 0x10	; 16
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>

	 mask *= 2;
	 if(data & mask)
     1cc:	c1 ff       	sbrs	r28, 1
     1ce:	06 c0       	rjmp	.+12     	; 0x1dc <LCD_send_nibble+0x32>
	 DIO_Write(LCD_D5_PORT, LCD_D5_PIN, HIGH);
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	60 e2       	ldi	r22, 0x20	; 32
     1d4:	4f ef       	ldi	r20, 0xFF	; 255
     1d6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
     1da:	05 c0       	rjmp	.+10     	; 0x1e6 <LCD_send_nibble+0x3c>
	 else
	 DIO_Write(LCD_D5_PORT, LCD_D5_PIN, LOW);
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	60 e2       	ldi	r22, 0x20	; 32
     1e0:	40 e0       	ldi	r20, 0x00	; 0
     1e2:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>

	 mask *= 2;
	 if(data & mask)
     1e6:	c2 ff       	sbrs	r28, 2
     1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <LCD_send_nibble+0x4c>
	 DIO_Write(LCD_D6_PORT, LCD_D6_PIN, HIGH);
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	60 e4       	ldi	r22, 0x40	; 64
     1ee:	4f ef       	ldi	r20, 0xFF	; 255
     1f0:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
     1f4:	05 c0       	rjmp	.+10     	; 0x200 <LCD_send_nibble+0x56>
	 else
	 DIO_Write(LCD_D6_PORT, LCD_D6_PIN, LOW);
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	60 e4       	ldi	r22, 0x40	; 64
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>

	 mask *= 2;
	 if(data & mask)
     200:	c8 70       	andi	r28, 0x08	; 8
     202:	31 f0       	breq	.+12     	; 0x210 <LCD_send_nibble+0x66>
	 DIO_Write(LCD_D7_PORT, LCD_D7_PIN, HIGH);
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	60 e8       	ldi	r22, 0x80	; 128
     208:	4f ef       	ldi	r20, 0xFF	; 255
     20a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
     20e:	05 c0       	rjmp	.+10     	; 0x21a <LCD_send_nibble+0x70>
	 else
	 DIO_Write(LCD_D7_PORT, LCD_D7_PIN, LOW);
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	60 e8       	ldi	r22, 0x80	; 128
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
 }
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <LCD_send_char>:
/***************************************************************************/
 void LCD_send_char(char data)		//Sends Char to LCD
 {
     21e:	cf 93       	push	r28
     220:	c8 2f       	mov	r28, r24
	 DIO_Write(LCD_RS_PORT, LCD_RS_PIN, HIGH);
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	62 e0       	ldi	r22, 0x02	; 2
     226:	4f ef       	ldi	r20, 0xFF	; 255
     228:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
	 LCD_send_nibble(data); // Higher nibble first
     22c:	8c 2f       	mov	r24, r28
     22e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_send_nibble>
	 LCD_EN_pulse();
     232:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_EN_pulse>

	 LCD_send_nibble(data<<4);
     236:	8c 2f       	mov	r24, r28
     238:	82 95       	swap	r24
     23a:	80 7f       	andi	r24, 0xF0	; 240
     23c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_send_nibble>
	 LCD_EN_pulse();
     240:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_EN_pulse>
SwDelay_ms(1);
     244:	61 e0       	ldi	r22, 0x01	; 1
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 95 03 	call	0x72a	; 0x72a <SwDelay_ms>
 }
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <LCD_send_command>:
 /**************************************************************************/
 void LCD_send_command(uint8_t data)	//Sends Command to LCD
 {
     254:	cf 93       	push	r28
     256:	c8 2f       	mov	r28, r24
	 DIO_Write(LCD_RS_PORT, LCD_RS_PIN, LOW);
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	62 e0       	ldi	r22, 0x02	; 2
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
	 LCD_send_nibble(data); // Higher nibble first
     262:	8c 2f       	mov	r24, r28
     264:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_send_nibble>
	 LCD_EN_pulse();
     268:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_EN_pulse>

	 LCD_send_nibble(data<<4);
     26c:	8c 2f       	mov	r24, r28
     26e:	82 95       	swap	r24
     270:	80 7f       	andi	r24, 0xF0	; 240
     272:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_send_nibble>
	 LCD_EN_pulse();
     276:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_EN_pulse>
	 SwDelay_ms(1);
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 95 03 	call	0x72a	; 0x72a <SwDelay_ms>
 }
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <LCD_init>:
 /******************************************************************************/
 void LCD_init(void)//Initializes LCD
 {
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	29 97       	sbiw	r28, 0x09	; 9
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t commands[9]={0x33,0x32,Four_bit,Cursor_on,Lcd_clear,Increment_cursor,Cursor_off,0};
     2a2:	8e 01       	movw	r16, r28
     2a4:	0f 5f       	subi	r16, 0xFF	; 255
     2a6:	1f 4f       	sbci	r17, 0xFF	; 255
     2a8:	89 e0       	ldi	r24, 0x09	; 9
     2aa:	f8 01       	movw	r30, r16
     2ac:	11 92       	st	Z+, r1
     2ae:	8a 95       	dec	r24
     2b0:	e9 f7       	brne	.-6      	; 0x2ac <LCD_init+0x22>
     2b2:	83 e3       	ldi	r24, 0x33	; 51
     2b4:	89 83       	std	Y+1, r24	; 0x01
     2b6:	82 e3       	ldi	r24, 0x32	; 50
     2b8:	8a 83       	std	Y+2, r24	; 0x02
     2ba:	88 e2       	ldi	r24, 0x28	; 40
     2bc:	8b 83       	std	Y+3, r24	; 0x03
     2be:	8e e0       	ldi	r24, 0x0E	; 14
     2c0:	8c 83       	std	Y+4, r24	; 0x04
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	8d 83       	std	Y+5, r24	; 0x05
     2c6:	86 e0       	ldi	r24, 0x06	; 6
     2c8:	8e 83       	std	Y+6, r24	; 0x06
     2ca:	8c e0       	ldi	r24, 0x0C	; 12
     2cc:	8f 83       	std	Y+7, r24	; 0x07
	 LCD_config_pins();
     2ce:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_config_pins>
	 //SwDelay_ms(10);
	 LCD_send_command(Increment_cursor);
	 LCD_send_command(Cursor_off); // Cursor off
	 */

if(commands[U8_index])
     2d2:	80 91 dc 01 	lds	r24, 0x01DC
     2d6:	f8 01       	movw	r30, r16
     2d8:	e8 0f       	add	r30, r24
     2da:	f1 1d       	adc	r31, r1
     2dc:	80 81       	ld	r24, Z
     2de:	88 23       	and	r24, r24
     2e0:	51 f0       	breq	.+20     	; 0x2f6 <LCD_init+0x6c>
{
		LCD_send_command(commands[U8_index]);
     2e2:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_send_command>
		U8_index++;
     2e6:	80 91 dc 01 	lds	r24, 0x01DC
     2ea:	8f 5f       	subi	r24, 0xFF	; 255
     2ec:	80 93 dc 01 	sts	0x01DC, r24
	
	u8_Init_finished=0;	
     2f0:	10 92 06 02 	sts	0x0206, r1
     2f4:	03 c0       	rjmp	.+6      	; 0x2fc <LCD_init+0x72>
}else
{
	u8_Init_finished=1;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	80 93 06 02 	sts	0x0206, r24
}
 
}
     2fc:	29 96       	adiw	r28, 0x09	; 9
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	de bf       	out	0x3e, r29	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	cd bf       	out	0x3d, r28	; 61
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	08 95       	ret

00000312 <LCD_clear>:
 void LCD_clear(void)				//Clears LCD
 {
	 LCD_send_command(Lcd_clear);
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_send_command>
 }
     318:	08 95       	ret

0000031a <LCD_send_string>:

 void LCD_send_string(char* data)	//Outputs string to LCD
 {
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	ec 01       	movw	r28, r24
	while(*data)
     320:	88 81       	ld	r24, Y
     322:	88 23       	and	r24, r24
     324:	31 f0       	breq	.+12     	; 0x332 <LCD_send_string+0x18>
 void LCD_clear(void)				//Clears LCD
 {
	 LCD_send_command(Lcd_clear);
 }

 void LCD_send_string(char* data)	//Outputs string to LCD
     326:	21 96       	adiw	r28, 0x01	; 1
 {
	while(*data)
	 {
		 LCD_send_char(*data++);
     328:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_send_char>
	 LCD_send_command(Lcd_clear);
 }

 void LCD_send_string(char* data)	//Outputs string to LCD
 {
	while(*data)
     32c:	89 91       	ld	r24, Y+
     32e:	88 23       	and	r24, r24
     330:	d9 f7       	brne	.-10     	; 0x328 <LCD_send_string+0xe>
		 LCD_send_char(*data++);
	 
	 }
	 
	 
 }
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <LCD_goto_xy>:

 void LCD_goto_xy(uint8_t x, uint8_t y)	//Cursor to X Y position
 {
	 uint8_t DDRAMAddr;
	 // remap lines into proper order
	 switch(y)
     338:	62 30       	cpi	r22, 0x02	; 2
     33a:	31 f0       	breq	.+12     	; 0x348 <LCD_goto_xy+0x10>
     33c:	63 30       	cpi	r22, 0x03	; 3
     33e:	31 f0       	breq	.+12     	; 0x34c <LCD_goto_xy+0x14>
     340:	61 30       	cpi	r22, 0x01	; 1
     342:	29 f4       	brne	.+10     	; 0x34e <LCD_goto_xy+0x16>
	 {
		 case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
		 case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     344:	80 5c       	subi	r24, 0xC0	; 192
     346:	03 c0       	rjmp	.+6      	; 0x34e <LCD_goto_xy+0x16>
		 case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     348:	8c 5e       	subi	r24, 0xEC	; 236
     34a:	01 c0       	rjmp	.+2      	; 0x34e <LCD_goto_xy+0x16>
		 case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     34c:	8c 5a       	subi	r24, 0xAC	; 172
		 default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	 }
	 // set data address
	 LCD_send_command(1<<LCD_DDRAM | DDRAMAddr);
     34e:	80 68       	ori	r24, 0x80	; 128
     350:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_send_command>

 }
     354:	08 95       	ret

00000356 <reverse>:
	 char t = *x; *x = *y; *y = t;
 }

 // function to reverse buffer[i..j]
 char* reverse(char *buffer, uint32_t i, uint32_t j)
 {
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
	 while (i < j)
     35e:	40 17       	cp	r20, r16
     360:	51 07       	cpc	r21, r17
     362:	62 07       	cpc	r22, r18
     364:	73 07       	cpc	r23, r19
     366:	c0 f4       	brcc	.+48     	; 0x398 <reverse+0x42>
 inline void swap(char *x, char *y) {
	 char t = *x; *x = *y; *y = t;
 }

 // function to reverse buffer[i..j]
 char* reverse(char *buffer, uint32_t i, uint32_t j)
     368:	d8 01       	movw	r26, r16
     36a:	11 96       	adiw	r26, 0x01	; 1
     36c:	a8 0f       	add	r26, r24
     36e:	b9 1f       	adc	r27, r25
     370:	fc 01       	movw	r30, r24
     372:	e4 0f       	add	r30, r20
     374:	f5 1f       	adc	r31, r21
 {
	 while (i < j)
	 swap(&buffer[i++], &buffer[j--]);
     376:	4f 5f       	subi	r20, 0xFF	; 255
     378:	5f 4f       	sbci	r21, 0xFF	; 255
     37a:	6f 4f       	sbci	r22, 0xFF	; 255
     37c:	7f 4f       	sbci	r23, 0xFF	; 255
     37e:	01 50       	subi	r16, 0x01	; 1
     380:	10 40       	sbci	r17, 0x00	; 0
     382:	20 40       	sbci	r18, 0x00	; 0
     384:	30 40       	sbci	r19, 0x00	; 0

 /*---Modification----------------------------------------------------------------------------------------------*/

 // inline function to swap two numbers
 inline void swap(char *x, char *y) {
	 char t = *x; *x = *y; *y = t;
     386:	c0 81       	ld	r28, Z
     388:	de 91       	ld	r29, -X
     38a:	d1 93       	st	Z+, r29
     38c:	cc 93       	st	X, r28
 }

 // function to reverse buffer[i..j]
 char* reverse(char *buffer, uint32_t i, uint32_t j)
 {
	 while (i < j)
     38e:	40 17       	cp	r20, r16
     390:	51 07       	cpc	r21, r17
     392:	62 07       	cpc	r22, r18
     394:	73 07       	cpc	r23, r19
     396:	78 f3       	brcs	.-34     	; 0x376 <reverse+0x20>
	 swap(&buffer[i++], &buffer[j--]);

	 return buffer;
 }
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	08 95       	ret

000003a2 <itoa_>:

 // Iterative function to implement itoa() function in C
 char* itoa_(uint32_t value, char* buffer, uint32_t base)
 {
     3a2:	4f 92       	push	r4
     3a4:	5f 92       	push	r5
     3a6:	6f 92       	push	r6
     3a8:	7f 92       	push	r7
     3aa:	8f 92       	push	r8
     3ac:	9f 92       	push	r9
     3ae:	af 92       	push	r10
     3b0:	bf 92       	push	r11
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	6b 01       	movw	r12, r22
     3c4:	7c 01       	movw	r14, r24
     3c6:	2a 01       	movw	r4, r20
     3c8:	48 01       	movw	r8, r16
     3ca:	59 01       	movw	r10, r18
	 // invalid input
	 if (base < 2 || base > 32)
     3cc:	d9 01       	movw	r26, r18
     3ce:	c8 01       	movw	r24, r16
     3d0:	02 97       	sbiw	r24, 0x02	; 2
     3d2:	a1 09       	sbc	r26, r1
     3d4:	b1 09       	sbc	r27, r1
     3d6:	8f 31       	cpi	r24, 0x1F	; 31
     3d8:	91 05       	cpc	r25, r1
     3da:	a1 05       	cpc	r26, r1
     3dc:	b1 05       	cpc	r27, r1
     3de:	08 f0       	brcs	.+2      	; 0x3e2 <itoa_+0x40>
     3e0:	49 c0       	rjmp	.+146    	; 0x474 <itoa_+0xd2>
	 return buffer;

	 // consider absolute value of number
	 int n = abs(value);
     3e2:	96 01       	movw	r18, r12
     3e4:	dd 20       	and	r13, r13
     3e6:	1c f4       	brge	.+6      	; 0x3ee <itoa_+0x4c>
     3e8:	30 95       	com	r19
     3ea:	21 95       	neg	r18
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255

	 int i = 0;
	 while (n)
     3ee:	21 15       	cp	r18, r1
     3f0:	31 05       	cpc	r19, r1
     3f2:	39 f1       	breq	.+78     	; 0x442 <itoa_+0xa0>
     3f4:	e2 01       	movw	r28, r4
     3f6:	01 e0       	ldi	r16, 0x01	; 1
     3f8:	10 e0       	ldi	r17, 0x00	; 0
	 {
		 int r = n % base;
     3fa:	69 01       	movw	r12, r18
     3fc:	ee 24       	eor	r14, r14
     3fe:	d7 fc       	sbrc	r13, 7
     400:	e0 94       	com	r14
     402:	fe 2c       	mov	r15, r14
     404:	c7 01       	movw	r24, r14
     406:	b6 01       	movw	r22, r12
     408:	a5 01       	movw	r20, r10
     40a:	94 01       	movw	r18, r8
     40c:	0e 94 0b 12 	call	0x2416	; 0x2416 <__udivmodsi4>

		 if (r >= 10)
     410:	6a 30       	cpi	r22, 0x0A	; 10
     412:	71 05       	cpc	r23, r1
     414:	24 f0       	brlt	.+8      	; 0x41e <itoa_+0x7c>
		 buffer[i++] = 65 + (r - 10);
     416:	69 5c       	subi	r22, 0xC9	; 201
     418:	68 83       	st	Y, r22
     41a:	38 01       	movw	r6, r16
     41c:	03 c0       	rjmp	.+6      	; 0x424 <itoa_+0x82>
		 else
		 buffer[i++] = 48 + r;
     41e:	60 5d       	subi	r22, 0xD0	; 208
     420:	68 83       	st	Y, r22
     422:	38 01       	movw	r6, r16

		 n = n / base;
     424:	c7 01       	movw	r24, r14
     426:	b6 01       	movw	r22, r12
     428:	a5 01       	movw	r20, r10
     42a:	94 01       	movw	r18, r8
     42c:	0e 94 0b 12 	call	0x2416	; 0x2416 <__udivmodsi4>
     430:	0f 5f       	subi	r16, 0xFF	; 255
     432:	1f 4f       	sbci	r17, 0xFF	; 255
     434:	21 96       	adiw	r28, 0x01	; 1

	 // consider absolute value of number
	 int n = abs(value);

	 int i = 0;
	 while (n)
     436:	21 15       	cp	r18, r1
     438:	31 05       	cpc	r19, r1
     43a:	f9 f6       	brne	.-66     	; 0x3fa <itoa_+0x58>

		 n = n / base;
	 }

	 // if number is 0
	 if (i == 0)
     43c:	61 14       	cp	r6, r1
     43e:	71 04       	cpc	r7, r1
     440:	31 f4       	brne	.+12     	; 0x44e <itoa_+0xac>
	 buffer[i++] = '0';
     442:	80 e3       	ldi	r24, 0x30	; 48
     444:	f2 01       	movw	r30, r4
     446:	80 83       	st	Z, r24
     448:	66 24       	eor	r6, r6
     44a:	77 24       	eor	r7, r7
     44c:	63 94       	inc	r6
	 // is preceded with a minus sign (-)
	 // With any other base, value is always considered unsigned
	 if (value < 0 && base == 10)
	 buffer[i++] = '-';

	 buffer[i] = '\0'; // null terminate string
     44e:	f2 01       	movw	r30, r4
     450:	e6 0d       	add	r30, r6
     452:	f7 1d       	adc	r31, r7
     454:	10 82       	st	Z, r1

	 // reverse the string and return it
	 return reverse(buffer, 0, i - 1);
     456:	08 94       	sec
     458:	61 08       	sbc	r6, r1
     45a:	71 08       	sbc	r7, r1
     45c:	83 01       	movw	r16, r6
     45e:	22 27       	eor	r18, r18
     460:	17 fd       	sbrc	r17, 7
     462:	20 95       	com	r18
     464:	32 2f       	mov	r19, r18
     466:	c2 01       	movw	r24, r4
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	ba 01       	movw	r22, r20
     46e:	0e 94 ab 01 	call	0x356	; 0x356 <reverse>
     472:	2c 01       	movw	r4, r24
 }
     474:	84 2d       	mov	r24, r4
     476:	95 2d       	mov	r25, r5
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	ff 90       	pop	r15
     482:	ef 90       	pop	r14
     484:	df 90       	pop	r13
     486:	cf 90       	pop	r12
     488:	bf 90       	pop	r11
     48a:	af 90       	pop	r10
     48c:	9f 90       	pop	r9
     48e:	8f 90       	pop	r8
     490:	7f 90       	pop	r7
     492:	6f 90       	pop	r6
     494:	5f 90       	pop	r5
     496:	4f 90       	pop	r4
     498:	08 95       	ret

0000049a <Motor_Init>:
#include "motor.h"
static uint8_t gsv_is_Started=0;
static uint8_t gsv_is_intialized=0;
ERROR_STATUS Motor_Init(uint8_t Motor_Number)
{uint8_t Ret=0;
    switch(Motor_Number)
     49a:	82 30       	cpi	r24, 0x02	; 2
     49c:	79 f0       	breq	.+30     	; 0x4bc <Motor_Init+0x22>
     49e:	83 30       	cpi	r24, 0x03	; 3
     4a0:	c9 f0       	breq	.+50     	; 0x4d4 <Motor_Init+0x3a>
     4a2:	81 30       	cpi	r24, 0x01	; 1
     4a4:	39 f5       	brne	.+78     	; 0x4f4 <Motor_Init+0x5a>
    {
        case MOTOR_1:
        /*Enable PWM Bit...output*/
        /*IN1*/
        /*IN2*/
			gsv_is_intialized=MOTOR_1;
     4a6:	80 93 dd 01 	sts	0x01DD, r24
			Ret=Pwm_Init(&PWM_Configuration_1A);
     4aa:	84 e8       	ldi	r24, 0x84	; 132
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 a2 09 	call	0x1344	; 0x1344 <Pwm_Init>
			Ret=DIO_init(&Motorone);
     4b2:	86 e6       	ldi	r24, 0x66	; 102
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_init>

			  break;
     4ba:	08 95       	ret

          case MOTOR_2:
				gsv_is_intialized=MOTOR_2;
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	80 93 dd 01 	sts	0x01DD, r24
				Ret=Pwm_Init(&PWM_Configuration_1B);
     4c2:	82 e8       	ldi	r24, 0x82	; 130
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 a2 09 	call	0x1344	; 0x1344 <Pwm_Init>
				Ret=DIO_init(&Motortwo);
     4ca:	83 e6       	ldi	r24, 0x63	; 99
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_init>
				break;
     4d2:	08 95       	ret
				/*IN1*/
				/*IN2*/
				/*ENABLE PWM BIT FOR MOTOR 2*/
				/*IN3*/
				/*IN4*/
				gsv_is_intialized=ALL_MOTOR;
     4d4:	83 e0       	ldi	r24, 0x03	; 3
     4d6:	80 93 dd 01 	sts	0x01DD, r24
			Ret=Pwm_Init(&PWM_Configuration_1A);
     4da:	84 e8       	ldi	r24, 0x84	; 132
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 a2 09 	call	0x1344	; 0x1344 <Pwm_Init>
			Ret=Pwm_Init(&PWM_Configuration_1B);
     4e2:	82 e8       	ldi	r24, 0x82	; 130
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 a2 09 	call	0x1344	; 0x1344 <Pwm_Init>
			Ret=DIO_init(&ALL_Motor);
     4ea:	80 e6       	ldi	r24, 0x60	; 96
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_init>
				break;
     4f2:	08 95       	ret
			   }
      default:
      Ret=E_NOK;
     4f4:	81 e0       	ldi	r24, 0x01	; 1
      break;
    }
return Ret;
}
     4f6:	08 95       	ret

000004f8 <Motor_Direction>:

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{uint8_t Ret=0;

  switch(Motor_Number)
     4f8:	82 30       	cpi	r24, 0x02	; 2
     4fa:	79 f1       	breq	.+94     	; 0x55a <Motor_Direction+0x62>
     4fc:	83 30       	cpi	r24, 0x03	; 3
     4fe:	09 f4       	brne	.+2      	; 0x502 <Motor_Direction+0xa>
     500:	55 c0       	rjmp	.+170    	; 0x5ac <Motor_Direction+0xb4>
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	09 f0       	breq	.+2      	; 0x508 <Motor_Direction+0x10>
     506:	99 c0       	rjmp	.+306    	; 0x63a <Motor_Direction+0x142>
  {
  	case MOTOR_1:{
  	switch(Motor_Direction)
     508:	61 30       	cpi	r22, 0x01	; 1
     50a:	31 f0       	breq	.+12     	; 0x518 <Motor_Direction+0x20>
     50c:	61 30       	cpi	r22, 0x01	; 1
     50e:	d0 f0       	brcs	.+52     	; 0x544 <Motor_Direction+0x4c>
     510:	62 30       	cpi	r22, 0x02	; 2
     512:	09 f0       	breq	.+2      	; 0x516 <Motor_Direction+0x1e>
     514:	94 c0       	rjmp	.+296    	; 0x63e <Motor_Direction+0x146>
     516:	0b c0       	rjmp	.+22     	; 0x52e <Motor_Direction+0x36>
  	{
  		case MOTOR_FORWARD:
  		{
  			Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
     518:	83 e0       	ldi	r24, 0x03	; 3
     51a:	64 e0       	ldi	r22, 0x04	; 4
     51c:	4f ef       	ldi	r20, 0xFF	; 255
     51e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
  			Ret=DIO_Write (MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     522:	83 e0       	ldi	r24, 0x03	; 3
     524:	68 e0       	ldi	r22, 0x08	; 8
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>

  			break;
     52c:	08 95       	ret
  		}
  		case MOTOR_BACKWARD:
  		{
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
     52e:	83 e0       	ldi	r24, 0x03	; 3
     530:	68 e0       	ldi	r22, 0x08	; 8
     532:	4f ef       	ldi	r20, 0xFF	; 255
     534:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
        Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	64 e0       	ldi	r22, 0x04	; 4
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>

  			break;
     542:	08 95       	ret
  		}
  		case MOTOR_STOP:{Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     544:	83 e0       	ldi	r24, 0x03	; 3
     546:	64 e0       	ldi	r22, 0x04	; 4
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	68 e0       	ldi	r22, 0x08	; 8
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
  		break;}
     558:	08 95       	ret
  	}
  		break;
  	}
  	case MOTOR_2:
  	{
  		switch(Motor_Direction)
     55a:	61 30       	cpi	r22, 0x01	; 1
     55c:	31 f0       	breq	.+12     	; 0x56a <Motor_Direction+0x72>
     55e:	61 30       	cpi	r22, 0x01	; 1
     560:	d0 f0       	brcs	.+52     	; 0x596 <Motor_Direction+0x9e>
     562:	62 30       	cpi	r22, 0x02	; 2
     564:	09 f0       	breq	.+2      	; 0x568 <Motor_Direction+0x70>
     566:	6d c0       	rjmp	.+218    	; 0x642 <Motor_Direction+0x14a>
     568:	0b c0       	rjmp	.+22     	; 0x580 <Motor_Direction+0x88>
  		{
  			case MOTOR_FORWARD:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	60 e8       	ldi	r22, 0x80	; 128
     56e:	4f ef       	ldi	r20, 0xFF	; 255
     570:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
          Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     574:	83 e0       	ldi	r24, 0x03	; 3
     576:	60 e4       	ldi	r22, 0x40	; 64
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>

  				break;
     57e:	08 95       	ret
  			}
  			case MOTOR_BACKWARD:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
     580:	83 e0       	ldi	r24, 0x03	; 3
     582:	60 e4       	ldi	r22, 0x40	; 64
     584:	4f ef       	ldi	r20, 0xFF	; 255
     586:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	60 e8       	ldi	r22, 0x80	; 128
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
  				break;
     594:	08 95       	ret
  			}
  			case MOTOR_STOP:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     596:	83 e0       	ldi	r24, 0x03	; 3
     598:	60 e4       	ldi	r22, 0x40	; 64
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
  				Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     5a0:	83 e0       	ldi	r24, 0x03	; 3
     5a2:	60 e8       	ldi	r22, 0x80	; 128
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
  				break;
     5aa:	08 95       	ret

  		break;
  	}
  	case ALL_MOTOR:
  	{
  switch(Motor_Direction)
     5ac:	61 30       	cpi	r22, 0x01	; 1
     5ae:	31 f0       	breq	.+12     	; 0x5bc <Motor_Direction+0xc4>
     5b0:	61 30       	cpi	r22, 0x01	; 1
     5b2:	70 f1       	brcs	.+92     	; 0x610 <Motor_Direction+0x118>
     5b4:	62 30       	cpi	r22, 0x02	; 2
     5b6:	09 f0       	breq	.+2      	; 0x5ba <Motor_Direction+0xc2>
     5b8:	46 c0       	rjmp	.+140    	; 0x646 <Motor_Direction+0x14e>
     5ba:	15 c0       	rjmp	.+42     	; 0x5e6 <Motor_Direction+0xee>
  {
  	case MOTOR_FORWARD:
  	{
  		Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
     5bc:	83 e0       	ldi	r24, 0x03	; 3
     5be:	64 e0       	ldi	r22, 0x04	; 4
     5c0:	4f ef       	ldi	r20, 0xFF	; 255
     5c2:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	68 e0       	ldi	r22, 0x08	; 8
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>

  	Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     5d0:	83 e0       	ldi	r24, 0x03	; 3
     5d2:	60 e4       	ldi	r22, 0x40	; 64
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	60 e8       	ldi	r22, 0x80	; 128
     5de:	4f ef       	ldi	r20, 0xFF	; 255
     5e0:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>

  		break;
     5e4:	08 95       	ret
  	}
  	case MOTOR_BACKWARD:
  	{

  		Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     5e6:	83 e0       	ldi	r24, 0x03	; 3
     5e8:	64 e0       	ldi	r22, 0x04	; 4
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
      Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	68 e0       	ldi	r22, 0x08	; 8
     5f4:	4f ef       	ldi	r20, 0xFF	; 255
     5f6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
     5fa:	83 e0       	ldi	r24, 0x03	; 3
     5fc:	60 e4       	ldi	r22, 0x40	; 64
     5fe:	4f ef       	ldi	r20, 0xFF	; 255
     600:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     604:	83 e0       	ldi	r24, 0x03	; 3
     606:	60 e8       	ldi	r22, 0x80	; 128
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>

  		break;	}
     60e:	08 95       	ret
  	case MOTOR_STOP:
  	{
  			Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     610:	83 e0       	ldi	r24, 0x03	; 3
     612:	64 e0       	ldi	r22, 0x04	; 4
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	60 e4       	ldi	r22, 0x40	; 64
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>

  			Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	68 e0       	ldi	r22, 0x08	; 8
     628:	40 e0       	ldi	r20, 0x00	; 0
     62a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	60 e8       	ldi	r22, 0x80	; 128
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>

  		break;
     638:	08 95       	ret
    }
return Ret;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{uint8_t Ret=0;
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	08 95       	ret
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	08 95       	ret
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	08 95       	ret
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);

  		break;
  	}
    default:
    Ret=E_NOK;
     646:	81 e0       	ldi	r24, 0x01	; 1



    }
return Ret;
}
     648:	08 95       	ret

0000064a <Motor_Start>:


ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed)
{
  uint8_t Ret=0;
switch (Motor_Number) {
     64a:	82 30       	cpi	r24, 0x02	; 2
     64c:	69 f0       	breq	.+26     	; 0x668 <Motor_Start+0x1e>
     64e:	83 30       	cpi	r24, 0x03	; 3
     650:	a9 f0       	breq	.+42     	; 0x67c <Motor_Start+0x32>
     652:	81 30       	cpi	r24, 0x01	; 1
     654:	f1 f4       	brne	.+60     	; 0x692 <Motor_Start+0x48>
  case MOTOR_1:
  {gsv_is_Started=MOTOR_1;
     656:	80 93 de 01 	sts	0x01DE, r24
    Ret=Pwm_Start(PWM_CH1A,Mot_Speed,30);
     65a:	2e e1       	ldi	r18, 0x1E	; 30
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	0e 94 cc 09 	call	0x1398	; 0x1398 <Pwm_Start>
    break;
     666:	08 95       	ret
  }
  case MOTOR_2:
  {
    gsv_is_Started=MOTOR_2;
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	80 93 de 01 	sts	0x01DE, r24
    Ret=Pwm_Start(PWM_CH1B,Mot_Speed,30);
     66e:	2e e1       	ldi	r18, 0x1E	; 30
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	0e 94 cc 09 	call	0x1398	; 0x1398 <Pwm_Start>
    break;
     67a:	08 95       	ret
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    gsv_is_Started=MOTOR_1 | MOTOR_2;
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	80 93 de 01 	sts	0x01DE, r24
    Ret=Pwm_Start(PWM_CH1B,Mot_Speed,30);
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	2e e1       	ldi	r18, 0x1E	; 30
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	0e 94 cc 09 	call	0x1398	; 0x1398 <Pwm_Start>
    break;
     690:	08 95       	ret
  }
  default:
  Ret=E_NOK;
     692:	81 e0       	ldi	r24, 0x01	; 1
  break;
}


return Ret;
}
     694:	08 95       	ret

00000696 <Motor_SpeedUpdate>:
ERROR_STATUS Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed)
{
  uint8_t Ret=0;

switch (Motor_Number) {
     696:	82 30       	cpi	r24, 0x02	; 2
     698:	79 f0       	breq	.+30     	; 0x6b8 <Motor_SpeedUpdate+0x22>
     69a:	83 30       	cpi	r24, 0x03	; 3
     69c:	c1 f0       	breq	.+48     	; 0x6ce <Motor_SpeedUpdate+0x38>
     69e:	81 30       	cpi	r24, 0x01	; 1
     6a0:	11 f5       	brne	.+68     	; 0x6e6 <Motor_SpeedUpdate+0x50>
  case MOTOR_1:
  { if(gsv_is_intialized == Motor_Number)
     6a2:	80 91 dd 01 	lds	r24, 0x01DD
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	01 f5       	brne	.+64     	; 0x6ea <Motor_SpeedUpdate+0x54>
    Ret=Pwm_Start(PWM_CH1A,Speed,30);
     6aa:	2e e1       	ldi	r18, 0x1E	; 30
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	0e 94 cc 09 	call	0x1398	; 0x1398 <Pwm_Start>
     6b6:	08 95       	ret
    else{Ret=E_NOK;}
    break;
  }
  case MOTOR_2:
  {
    if(gsv_is_intialized == Motor_Number)
     6b8:	80 91 dd 01 	lds	r24, 0x01DD
     6bc:	82 30       	cpi	r24, 0x02	; 2
     6be:	b9 f4       	brne	.+46     	; 0x6ee <Motor_SpeedUpdate+0x58>
      Ret=Pwm_Start(PWM_CH1B,Speed,30);
     6c0:	2e e1       	ldi	r18, 0x1E	; 30
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	0e 94 cc 09 	call	0x1398	; 0x1398 <Pwm_Start>
     6cc:	08 95       	ret
      else{Ret=E_NOK;}
    break;
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    if(gsv_is_intialized == Motor_Number)
     6ce:	80 91 dd 01 	lds	r24, 0x01DD
     6d2:	83 30       	cpi	r24, 0x03	; 3
     6d4:	71 f4       	brne	.+28     	; 0x6f2 <Motor_SpeedUpdate+0x5c>
        Ret=Pwm_Start(PWM_CH1B,Speed,30);
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	2e e1       	ldi	r18, 0x1E	; 30
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	0e 94 cc 09 	call	0x1398	; 0x1398 <Pwm_Start>
     6e4:	08 95       	ret
        else{Ret=E_NOK;}
    break;
  }
  default:
  Ret=E_NOK;
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	08 95       	ret

switch (Motor_Number) {
  case MOTOR_1:
  { if(gsv_is_intialized == Motor_Number)
    Ret=Pwm_Start(PWM_CH1A,Speed,30);
    else{Ret=E_NOK;}
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	08 95       	ret
  }
  case MOTOR_2:
  {
    if(gsv_is_intialized == Motor_Number)
      Ret=Pwm_Start(PWM_CH1B,Speed,30);
      else{Ret=E_NOK;}
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	08 95       	ret
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    if(gsv_is_intialized == Motor_Number)
        Ret=Pwm_Start(PWM_CH1B,Speed,30);
        else{Ret=E_NOK;}
     6f2:	81 e0       	ldi	r24, 0x01	; 1
  Ret=E_NOK;
  break;
}

return Ret;
}
     6f4:	08 95       	ret

000006f6 <Motor_Stop>:

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	uint8_t Ret=0;
	switch(Motor_Number)
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	19 f0       	breq	.+6      	; 0x700 <Motor_Stop+0xa>
     6fa:	82 30       	cpi	r24, 0x02	; 2
     6fc:	49 f4       	brne	.+18     	; 0x710 <Motor_Stop+0x1a>
     6fe:	04 c0       	rjmp	.+8      	; 0x708 <Motor_Stop+0x12>
	{
		case MOTOR_1 :
		Ret=Pwm_Stop(PWM_CH1A);
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	0e 94 9d 0b 	call	0x173a	; 0x173a <Pwm_Stop>
		break;
     706:	08 95       	ret
		case MOTOR_2:
		Ret=Pwm_Stop(PWM_CH1B);
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	0e 94 9d 0b 	call	0x173a	; 0x173a <Pwm_Stop>
		break;
     70e:	08 95       	ret
		default:
		Ret=E_NOK;
     710:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}


	return Ret;
}
     712:	08 95       	ret

00000714 <Motor_GetStatus>:

 ERROR_STATUS Motor_GetStatus(uint8_t Motor_Number, uint8_t* Mot_status)
 {
	 if(gsv_is_intialized == Motor_Number)
     714:	90 91 dd 01 	lds	r25, 0x01DD
     718:	98 17       	cp	r25, r24
     71a:	21 f4       	brne	.+8      	; 0x724 <Motor_GetStatus+0x10>
		*Mot_status=1;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	fb 01       	movw	r30, r22
     720:	80 83       	st	Z, r24
     722:	08 95       	ret
	 else
	 {
		*Mot_status=0;
     724:	fb 01       	movw	r30, r22
     726:	10 82       	st	Z, r1
	 }
	 
 }
     728:	08 95       	ret

0000072a <SwDelay_ms>:
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param n: the milli-seconds
 */
void SwDelay_ms(uint32_t n)
{
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
	uint8_t counter_256;
	uint8_t counter_21;
	while (n)
     72e:	00 97       	sbiw	r24, 0x00	; 0
     730:	a1 05       	cpc	r26, r1
     732:	b1 05       	cpc	r27, r1
     734:	61 f4       	brne	.+24     	; 0x74e <SwDelay_ms+0x24>
     736:	08 95       	ret
     738:	21 50       	subi	r18, 0x01	; 1
		counter_21 = 21;
		while (counter_21)
		{
			/* every 256 branch costs 48 micro seconds */
			counter_256 = 255;
			while (counter_256)
     73a:	f1 f7       	brne	.-4      	; 0x738 <SwDelay_ms+0xe>
     73c:	31 50       	subi	r19, 0x01	; 1
	uint8_t counter_21;
	while (n)
	{
		/* every 21 repetition of the 256 branches costs almost 1 milli second as: 48 micro x 21 = 1.008 milli second*/
		counter_21 = 21;
		while (counter_21)
     73e:	11 f0       	breq	.+4      	; 0x744 <SwDelay_ms+0x1a>
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param n: the milli-seconds
 */
void SwDelay_ms(uint32_t n)
{
     740:	24 2f       	mov	r18, r20
     742:	fa cf       	rjmp	.-12     	; 0x738 <SwDelay_ms+0xe>
			{
				counter_256--;
			}
			counter_21--;
		}
		n--;
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	a1 09       	sbc	r26, r1
     748:	b1 09       	sbc	r27, r1
 */
void SwDelay_ms(uint32_t n)
{
	uint8_t counter_256;
	uint8_t counter_21;
	while (n)
     74a:	19 f4       	brne	.+6      	; 0x752 <SwDelay_ms+0x28>
     74c:	08 95       	ret
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param n: the milli-seconds
 */
void SwDelay_ms(uint32_t n)
{
     74e:	55 e1       	ldi	r21, 0x15	; 21
     750:	4f ef       	ldi	r20, 0xFF	; 255
     752:	35 2f       	mov	r19, r21
     754:	f5 cf       	rjmp	.-22     	; 0x740 <SwDelay_ms+0x16>

00000756 <SwDelay_us>:
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param n: the micro-seconds
 */
void SwDelay_us(uint32_t n)
{
     756:	dc 01       	movw	r26, r24
     758:	cb 01       	movw	r24, r22
	while (n)
     75a:	00 97       	sbiw	r24, 0x00	; 0
     75c:	a1 05       	cpc	r26, r1
     75e:	b1 05       	cpc	r27, r1
     760:	21 f0       	breq	.+8      	; 0x76a <SwDelay_us+0x14>
	{
		n--;
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	a1 09       	sbc	r26, r1
     766:	b1 09       	sbc	r27, r1
 * 				don't use it with RTOSs
 * @param n: the micro-seconds
 */
void SwDelay_us(uint32_t n)
{
	while (n)
     768:	e1 f7       	brne	.-8      	; 0x762 <SwDelay_us+0xc>
     76a:	08 95       	ret

0000076c <Us_Init>:
 *                                                                                                  *
 ***************************************************************************************************/

ERROR_STATUS Us_Init(void)
{uint8_t Ret;
Ret=DIO_init(&US_Configuration);
     76c:	89 e6       	ldi	r24, 0x69	; 105
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_init>
Ret=Icu_Init(&ICU_Configuration);
     774:	8c e7       	ldi	r24, 0x7C	; 124
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <Icu_Init>
return Ret;
}
     77c:	08 95       	ret

0000077e <Us_Trigger>:
ERROR_STATUS Us_Trigger(void)
{uint8_t Ret=0;
Ret=DIO_Write(GPIOC,BIT4,HIGH);
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	60 e1       	ldi	r22, 0x10	; 16
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	4f ef       	ldi	r20, 0xFF	; 255
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
/***********************************************/
Timer_Start(TIMER_CH0,10);
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	6a e0       	ldi	r22, 0x0A	; 10
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <Timer_Start>
/**********************************************/
Ret=DIO_Write(GPIOC,BIT4,LOW);
     798:	82 e0       	ldi	r24, 0x02	; 2
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	60 e1       	ldi	r22, 0x10	; 16
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <DIO_Write>
return Ret;	
}
     7a8:	08 95       	ret

000007aa <Us_GetDistance>:


ERROR_STATUS Us_GetDistance(uint16_t *Distance)
{uint8_t Ret=0;
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <Us_GetDistance+0xa>
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <Us_GetDistance+0xc>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	8c 01       	movw	r16, r24
	uint32_t u32l_Time;
	Ret=Icu_ReadTime(ICU_CH2,ICU_RISE_TO_FALL,&u32l_Time);
     7bc:	82 e0       	ldi	r24, 0x02	; 2
     7be:	61 e0       	ldi	r22, 0x01	; 1
     7c0:	ae 01       	movw	r20, r28
     7c2:	4f 5f       	subi	r20, 0xFF	; 255
     7c4:	5f 4f       	sbci	r21, 0xFF	; 255
     7c6:	0e 94 8c 08 	call	0x1118	; 0x1118 <Icu_ReadTime>
	*Distance=u32l_Time;
     7ca:	29 81       	ldd	r18, Y+1	; 0x01
     7cc:	3a 81       	ldd	r19, Y+2	; 0x02
     7ce:	f8 01       	movw	r30, r16
     7d0:	31 83       	std	Z+1, r19	; 0x01
     7d2:	20 83       	st	Z, r18
	return Ret;
}
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	08 95       	ret

000007e6 <G_interrupt_Enable>:
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
 SREG |=(0x80);
     7e6:	8f b7       	in	r24, 0x3f	; 63
     7e8:	80 68       	ori	r24, 0x80	; 128
     7ea:	8f bf       	out	0x3f, r24	; 63
}
     7ec:	08 95       	ret

000007ee <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
CLEAR_BIT(PORTB_DIR,2);/*Input*/
     7ee:	ba 98       	cbi	0x17, 2	; 23
SET_BIT(PORTB_DATA,2);/*Pullup*/
     7f0:	c2 9a       	sbi	0x18, 2	; 24
SET_BIT(GICR,INT2);/*EXT2*/
     7f2:	8b b7       	in	r24, 0x3b	; 59
     7f4:	80 62       	ori	r24, 0x20	; 32
     7f6:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);/*Rising*/
     7f8:	84 b7       	in	r24, 0x34	; 52
     7fa:	80 64       	ori	r24, 0x40	; 64
     7fc:	84 bf       	out	0x34, r24	; 52
}
     7fe:	08 95       	ret

00000800 <EX_interrupt_enable1>:
void EX_interrupt_enable1(void)
{
	CLEAR_BIT(PORTD_DIR,3);
     800:	8b 98       	cbi	0x11, 3	; 17
	SET_BIT(PORTD_DATA,3);
     802:	93 9a       	sbi	0x12, 3	; 18
	SET_BIT(GICR,INT1);
     804:	8b b7       	in	r24, 0x3b	; 59
     806:	80 68       	ori	r24, 0x80	; 128
     808:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,2);/*Any logical change*/
     80a:	85 b7       	in	r24, 0x35	; 53
     80c:	84 60       	ori	r24, 0x04	; 4
     80e:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,3);
     810:	85 b7       	in	r24, 0x35	; 53
     812:	87 7f       	andi	r24, 0xF7	; 247
     814:	85 bf       	out	0x35, r24	; 53
	
}
     816:	08 95       	ret

00000818 <EX_interrupt_enable0>:
void EX_interrupt_enable0(void)
{
	CLEAR_BIT(PORTD_DIR,2);
     818:	8a 98       	cbi	0x11, 2	; 17
	SET_BIT(PORTD_DATA,2);
     81a:	92 9a       	sbi	0x12, 2	; 18
	SET_BIT(GICR,INT0);
     81c:	8b b7       	in	r24, 0x3b	; 59
     81e:	80 64       	ori	r24, 0x40	; 64
     820:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,0);/*Any logical change*/
     822:	85 b7       	in	r24, 0x35	; 53
     824:	81 60       	ori	r24, 0x01	; 1
     826:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,1);
     828:	85 b7       	in	r24, 0x35	; 53
     82a:	8d 7f       	andi	r24, 0xFD	; 253
     82c:	85 bf       	out	0x35, r24	; 53
	
}
     82e:	08 95       	ret

00000830 <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     830:	8f b7       	in	r24, 0x3f	; 63
     832:	8f 77       	andi	r24, 0x7F	; 127
     834:	8f bf       	out	0x3f, r24	; 63
}
     836:	08 95       	ret

00000838 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     838:	1f 92       	push	r1
     83a:	0f 92       	push	r0
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	0f 92       	push	r0
     840:	11 24       	eor	r1, r1
     842:	2f 93       	push	r18
     844:	3f 93       	push	r19
     846:	4f 93       	push	r20
     848:	5f 93       	push	r21
     84a:	6f 93       	push	r22
     84c:	7f 93       	push	r23
     84e:	8f 93       	push	r24
     850:	9f 93       	push	r25
     852:	af 93       	push	r26
     854:	bf 93       	push	r27
     856:	ef 93       	push	r30
     858:	ff 93       	push	r31
  INT0_external_interrupt();
     85a:	e0 91 23 02 	lds	r30, 0x0223
     85e:	f0 91 24 02 	lds	r31, 0x0224
     862:	09 95       	icall
}
     864:	ff 91       	pop	r31
     866:	ef 91       	pop	r30
     868:	bf 91       	pop	r27
     86a:	af 91       	pop	r26
     86c:	9f 91       	pop	r25
     86e:	8f 91       	pop	r24
     870:	7f 91       	pop	r23
     872:	6f 91       	pop	r22
     874:	5f 91       	pop	r21
     876:	4f 91       	pop	r20
     878:	3f 91       	pop	r19
     87a:	2f 91       	pop	r18
     87c:	0f 90       	pop	r0
     87e:	0f be       	out	0x3f, r0	; 63
     880:	0f 90       	pop	r0
     882:	1f 90       	pop	r1
     884:	18 95       	reti

00000886 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     886:	1f 92       	push	r1
     888:	0f 92       	push	r0
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	0f 92       	push	r0
     88e:	11 24       	eor	r1, r1
     890:	2f 93       	push	r18
     892:	3f 93       	push	r19
     894:	4f 93       	push	r20
     896:	5f 93       	push	r21
     898:	6f 93       	push	r22
     89a:	7f 93       	push	r23
     89c:	8f 93       	push	r24
     89e:	9f 93       	push	r25
     8a0:	af 93       	push	r26
     8a2:	bf 93       	push	r27
     8a4:	ef 93       	push	r30
     8a6:	ff 93       	push	r31
  INT1_external_interrupt();
     8a8:	e0 91 2b 02 	lds	r30, 0x022B
     8ac:	f0 91 2c 02 	lds	r31, 0x022C
     8b0:	09 95       	icall
}
     8b2:	ff 91       	pop	r31
     8b4:	ef 91       	pop	r30
     8b6:	bf 91       	pop	r27
     8b8:	af 91       	pop	r26
     8ba:	9f 91       	pop	r25
     8bc:	8f 91       	pop	r24
     8be:	7f 91       	pop	r23
     8c0:	6f 91       	pop	r22
     8c2:	5f 91       	pop	r21
     8c4:	4f 91       	pop	r20
     8c6:	3f 91       	pop	r19
     8c8:	2f 91       	pop	r18
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	1f 90       	pop	r1
     8d2:	18 95       	reti

000008d4 <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     8d4:	1f 92       	push	r1
     8d6:	0f 92       	push	r0
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	0f 92       	push	r0
     8dc:	11 24       	eor	r1, r1
     8de:	2f 93       	push	r18
     8e0:	3f 93       	push	r19
     8e2:	4f 93       	push	r20
     8e4:	5f 93       	push	r21
     8e6:	6f 93       	push	r22
     8e8:	7f 93       	push	r23
     8ea:	8f 93       	push	r24
     8ec:	9f 93       	push	r25
     8ee:	af 93       	push	r26
     8f0:	bf 93       	push	r27
     8f2:	ef 93       	push	r30
     8f4:	ff 93       	push	r31
  INT2_external_interrupt();
     8f6:	e0 91 6e 00 	lds	r30, 0x006E
     8fa:	f0 91 6f 00 	lds	r31, 0x006F
     8fe:	09 95       	icall
}
     900:	ff 91       	pop	r31
     902:	ef 91       	pop	r30
     904:	bf 91       	pop	r27
     906:	af 91       	pop	r26
     908:	9f 91       	pop	r25
     90a:	8f 91       	pop	r24
     90c:	7f 91       	pop	r23
     90e:	6f 91       	pop	r22
     910:	5f 91       	pop	r21
     912:	4f 91       	pop	r20
     914:	3f 91       	pop	r19
     916:	2f 91       	pop	r18
     918:	0f 90       	pop	r0
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	0f 90       	pop	r0
     91e:	1f 90       	pop	r1
     920:	18 95       	reti

00000922 <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     922:	1f 92       	push	r1
     924:	0f 92       	push	r0
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	0f 92       	push	r0
     92a:	11 24       	eor	r1, r1
     92c:	2f 93       	push	r18
     92e:	3f 93       	push	r19
     930:	4f 93       	push	r20
     932:	5f 93       	push	r21
     934:	6f 93       	push	r22
     936:	7f 93       	push	r23
     938:	8f 93       	push	r24
     93a:	9f 93       	push	r25
     93c:	af 93       	push	r26
     93e:	bf 93       	push	r27
     940:	ef 93       	push	r30
     942:	ff 93       	push	r31
TIMER2COMP();
     944:	e0 91 31 02 	lds	r30, 0x0231
     948:	f0 91 32 02 	lds	r31, 0x0232
     94c:	09 95       	icall
}
     94e:	ff 91       	pop	r31
     950:	ef 91       	pop	r30
     952:	bf 91       	pop	r27
     954:	af 91       	pop	r26
     956:	9f 91       	pop	r25
     958:	8f 91       	pop	r24
     95a:	7f 91       	pop	r23
     95c:	6f 91       	pop	r22
     95e:	5f 91       	pop	r21
     960:	4f 91       	pop	r20
     962:	3f 91       	pop	r19
     964:	2f 91       	pop	r18
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
     96a:	0f 90       	pop	r0
     96c:	1f 90       	pop	r1
     96e:	18 95       	reti

00000970 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     970:	1f 92       	push	r1
     972:	0f 92       	push	r0
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	0f 92       	push	r0
     978:	11 24       	eor	r1, r1
     97a:	2f 93       	push	r18
     97c:	3f 93       	push	r19
     97e:	4f 93       	push	r20
     980:	5f 93       	push	r21
     982:	6f 93       	push	r22
     984:	7f 93       	push	r23
     986:	8f 93       	push	r24
     988:	9f 93       	push	r25
     98a:	af 93       	push	r26
     98c:	bf 93       	push	r27
     98e:	ef 93       	push	r30
     990:	ff 93       	push	r31
  TIMER2OVF();
     992:	e0 91 13 02 	lds	r30, 0x0213
     996:	f0 91 14 02 	lds	r31, 0x0214
     99a:	09 95       	icall
}
     99c:	ff 91       	pop	r31
     99e:	ef 91       	pop	r30
     9a0:	bf 91       	pop	r27
     9a2:	af 91       	pop	r26
     9a4:	9f 91       	pop	r25
     9a6:	8f 91       	pop	r24
     9a8:	7f 91       	pop	r23
     9aa:	6f 91       	pop	r22
     9ac:	5f 91       	pop	r21
     9ae:	4f 91       	pop	r20
     9b0:	3f 91       	pop	r19
     9b2:	2f 91       	pop	r18
     9b4:	0f 90       	pop	r0
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	0f 90       	pop	r0
     9ba:	1f 90       	pop	r1
     9bc:	18 95       	reti

000009be <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     9be:	1f 92       	push	r1
     9c0:	0f 92       	push	r0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	0f 92       	push	r0
     9c6:	11 24       	eor	r1, r1
     9c8:	2f 93       	push	r18
     9ca:	3f 93       	push	r19
     9cc:	4f 93       	push	r20
     9ce:	5f 93       	push	r21
     9d0:	6f 93       	push	r22
     9d2:	7f 93       	push	r23
     9d4:	8f 93       	push	r24
     9d6:	9f 93       	push	r25
     9d8:	af 93       	push	r26
     9da:	bf 93       	push	r27
     9dc:	ef 93       	push	r30
     9de:	ff 93       	push	r31
  TIMER1CAPT();
     9e0:	e0 91 2d 02 	lds	r30, 0x022D
     9e4:	f0 91 2e 02 	lds	r31, 0x022E
     9e8:	09 95       	icall
}
     9ea:	ff 91       	pop	r31
     9ec:	ef 91       	pop	r30
     9ee:	bf 91       	pop	r27
     9f0:	af 91       	pop	r26
     9f2:	9f 91       	pop	r25
     9f4:	8f 91       	pop	r24
     9f6:	7f 91       	pop	r23
     9f8:	6f 91       	pop	r22
     9fa:	5f 91       	pop	r21
     9fc:	4f 91       	pop	r20
     9fe:	3f 91       	pop	r19
     a00:	2f 91       	pop	r18
     a02:	0f 90       	pop	r0
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	0f 90       	pop	r0
     a08:	1f 90       	pop	r1
     a0a:	18 95       	reti

00000a0c <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	2f 93       	push	r18
     a18:	3f 93       	push	r19
     a1a:	4f 93       	push	r20
     a1c:	5f 93       	push	r21
     a1e:	6f 93       	push	r22
     a20:	7f 93       	push	r23
     a22:	8f 93       	push	r24
     a24:	9f 93       	push	r25
     a26:	af 93       	push	r26
     a28:	bf 93       	push	r27
     a2a:	ef 93       	push	r30
     a2c:	ff 93       	push	r31
TIMER1COMPA();
     a2e:	e0 91 19 02 	lds	r30, 0x0219
     a32:	f0 91 1a 02 	lds	r31, 0x021A
     a36:	09 95       	icall
}
     a38:	ff 91       	pop	r31
     a3a:	ef 91       	pop	r30
     a3c:	bf 91       	pop	r27
     a3e:	af 91       	pop	r26
     a40:	9f 91       	pop	r25
     a42:	8f 91       	pop	r24
     a44:	7f 91       	pop	r23
     a46:	6f 91       	pop	r22
     a48:	5f 91       	pop	r21
     a4a:	4f 91       	pop	r20
     a4c:	3f 91       	pop	r19
     a4e:	2f 91       	pop	r18
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     a5a:	1f 92       	push	r1
     a5c:	0f 92       	push	r0
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	0f 92       	push	r0
     a62:	11 24       	eor	r1, r1
     a64:	2f 93       	push	r18
     a66:	3f 93       	push	r19
     a68:	4f 93       	push	r20
     a6a:	5f 93       	push	r21
     a6c:	6f 93       	push	r22
     a6e:	7f 93       	push	r23
     a70:	8f 93       	push	r24
     a72:	9f 93       	push	r25
     a74:	af 93       	push	r26
     a76:	bf 93       	push	r27
     a78:	ef 93       	push	r30
     a7a:	ff 93       	push	r31
  TIMER1COMPB();
     a7c:	e0 91 17 02 	lds	r30, 0x0217
     a80:	f0 91 18 02 	lds	r31, 0x0218
     a84:	09 95       	icall
}
     a86:	ff 91       	pop	r31
     a88:	ef 91       	pop	r30
     a8a:	bf 91       	pop	r27
     a8c:	af 91       	pop	r26
     a8e:	9f 91       	pop	r25
     a90:	8f 91       	pop	r24
     a92:	7f 91       	pop	r23
     a94:	6f 91       	pop	r22
     a96:	5f 91       	pop	r21
     a98:	4f 91       	pop	r20
     a9a:	3f 91       	pop	r19
     a9c:	2f 91       	pop	r18
     a9e:	0f 90       	pop	r0
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	0f 90       	pop	r0
     aa4:	1f 90       	pop	r1
     aa6:	18 95       	reti

00000aa8 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     aa8:	1f 92       	push	r1
     aaa:	0f 92       	push	r0
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	0f 92       	push	r0
     ab0:	11 24       	eor	r1, r1
     ab2:	2f 93       	push	r18
     ab4:	3f 93       	push	r19
     ab6:	4f 93       	push	r20
     ab8:	5f 93       	push	r21
     aba:	6f 93       	push	r22
     abc:	7f 93       	push	r23
     abe:	8f 93       	push	r24
     ac0:	9f 93       	push	r25
     ac2:	af 93       	push	r26
     ac4:	bf 93       	push	r27
     ac6:	ef 93       	push	r30
     ac8:	ff 93       	push	r31
  TIMER1OVF();
     aca:	e0 91 2f 02 	lds	r30, 0x022F
     ace:	f0 91 30 02 	lds	r31, 0x0230
     ad2:	09 95       	icall
}
     ad4:	ff 91       	pop	r31
     ad6:	ef 91       	pop	r30
     ad8:	bf 91       	pop	r27
     ada:	af 91       	pop	r26
     adc:	9f 91       	pop	r25
     ade:	8f 91       	pop	r24
     ae0:	7f 91       	pop	r23
     ae2:	6f 91       	pop	r22
     ae4:	5f 91       	pop	r21
     ae6:	4f 91       	pop	r20
     ae8:	3f 91       	pop	r19
     aea:	2f 91       	pop	r18
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	0f 90       	pop	r0
     af2:	1f 90       	pop	r1
     af4:	18 95       	reti

00000af6 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     af6:	1f 92       	push	r1
     af8:	0f 92       	push	r0
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	0f 92       	push	r0
     afe:	11 24       	eor	r1, r1
     b00:	2f 93       	push	r18
     b02:	3f 93       	push	r19
     b04:	4f 93       	push	r20
     b06:	5f 93       	push	r21
     b08:	6f 93       	push	r22
     b0a:	7f 93       	push	r23
     b0c:	8f 93       	push	r24
     b0e:	9f 93       	push	r25
     b10:	af 93       	push	r26
     b12:	bf 93       	push	r27
     b14:	ef 93       	push	r30
     b16:	ff 93       	push	r31

  TIMER0COMP();
     b18:	e0 91 27 02 	lds	r30, 0x0227
     b1c:	f0 91 28 02 	lds	r31, 0x0228
     b20:	09 95       	icall
}
     b22:	ff 91       	pop	r31
     b24:	ef 91       	pop	r30
     b26:	bf 91       	pop	r27
     b28:	af 91       	pop	r26
     b2a:	9f 91       	pop	r25
     b2c:	8f 91       	pop	r24
     b2e:	7f 91       	pop	r23
     b30:	6f 91       	pop	r22
     b32:	5f 91       	pop	r21
     b34:	4f 91       	pop	r20
     b36:	3f 91       	pop	r19
     b38:	2f 91       	pop	r18
     b3a:	0f 90       	pop	r0
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	0f 90       	pop	r0
     b40:	1f 90       	pop	r1
     b42:	18 95       	reti

00000b44 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     b44:	1f 92       	push	r1
     b46:	0f 92       	push	r0
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	0f 92       	push	r0
     b4c:	11 24       	eor	r1, r1
     b4e:	2f 93       	push	r18
     b50:	3f 93       	push	r19
     b52:	4f 93       	push	r20
     b54:	5f 93       	push	r21
     b56:	6f 93       	push	r22
     b58:	7f 93       	push	r23
     b5a:	8f 93       	push	r24
     b5c:	9f 93       	push	r25
     b5e:	af 93       	push	r26
     b60:	bf 93       	push	r27
     b62:	ef 93       	push	r30
     b64:	ff 93       	push	r31

  TIMER0OVF_INT();
     b66:	e0 91 6c 00 	lds	r30, 0x006C
     b6a:	f0 91 6d 00 	lds	r31, 0x006D
     b6e:	09 95       	icall
}
     b70:	ff 91       	pop	r31
     b72:	ef 91       	pop	r30
     b74:	bf 91       	pop	r27
     b76:	af 91       	pop	r26
     b78:	9f 91       	pop	r25
     b7a:	8f 91       	pop	r24
     b7c:	7f 91       	pop	r23
     b7e:	6f 91       	pop	r22
     b80:	5f 91       	pop	r21
     b82:	4f 91       	pop	r20
     b84:	3f 91       	pop	r19
     b86:	2f 91       	pop	r18
     b88:	0f 90       	pop	r0
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	0f 90       	pop	r0
     b8e:	1f 90       	pop	r1
     b90:	18 95       	reti

00000b92 <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     b92:	1f 92       	push	r1
     b94:	0f 92       	push	r0
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	0f 92       	push	r0
     b9a:	11 24       	eor	r1, r1
     b9c:	2f 93       	push	r18
     b9e:	3f 93       	push	r19
     ba0:	4f 93       	push	r20
     ba2:	5f 93       	push	r21
     ba4:	6f 93       	push	r22
     ba6:	7f 93       	push	r23
     ba8:	8f 93       	push	r24
     baa:	9f 93       	push	r25
     bac:	af 93       	push	r26
     bae:	bf 93       	push	r27
     bb0:	ef 93       	push	r30
     bb2:	ff 93       	push	r31
  SPI_STC();
     bb4:	e0 91 1b 02 	lds	r30, 0x021B
     bb8:	f0 91 1c 02 	lds	r31, 0x021C
     bbc:	09 95       	icall
}
     bbe:	ff 91       	pop	r31
     bc0:	ef 91       	pop	r30
     bc2:	bf 91       	pop	r27
     bc4:	af 91       	pop	r26
     bc6:	9f 91       	pop	r25
     bc8:	8f 91       	pop	r24
     bca:	7f 91       	pop	r23
     bcc:	6f 91       	pop	r22
     bce:	5f 91       	pop	r21
     bd0:	4f 91       	pop	r20
     bd2:	3f 91       	pop	r19
     bd4:	2f 91       	pop	r18
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0
     bdc:	1f 90       	pop	r1
     bde:	18 95       	reti

00000be0 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     be0:	1f 92       	push	r1
     be2:	0f 92       	push	r0
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	0f 92       	push	r0
     be8:	11 24       	eor	r1, r1
     bea:	2f 93       	push	r18
     bec:	3f 93       	push	r19
     bee:	4f 93       	push	r20
     bf0:	5f 93       	push	r21
     bf2:	6f 93       	push	r22
     bf4:	7f 93       	push	r23
     bf6:	8f 93       	push	r24
     bf8:	9f 93       	push	r25
     bfa:	af 93       	push	r26
     bfc:	bf 93       	push	r27
     bfe:	ef 93       	push	r30
     c00:	ff 93       	push	r31
  USART_RXC();
     c02:	e0 91 11 02 	lds	r30, 0x0211
     c06:	f0 91 12 02 	lds	r31, 0x0212
     c0a:	09 95       	icall
}
     c0c:	ff 91       	pop	r31
     c0e:	ef 91       	pop	r30
     c10:	bf 91       	pop	r27
     c12:	af 91       	pop	r26
     c14:	9f 91       	pop	r25
     c16:	8f 91       	pop	r24
     c18:	7f 91       	pop	r23
     c1a:	6f 91       	pop	r22
     c1c:	5f 91       	pop	r21
     c1e:	4f 91       	pop	r20
     c20:	3f 91       	pop	r19
     c22:	2f 91       	pop	r18
     c24:	0f 90       	pop	r0
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	0f 90       	pop	r0
     c2a:	1f 90       	pop	r1
     c2c:	18 95       	reti

00000c2e <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     c2e:	1f 92       	push	r1
     c30:	0f 92       	push	r0
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	0f 92       	push	r0
     c36:	11 24       	eor	r1, r1
     c38:	2f 93       	push	r18
     c3a:	3f 93       	push	r19
     c3c:	4f 93       	push	r20
     c3e:	5f 93       	push	r21
     c40:	6f 93       	push	r22
     c42:	7f 93       	push	r23
     c44:	8f 93       	push	r24
     c46:	9f 93       	push	r25
     c48:	af 93       	push	r26
     c4a:	bf 93       	push	r27
     c4c:	ef 93       	push	r30
     c4e:	ff 93       	push	r31
  USART_UDRE();
     c50:	e0 91 29 02 	lds	r30, 0x0229
     c54:	f0 91 2a 02 	lds	r31, 0x022A
     c58:	09 95       	icall
}
     c5a:	ff 91       	pop	r31
     c5c:	ef 91       	pop	r30
     c5e:	bf 91       	pop	r27
     c60:	af 91       	pop	r26
     c62:	9f 91       	pop	r25
     c64:	8f 91       	pop	r24
     c66:	7f 91       	pop	r23
     c68:	6f 91       	pop	r22
     c6a:	5f 91       	pop	r21
     c6c:	4f 91       	pop	r20
     c6e:	3f 91       	pop	r19
     c70:	2f 91       	pop	r18
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	0f 90       	pop	r0
     c78:	1f 90       	pop	r1
     c7a:	18 95       	reti

00000c7c <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     c7c:	1f 92       	push	r1
     c7e:	0f 92       	push	r0
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	0f 92       	push	r0
     c84:	11 24       	eor	r1, r1
     c86:	2f 93       	push	r18
     c88:	3f 93       	push	r19
     c8a:	4f 93       	push	r20
     c8c:	5f 93       	push	r21
     c8e:	6f 93       	push	r22
     c90:	7f 93       	push	r23
     c92:	8f 93       	push	r24
     c94:	9f 93       	push	r25
     c96:	af 93       	push	r26
     c98:	bf 93       	push	r27
     c9a:	ef 93       	push	r30
     c9c:	ff 93       	push	r31
  USART_TXC();
     c9e:	e0 91 25 02 	lds	r30, 0x0225
     ca2:	f0 91 26 02 	lds	r31, 0x0226
     ca6:	09 95       	icall
}
     ca8:	ff 91       	pop	r31
     caa:	ef 91       	pop	r30
     cac:	bf 91       	pop	r27
     cae:	af 91       	pop	r26
     cb0:	9f 91       	pop	r25
     cb2:	8f 91       	pop	r24
     cb4:	7f 91       	pop	r23
     cb6:	6f 91       	pop	r22
     cb8:	5f 91       	pop	r21
     cba:	4f 91       	pop	r20
     cbc:	3f 91       	pop	r19
     cbe:	2f 91       	pop	r18
     cc0:	0f 90       	pop	r0
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	0f 90       	pop	r0
     cc6:	1f 90       	pop	r1
     cc8:	18 95       	reti

00000cca <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     cca:	1f 92       	push	r1
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	0f 92       	push	r0
     cd2:	11 24       	eor	r1, r1
     cd4:	2f 93       	push	r18
     cd6:	3f 93       	push	r19
     cd8:	4f 93       	push	r20
     cda:	5f 93       	push	r21
     cdc:	6f 93       	push	r22
     cde:	7f 93       	push	r23
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	af 93       	push	r26
     ce6:	bf 93       	push	r27
     ce8:	ef 93       	push	r30
     cea:	ff 93       	push	r31
  ADC_INT();
     cec:	e0 91 1f 02 	lds	r30, 0x021F
     cf0:	f0 91 20 02 	lds	r31, 0x0220
     cf4:	09 95       	icall
}
     cf6:	ff 91       	pop	r31
     cf8:	ef 91       	pop	r30
     cfa:	bf 91       	pop	r27
     cfc:	af 91       	pop	r26
     cfe:	9f 91       	pop	r25
     d00:	8f 91       	pop	r24
     d02:	7f 91       	pop	r23
     d04:	6f 91       	pop	r22
     d06:	5f 91       	pop	r21
     d08:	4f 91       	pop	r20
     d0a:	3f 91       	pop	r19
     d0c:	2f 91       	pop	r18
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	0f 90       	pop	r0
     d14:	1f 90       	pop	r1
     d16:	18 95       	reti

00000d18 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     d18:	1f 92       	push	r1
     d1a:	0f 92       	push	r0
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	0f 92       	push	r0
     d20:	11 24       	eor	r1, r1
     d22:	2f 93       	push	r18
     d24:	3f 93       	push	r19
     d26:	4f 93       	push	r20
     d28:	5f 93       	push	r21
     d2a:	6f 93       	push	r22
     d2c:	7f 93       	push	r23
     d2e:	8f 93       	push	r24
     d30:	9f 93       	push	r25
     d32:	af 93       	push	r26
     d34:	bf 93       	push	r27
     d36:	ef 93       	push	r30
     d38:	ff 93       	push	r31
  EE_RDY();
     d3a:	e0 91 21 02 	lds	r30, 0x0221
     d3e:	f0 91 22 02 	lds	r31, 0x0222
     d42:	09 95       	icall
}
     d44:	ff 91       	pop	r31
     d46:	ef 91       	pop	r30
     d48:	bf 91       	pop	r27
     d4a:	af 91       	pop	r26
     d4c:	9f 91       	pop	r25
     d4e:	8f 91       	pop	r24
     d50:	7f 91       	pop	r23
     d52:	6f 91       	pop	r22
     d54:	5f 91       	pop	r21
     d56:	4f 91       	pop	r20
     d58:	3f 91       	pop	r19
     d5a:	2f 91       	pop	r18
     d5c:	0f 90       	pop	r0
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	0f 90       	pop	r0
     d62:	1f 90       	pop	r1
     d64:	18 95       	reti

00000d66 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     d66:	1f 92       	push	r1
     d68:	0f 92       	push	r0
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	0f 92       	push	r0
     d6e:	11 24       	eor	r1, r1
     d70:	2f 93       	push	r18
     d72:	3f 93       	push	r19
     d74:	4f 93       	push	r20
     d76:	5f 93       	push	r21
     d78:	6f 93       	push	r22
     d7a:	7f 93       	push	r23
     d7c:	8f 93       	push	r24
     d7e:	9f 93       	push	r25
     d80:	af 93       	push	r26
     d82:	bf 93       	push	r27
     d84:	ef 93       	push	r30
     d86:	ff 93       	push	r31
  ANA_COMP();
     d88:	e0 91 1d 02 	lds	r30, 0x021D
     d8c:	f0 91 1e 02 	lds	r31, 0x021E
     d90:	09 95       	icall
}
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	0f 90       	pop	r0
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	0f 90       	pop	r0
     db0:	1f 90       	pop	r1
     db2:	18 95       	reti

00000db4 <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     db4:	1f 92       	push	r1
     db6:	0f 92       	push	r0
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	0f 92       	push	r0
     dbc:	11 24       	eor	r1, r1
     dbe:	2f 93       	push	r18
     dc0:	3f 93       	push	r19
     dc2:	4f 93       	push	r20
     dc4:	5f 93       	push	r21
     dc6:	6f 93       	push	r22
     dc8:	7f 93       	push	r23
     dca:	8f 93       	push	r24
     dcc:	9f 93       	push	r25
     dce:	af 93       	push	r26
     dd0:	bf 93       	push	r27
     dd2:	ef 93       	push	r30
     dd4:	ff 93       	push	r31
  TWI_I2C();
     dd6:	e0 91 0f 02 	lds	r30, 0x020F
     dda:	f0 91 10 02 	lds	r31, 0x0210
     dde:	09 95       	icall
}
     de0:	ff 91       	pop	r31
     de2:	ef 91       	pop	r30
     de4:	bf 91       	pop	r27
     de6:	af 91       	pop	r26
     de8:	9f 91       	pop	r25
     dea:	8f 91       	pop	r24
     dec:	7f 91       	pop	r23
     dee:	6f 91       	pop	r22
     df0:	5f 91       	pop	r21
     df2:	4f 91       	pop	r20
     df4:	3f 91       	pop	r19
     df6:	2f 91       	pop	r18
     df8:	0f 90       	pop	r0
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	0f 90       	pop	r0
     dfe:	1f 90       	pop	r1
     e00:	18 95       	reti

00000e02 <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     e02:	1f 92       	push	r1
     e04:	0f 92       	push	r0
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	0f 92       	push	r0
     e0a:	11 24       	eor	r1, r1
     e0c:	2f 93       	push	r18
     e0e:	3f 93       	push	r19
     e10:	4f 93       	push	r20
     e12:	5f 93       	push	r21
     e14:	6f 93       	push	r22
     e16:	7f 93       	push	r23
     e18:	8f 93       	push	r24
     e1a:	9f 93       	push	r25
     e1c:	af 93       	push	r26
     e1e:	bf 93       	push	r27
     e20:	ef 93       	push	r30
     e22:	ff 93       	push	r31
  SPM_RDY();
     e24:	e0 91 15 02 	lds	r30, 0x0215
     e28:	f0 91 16 02 	lds	r31, 0x0216
     e2c:	09 95       	icall
}
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	bf 91       	pop	r27
     e34:	af 91       	pop	r26
     e36:	9f 91       	pop	r25
     e38:	8f 91       	pop	r24
     e3a:	7f 91       	pop	r23
     e3c:	6f 91       	pop	r22
     e3e:	5f 91       	pop	r21
     e40:	4f 91       	pop	r20
     e42:	3f 91       	pop	r19
     e44:	2f 91       	pop	r18
     e46:	0f 90       	pop	r0
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	0f 90       	pop	r0
     e4c:	1f 90       	pop	r1
     e4e:	18 95       	reti

00000e50 <DIO_init>:
*/


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
     e50:	fc 01       	movw	r30, r24
	uint8_t RET=0;
	static uint8_t Multiple_init=0;
	if (DIO_info == NULL)
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	09 f4       	brne	.+2      	; 0xe58 <DIO_init+0x8>
     e56:	7b c0       	rjmp	.+246    	; 0xf4e <DIO_init+0xfe>
	{
		RET=NULL_PTR+DIO_MODULE;

	}else{
		u8_is_init=1;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	80 93 df 01 	sts	0x01DF, r24
		switch(DIO_info->dir)
     e5e:	82 81       	ldd	r24, Z+2	; 0x02
     e60:	88 23       	and	r24, r24
     e62:	21 f0       	breq	.+8      	; 0xe6c <DIO_init+0x1c>
     e64:	8f 3f       	cpi	r24, 0xFF	; 255
     e66:	09 f0       	breq	.+2      	; 0xe6a <DIO_init+0x1a>
     e68:	74 c0       	rjmp	.+232    	; 0xf52 <DIO_init+0x102>
     e6a:	3b c0       	rjmp	.+118    	; 0xee2 <DIO_init+0x92>
		{
		case INPUT:
			switch(DIO_info ->GPIO)
     e6c:	80 81       	ld	r24, Z
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	a1 f0       	breq	.+40     	; 0xe9a <DIO_init+0x4a>
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	30 f0       	brcs	.+12     	; 0xe82 <DIO_init+0x32>
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	e1 f0       	breq	.+56     	; 0xeb2 <DIO_init+0x62>
     e7a:	83 30       	cpi	r24, 0x03	; 3
     e7c:	09 f0       	breq	.+2      	; 0xe80 <DIO_init+0x30>
     e7e:	6b c0       	rjmp	.+214    	; 0xf56 <DIO_init+0x106>
     e80:	24 c0       	rjmp	.+72     	; 0xeca <DIO_init+0x7a>
			{
			case GPIOA:
				PORTA_DIR &=(~(DIO_info->pins))	;
     e82:	9a b3       	in	r25, 0x1a	; 26
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	80 95       	com	r24
     e88:	89 23       	and	r24, r25
     e8a:	8a bb       	out	0x1a, r24	; 26
				Multiple_init+=1;
     e8c:	80 91 e0 01 	lds	r24, 0x01E0
     e90:	8f 5f       	subi	r24, 0xFF	; 255
     e92:	80 93 e0 01 	sts	0x01E0, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t RET=0;
     e96:	80 e0       	ldi	r24, 0x00	; 0
			switch(DIO_info ->GPIO)
			{
			case GPIOA:
				PORTA_DIR &=(~(DIO_info->pins))	;
				Multiple_init+=1;
				break;
     e98:	08 95       	ret
			case GPIOB:
				PORTB_DIR &=(~(DIO_info->pins))	;
     e9a:	97 b3       	in	r25, 0x17	; 23
     e9c:	81 81       	ldd	r24, Z+1	; 0x01
     e9e:	80 95       	com	r24
     ea0:	89 23       	and	r24, r25
     ea2:	87 bb       	out	0x17, r24	; 23
				Multiple_init+=2;
     ea4:	80 91 e0 01 	lds	r24, 0x01E0
     ea8:	8e 5f       	subi	r24, 0xFE	; 254
     eaa:	80 93 e0 01 	sts	0x01E0, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t RET=0;
     eae:	80 e0       	ldi	r24, 0x00	; 0
				Multiple_init+=1;
				break;
			case GPIOB:
				PORTB_DIR &=(~(DIO_info->pins))	;
				Multiple_init+=2;
				break;
     eb0:	08 95       	ret
			case GPIOC:
				PORTC_DIR &=(~(DIO_info->pins))	;
     eb2:	94 b3       	in	r25, 0x14	; 20
     eb4:	81 81       	ldd	r24, Z+1	; 0x01
     eb6:	80 95       	com	r24
     eb8:	89 23       	and	r24, r25
     eba:	84 bb       	out	0x14, r24	; 20
				Multiple_init+=3;
     ebc:	80 91 e0 01 	lds	r24, 0x01E0
     ec0:	8d 5f       	subi	r24, 0xFD	; 253
     ec2:	80 93 e0 01 	sts	0x01E0, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t RET=0;
     ec6:	80 e0       	ldi	r24, 0x00	; 0
				Multiple_init+=2;
				break;
			case GPIOC:
				PORTC_DIR &=(~(DIO_info->pins))	;
				Multiple_init+=3;
				break;
     ec8:	08 95       	ret
			case GPIOD:
				PORTD_DIR &=(~(DIO_info->pins))	;
     eca:	91 b3       	in	r25, 0x11	; 17
     ecc:	81 81       	ldd	r24, Z+1	; 0x01
     ece:	80 95       	com	r24
     ed0:	89 23       	and	r24, r25
     ed2:	81 bb       	out	0x11, r24	; 17
				Multiple_init+=4;
     ed4:	80 91 e0 01 	lds	r24, 0x01E0
     ed8:	8c 5f       	subi	r24, 0xFC	; 252
     eda:	80 93 e0 01 	sts	0x01E0, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t RET=0;
     ede:	80 e0       	ldi	r24, 0x00	; 0
				Multiple_init+=3;
				break;
			case GPIOD:
				PORTD_DIR &=(~(DIO_info->pins))	;
				Multiple_init+=4;
				break;
     ee0:	08 95       	ret
				break;
			}
			break;

			case OUTPUT:
				switch(DIO_info ->GPIO)
     ee2:	80 81       	ld	r24, Z
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 f0       	breq	.+36     	; 0xf0c <DIO_init+0xbc>
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	28 f0       	brcs	.+10     	; 0xef6 <DIO_init+0xa6>
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	c9 f0       	breq	.+50     	; 0xf22 <DIO_init+0xd2>
     ef0:	83 30       	cpi	r24, 0x03	; 3
     ef2:	99 f5       	brne	.+102    	; 0xf5a <DIO_init+0x10a>
     ef4:	21 c0       	rjmp	.+66     	; 0xf38 <DIO_init+0xe8>
				{
				case GPIOA:
					PORTA_DIR |=(DIO_info->pins)	;
     ef6:	9a b3       	in	r25, 0x1a	; 26
     ef8:	81 81       	ldd	r24, Z+1	; 0x01
     efa:	89 2b       	or	r24, r25
     efc:	8a bb       	out	0x1a, r24	; 26
					Multiple_init+=1;
     efe:	80 91 e0 01 	lds	r24, 0x01E0
     f02:	8f 5f       	subi	r24, 0xFF	; 255
     f04:	80 93 e0 01 	sts	0x01E0, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t RET=0;
     f08:	80 e0       	ldi	r24, 0x00	; 0
				switch(DIO_info ->GPIO)
				{
				case GPIOA:
					PORTA_DIR |=(DIO_info->pins)	;
					Multiple_init+=1;
					break;
     f0a:	08 95       	ret
				case GPIOB:
					PORTB_DIR |=(DIO_info->pins)	;
     f0c:	97 b3       	in	r25, 0x17	; 23
     f0e:	81 81       	ldd	r24, Z+1	; 0x01
     f10:	89 2b       	or	r24, r25
     f12:	87 bb       	out	0x17, r24	; 23
					Multiple_init+=2;
     f14:	80 91 e0 01 	lds	r24, 0x01E0
     f18:	8e 5f       	subi	r24, 0xFE	; 254
     f1a:	80 93 e0 01 	sts	0x01E0, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t RET=0;
     f1e:	80 e0       	ldi	r24, 0x00	; 0
					Multiple_init+=1;
					break;
				case GPIOB:
					PORTB_DIR |=(DIO_info->pins)	;
					Multiple_init+=2;
					break;
     f20:	08 95       	ret
				case GPIOC:
					PORTC_DIR |=(DIO_info->pins)	;
     f22:	94 b3       	in	r25, 0x14	; 20
     f24:	81 81       	ldd	r24, Z+1	; 0x01
     f26:	89 2b       	or	r24, r25
     f28:	84 bb       	out	0x14, r24	; 20
					Multiple_init+=3;
     f2a:	80 91 e0 01 	lds	r24, 0x01E0
     f2e:	8d 5f       	subi	r24, 0xFD	; 253
     f30:	80 93 e0 01 	sts	0x01E0, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t RET=0;
     f34:	80 e0       	ldi	r24, 0x00	; 0
					Multiple_init+=2;
					break;
				case GPIOC:
					PORTC_DIR |=(DIO_info->pins)	;
					Multiple_init+=3;
					break;
     f36:	08 95       	ret
				case GPIOD:
					PORTD_DIR |=(DIO_info->pins)	;
     f38:	91 b3       	in	r25, 0x11	; 17
     f3a:	81 81       	ldd	r24, Z+1	; 0x01
     f3c:	89 2b       	or	r24, r25
     f3e:	81 bb       	out	0x11, r24	; 17
					Multiple_init+=4;
     f40:	80 91 e0 01 	lds	r24, 0x01E0
     f44:	8c 5f       	subi	r24, 0xFC	; 252
     f46:	80 93 e0 01 	sts	0x01E0, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
	uint8_t RET=0;
     f4a:	80 e0       	ldi	r24, 0x00	; 0
					Multiple_init+=3;
					break;
				case GPIOD:
					PORTD_DIR |=(DIO_info->pins)	;
					Multiple_init+=4;
					break;
     f4c:	08 95       	ret
{
	uint8_t RET=0;
	static uint8_t Multiple_init=0;
	if (DIO_info == NULL)
	{
		RET=NULL_PTR+DIO_MODULE;
     f4e:	86 e1       	ldi	r24, 0x16	; 22
     f50:	08 95       	ret
					break;
				}

				break;
				default:
					RET=E_NOK+DIO_MODULE+INVALID_DIRECTION;
     f52:	83 e2       	ldi	r24, 0x23	; 35
     f54:	08 95       	ret
			case GPIOD:
				PORTD_DIR &=(~(DIO_info->pins))	;
				Multiple_init+=4;
				break;
			default:
				RET=E_NOK+DIO_MODULE+INVALID_PORT;
     f56:	85 e2       	ldi	r24, 0x25	; 37
     f58:	08 95       	ret
				case GPIOD:
					PORTD_DIR |=(DIO_info->pins)	;
					Multiple_init+=4;
					break;
				default:
					RET=E_NOK+DIO_MODULE+INVALID_PORT;
     f5a:	85 e2       	ldi	r24, 0x25	; 37
		}


	}
	return RET;
}
     f5c:	08 95       	ret

00000f5e <DIO_deinit>:

void DIO_deinit(void){
	u8_is_init=0;
     f5e:	10 92 df 01 	sts	0x01DF, r1
}
     f62:	08 95       	ret

00000f64 <DIO_is_init>:

void DIO_is_init(void){
	u8_is_init=1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	80 93 df 01 	sts	0x01DF, r24
}
     f6a:	08 95       	ret

00000f6c <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;

if(u8_is_init==1){
     f6c:	90 91 df 01 	lds	r25, 0x01DF
     f70:	91 30       	cpi	r25, 0x01	; 1
     f72:	09 f0       	breq	.+2      	; 0xf76 <DIO_Write+0xa>
     f74:	44 c0       	rjmp	.+136    	; 0xffe <DIO_Write+0x92>
switch(value){
     f76:	44 23       	and	r20, r20
     f78:	21 f0       	breq	.+8      	; 0xf82 <DIO_Write+0x16>
     f7a:	4f 3f       	cpi	r20, 0xFF	; 255
     f7c:	09 f0       	breq	.+2      	; 0xf80 <DIO_Write+0x14>
     f7e:	41 c0       	rjmp	.+130    	; 0x1002 <DIO_Write+0x96>
     f80:	21 c0       	rjmp	.+66     	; 0xfc4 <DIO_Write+0x58>
case LOW:
{
	switch (GPIO)
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	69 f0       	breq	.+26     	; 0xfa0 <DIO_Write+0x34>
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	28 f0       	brcs	.+10     	; 0xf94 <DIO_Write+0x28>
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	79 f0       	breq	.+30     	; 0xfac <DIO_Write+0x40>
     f8e:	83 30       	cpi	r24, 0x03	; 3
     f90:	d1 f5       	brne	.+116    	; 0x1006 <DIO_Write+0x9a>
     f92:	12 c0       	rjmp	.+36     	; 0xfb8 <DIO_Write+0x4c>
	{	case GPIOA:
		PORTA_DATA &= ~(pins);   // 0b01111111
     f94:	8b b3       	in	r24, 0x1b	; 27
     f96:	60 95       	com	r22
     f98:	68 23       	and	r22, r24
     f9a:	6b bb       	out	0x1b, r22	; 27
void DIO_is_init(void){
	u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     f9c:	84 e1       	ldi	r24, 0x14	; 20
case LOW:
{
	switch (GPIO)
	{	case GPIOA:
		PORTA_DATA &= ~(pins);   // 0b01111111
		break;
     f9e:	08 95       	ret
	case GPIOB:
		PORTB_DATA &= ~(pins);
     fa0:	88 b3       	in	r24, 0x18	; 24
     fa2:	60 95       	com	r22
     fa4:	68 23       	and	r22, r24
     fa6:	68 bb       	out	0x18, r22	; 24
void DIO_is_init(void){
	u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     fa8:	84 e1       	ldi	r24, 0x14	; 20
	{	case GPIOA:
		PORTA_DATA &= ~(pins);   // 0b01111111
		break;
	case GPIOB:
		PORTB_DATA &= ~(pins);
		break;
     faa:	08 95       	ret
	case GPIOC:
		PORTC_DATA &= ~(pins);
     fac:	85 b3       	in	r24, 0x15	; 21
     fae:	60 95       	com	r22
     fb0:	68 23       	and	r22, r24
     fb2:	65 bb       	out	0x15, r22	; 21
void DIO_is_init(void){
	u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     fb4:	84 e1       	ldi	r24, 0x14	; 20
	case GPIOB:
		PORTB_DATA &= ~(pins);
		break;
	case GPIOC:
		PORTC_DATA &= ~(pins);
		break;
     fb6:	08 95       	ret
	case GPIOD:
		PORTD_DATA &= ~(pins);
     fb8:	82 b3       	in	r24, 0x12	; 18
     fba:	60 95       	com	r22
     fbc:	68 23       	and	r22, r24
     fbe:	62 bb       	out	0x12, r22	; 18
void DIO_is_init(void){
	u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     fc0:	84 e1       	ldi	r24, 0x14	; 20
	case GPIOC:
		PORTC_DATA &= ~(pins);
		break;
	case GPIOD:
		PORTD_DATA &= ~(pins);
		break;
     fc2:	08 95       	ret
		break;
	}
	break;
}
case HIGH:{
	switch (GPIO)
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	61 f0       	breq	.+24     	; 0xfe0 <DIO_Write+0x74>
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	28 f0       	brcs	.+10     	; 0xfd6 <DIO_Write+0x6a>
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	69 f0       	breq	.+26     	; 0xfea <DIO_Write+0x7e>
     fd0:	83 30       	cpi	r24, 0x03	; 3
     fd2:	d9 f4       	brne	.+54     	; 0x100a <DIO_Write+0x9e>
     fd4:	0f c0       	rjmp	.+30     	; 0xff4 <DIO_Write+0x88>
	{	case GPIOA:
		PORTA_DATA |=(pins);
     fd6:	8b b3       	in	r24, 0x1b	; 27
     fd8:	68 2b       	or	r22, r24
     fda:	6b bb       	out	0x1b, r22	; 27
void DIO_is_init(void){
	u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     fdc:	84 e1       	ldi	r24, 0x14	; 20
}
case HIGH:{
	switch (GPIO)
	{	case GPIOA:
		PORTA_DATA |=(pins);
		break;
     fde:	08 95       	ret
	case GPIOB:
		PORTB_DATA |=(pins);
     fe0:	88 b3       	in	r24, 0x18	; 24
     fe2:	68 2b       	or	r22, r24
     fe4:	68 bb       	out	0x18, r22	; 24
void DIO_is_init(void){
	u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     fe6:	84 e1       	ldi	r24, 0x14	; 20
	{	case GPIOA:
		PORTA_DATA |=(pins);
		break;
	case GPIOB:
		PORTB_DATA |=(pins);
		break;
     fe8:	08 95       	ret
	case GPIOC:
		PORTC_DATA |=(pins);
     fea:	85 b3       	in	r24, 0x15	; 21
     fec:	68 2b       	or	r22, r24
     fee:	65 bb       	out	0x15, r22	; 21
void DIO_is_init(void){
	u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     ff0:	84 e1       	ldi	r24, 0x14	; 20
	case GPIOB:
		PORTB_DATA |=(pins);
		break;
	case GPIOC:
		PORTC_DATA |=(pins);
		break;
     ff2:	08 95       	ret
	case GPIOD:
		PORTD_DATA |=(pins);
     ff4:	82 b3       	in	r24, 0x12	; 18
     ff6:	68 2b       	or	r22, r24
     ff8:	62 bb       	out	0x12, r22	; 18
void DIO_is_init(void){
	u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     ffa:	84 e1       	ldi	r24, 0x14	; 20
	case GPIOC:
		PORTC_DATA |=(pins);
		break;
	case GPIOD:
		PORTD_DATA |=(pins);
		break;
     ffc:	08 95       	ret
default:
	Ret+=INVALID_VALUE;
	break;
}

}else{Ret+=NOT_INIT;}
     ffe:	88 e1       	ldi	r24, 0x18	; 24
    1000:	08 95       	ret
		break;
	}
	break;
}
default:
	Ret+=INVALID_VALUE;
    1002:	86 e2       	ldi	r24, 0x26	; 38
    1004:	08 95       	ret
		break;
	case GPIOD:
		PORTD_DATA &= ~(pins);
		break;
	default:
		Ret+=INVALID_PORT;
    1006:	84 e2       	ldi	r24, 0x24	; 36
    1008:	08 95       	ret
		break;
	case GPIOD:
		PORTD_DATA |=(pins);
		break;
	default:
		Ret+=INVALID_PORT;
    100a:	84 e2       	ldi	r24, 0x24	; 36
	break;
}

}else{Ret+=NOT_INIT;}
return Ret;
}
    100c:	08 95       	ret

0000100e <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
if(u8_is_init==1){
    100e:	90 91 df 01 	lds	r25, 0x01DF
    1012:	91 30       	cpi	r25, 0x01	; 1
    1014:	49 f5       	brne	.+82     	; 0x1068 <DIO_Read+0x5a>
	switch (GPIO)
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	69 f0       	breq	.+26     	; 0x1034 <DIO_Read+0x26>
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	28 f0       	brcs	.+10     	; 0x1028 <DIO_Read+0x1a>
    101e:	82 30       	cpi	r24, 0x02	; 2
    1020:	79 f0       	breq	.+30     	; 0x1040 <DIO_Read+0x32>
    1022:	83 30       	cpi	r24, 0x03	; 3
    1024:	c9 f4       	brne	.+50     	; 0x1058 <DIO_Read+0x4a>
    1026:	12 c0       	rjmp	.+36     	; 0x104c <DIO_Read+0x3e>
	{	case GPIOA:
		*data=(PORTA_PIN & pins);
    1028:	89 b3       	in	r24, 0x19	; 25
    102a:	68 23       	and	r22, r24
    102c:	fa 01       	movw	r30, r20
    102e:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
    1030:	84 e1       	ldi	r24, 0x14	; 20
if(u8_is_init==1){
	switch (GPIO)
	{	case GPIOA:
		*data=(PORTA_PIN & pins);
		break;
    1032:	13 c0       	rjmp	.+38     	; 0x105a <DIO_Read+0x4c>
	case GPIOB:
		*data=(PORTB_PIN & pins);
    1034:	86 b3       	in	r24, 0x16	; 22
    1036:	68 23       	and	r22, r24
    1038:	fa 01       	movw	r30, r20
    103a:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
    103c:	84 e1       	ldi	r24, 0x14	; 20
	{	case GPIOA:
		*data=(PORTA_PIN & pins);
		break;
	case GPIOB:
		*data=(PORTB_PIN & pins);
		break;
    103e:	0d c0       	rjmp	.+26     	; 0x105a <DIO_Read+0x4c>
	case GPIOC:
		*data=(PORTC_PIN & pins);
    1040:	83 b3       	in	r24, 0x13	; 19
    1042:	68 23       	and	r22, r24
    1044:	fa 01       	movw	r30, r20
    1046:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
    1048:	84 e1       	ldi	r24, 0x14	; 20
	case GPIOB:
		*data=(PORTB_PIN & pins);
		break;
	case GPIOC:
		*data=(PORTC_PIN & pins);
		break;
    104a:	07 c0       	rjmp	.+14     	; 0x105a <DIO_Read+0x4c>
	case GPIOD:
		*data=(PORTD_PIN & pins);
    104c:	80 b3       	in	r24, 0x10	; 16
    104e:	68 23       	and	r22, r24
    1050:	fa 01       	movw	r30, r20
    1052:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
    1054:	84 e1       	ldi	r24, 0x14	; 20
	case GPIOC:
		*data=(PORTC_PIN & pins);
		break;
	case GPIOD:
		*data=(PORTD_PIN & pins);
		break;
    1056:	01 c0       	rjmp	.+2      	; 0x105a <DIO_Read+0x4c>
		default:
		ret+=INVALID_PORT;
    1058:	84 e2       	ldi	r24, 0x24	; 36
		break;
	}
	if(*data > 0)
    105a:	fa 01       	movw	r30, r20
    105c:	90 81       	ld	r25, Z
    105e:	99 23       	and	r25, r25
    1060:	21 f0       	breq	.+8      	; 0x106a <DIO_Read+0x5c>
	{
		*data = 1;
    1062:	91 e0       	ldi	r25, 0x01	; 1
    1064:	90 83       	st	Z, r25
    1066:	08 95       	ret
	}
}else{ret+=NOT_INIT;}
    1068:	88 e1       	ldi	r24, 0x18	; 24
return ret;
}
    106a:	08 95       	ret

0000106c <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
	uint8_t ret=E_OK+DIO_MODULE;
if(u8_is_init==1){
    106c:	90 91 df 01 	lds	r25, 0x01DF
    1070:	91 30       	cpi	r25, 0x01	; 1
    1072:	e9 f4       	brne	.+58     	; 0x10ae <DIO_Toggle+0x42>
	switch (GPIO)
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	61 f0       	breq	.+24     	; 0x1090 <DIO_Toggle+0x24>
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	28 f0       	brcs	.+10     	; 0x1086 <DIO_Toggle+0x1a>
    107c:	82 30       	cpi	r24, 0x02	; 2
    107e:	69 f0       	breq	.+26     	; 0x109a <DIO_Toggle+0x2e>
    1080:	83 30       	cpi	r24, 0x03	; 3
    1082:	b9 f4       	brne	.+46     	; 0x10b2 <DIO_Toggle+0x46>
    1084:	0f c0       	rjmp	.+30     	; 0x10a4 <DIO_Toggle+0x38>
	{	case GPIOA:
		PORTA_DATA ^=(pins);
    1086:	8b b3       	in	r24, 0x1b	; 27
    1088:	68 27       	eor	r22, r24
    108a:	6b bb       	out	0x1b, r22	; 27
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
	uint8_t ret=E_OK+DIO_MODULE;
    108c:	84 e1       	ldi	r24, 0x14	; 20
if(u8_is_init==1){
	switch (GPIO)
	{	case GPIOA:
		PORTA_DATA ^=(pins);
		break;
    108e:	08 95       	ret
	case GPIOB:
		PORTB_DATA ^=(pins);
    1090:	88 b3       	in	r24, 0x18	; 24
    1092:	68 27       	eor	r22, r24
    1094:	68 bb       	out	0x18, r22	; 24
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
	uint8_t ret=E_OK+DIO_MODULE;
    1096:	84 e1       	ldi	r24, 0x14	; 20
	{	case GPIOA:
		PORTA_DATA ^=(pins);
		break;
	case GPIOB:
		PORTB_DATA ^=(pins);
		break;
    1098:	08 95       	ret
	case GPIOC:
		PORTC_DATA ^=(pins);
    109a:	85 b3       	in	r24, 0x15	; 21
    109c:	68 27       	eor	r22, r24
    109e:	65 bb       	out	0x15, r22	; 21
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
	uint8_t ret=E_OK+DIO_MODULE;
    10a0:	84 e1       	ldi	r24, 0x14	; 20
	case GPIOB:
		PORTB_DATA ^=(pins);
		break;
	case GPIOC:
		PORTC_DATA ^=(pins);
		break;
    10a2:	08 95       	ret
	case GPIOD:
		PORTD_DATA ^=(pins);
    10a4:	82 b3       	in	r24, 0x12	; 18
    10a6:	68 27       	eor	r22, r24
    10a8:	62 bb       	out	0x12, r22	; 18
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
	uint8_t ret=E_OK+DIO_MODULE;
    10aa:	84 e1       	ldi	r24, 0x14	; 20
	case GPIOC:
		PORTC_DATA ^=(pins);
		break;
	case GPIOD:
		PORTD_DATA ^=(pins);
		break;
    10ac:	08 95       	ret
	default:
		ret+=INVALID_PORT;
		break;
	}
}else{ret+=NOT_INIT;}
    10ae:	88 e1       	ldi	r24, 0x18	; 24
    10b0:	08 95       	ret
		break;
	case GPIOD:
		PORTD_DATA ^=(pins);
		break;
	default:
		ret+=INVALID_PORT;
    10b2:	84 e2       	ldi	r24, 0x24	; 36
		break;
	}
}else{ret+=NOT_INIT;}
	return ret;
}
    10b4:	08 95       	ret

000010b6 <Icu_Init>:
static volatile uint32_t u32_Time_rising_edge=0;
static volatile uint32_t u32_Time_faling_edge=0;
static volatile uint32_t Timer_High=0;
static volatile uint32_t Timer_Low=0;
ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	ec 01       	movw	r28, r24
	uint8_t Ret=0;
//Enable Global int
G_interrupt_Enable();
    10bc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
//Enable EXTI
switch(Icu_Cfg->ICU_Ch_No)
    10c0:	88 81       	ld	r24, Y
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	41 f0       	breq	.+16     	; 0x10d6 <Icu_Init+0x20>
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	18 f0       	brcs	.+6      	; 0x10d0 <Icu_Init+0x1a>
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	49 f4       	brne	.+18     	; 0x10e0 <Icu_Init+0x2a>
    10ce:	06 c0       	rjmp	.+12     	; 0x10dc <Icu_Init+0x26>
{
case ICU_CH0:
EX_interrupt_enable0();
    10d0:	0e 94 0c 04 	call	0x818	; 0x818 <EX_interrupt_enable0>
break;
    10d4:	05 c0       	rjmp	.+10     	; 0x10e0 <Icu_Init+0x2a>
case ICU_CH1:
EX_interrupt_enable1();
    10d6:	0e 94 00 04 	call	0x800	; 0x800 <EX_interrupt_enable1>
break;
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <Icu_Init+0x2a>
case ICU_CH2:
EX_interrupt_enable2();
    10dc:	0e 94 f7 03 	call	0x7ee	; 0x7ee <EX_interrupt_enable2>
break;
}

switch(Icu_Cfg->ICU_Ch_Timer)
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	51 f0       	breq	.+20     	; 0x10fa <Icu_Init+0x44>
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	18 f0       	brcs	.+6      	; 0x10f0 <Icu_Init+0x3a>
    10ea:	82 30       	cpi	r24, 0x02	; 2
    10ec:	89 f4       	brne	.+34     	; 0x1110 <Icu_Init+0x5a>
    10ee:	0c c0       	rjmp	.+24     	; 0x1108 <Icu_Init+0x52>
{
	case ICU_TIMER_CH0:
		//Enable Timer0
		TCCR0=0x05;
    10f0:	85 e0       	ldi	r24, 0x05	; 5
    10f2:	83 bf       	out	0x33, r24	; 51
		TIMSK=0x01;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	89 bf       	out	0x39, r24	; 57
		break;
    10f8:	0b c0       	rjmp	.+22     	; 0x1110 <Icu_Init+0x5a>
	case ICU_TIMER_CH1:
		TCCR1=0x0005;
    10fa:	85 e0       	ldi	r24, 0x05	; 5
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	9f bd       	out	0x2f, r25	; 47
    1100:	8e bd       	out	0x2e, r24	; 46
		TIMSK=0x04;
    1102:	84 e0       	ldi	r24, 0x04	; 4
    1104:	89 bf       	out	0x39, r24	; 57
		break;
    1106:	04 c0       	rjmp	.+8      	; 0x1110 <Icu_Init+0x5a>
	case ICU_TIMER_CH2:
		TCCR2=0x07;
    1108:	87 e0       	ldi	r24, 0x07	; 7
    110a:	85 bd       	out	0x25, r24	; 37
		TIMSK=0x04;
    110c:	84 e0       	ldi	r24, 0x04	; 4
    110e:	89 bf       	out	0x39, r24	; 57
		break;
}

return Ret;
}
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <Icu_ReadTime>:
 * 				  - E_OK : successful									   *
 *				  - E_NOK : not successful								   *
 * Description	: calculates the time between 2 edges				       *
 ***************************************************************************/
ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
uint8_t Ret=0;
switch(Icu_Channel)
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	49 f0       	breq	.+18     	; 0x1132 <Icu_ReadTime+0x1a>
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	18 f0       	brcs	.+6      	; 0x112a <Icu_ReadTime+0x12>
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	71 f4       	brne	.+28     	; 0x1144 <Icu_ReadTime+0x2c>
    1128:	0a c0       	rjmp	.+20     	; 0x113e <Icu_ReadTime+0x26>
{
	case ICU_TIMER_CH0:
	TCCR0|=0x03;
    112a:	83 b7       	in	r24, 0x33	; 51
    112c:	83 60       	ori	r24, 0x03	; 3
    112e:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
	break;
    1130:	09 c0       	rjmp	.+18     	; 0x1144 <Icu_ReadTime+0x2c>
	case ICU_TIMER_CH1:
	TCCR1|=0x0005;
    1132:	8e b5       	in	r24, 0x2e	; 46
    1134:	9f b5       	in	r25, 0x2f	; 47
    1136:	85 60       	ori	r24, 0x05	; 5
    1138:	9f bd       	out	0x2f, r25	; 47
    113a:	8e bd       	out	0x2e, r24	; 46
	Ret=E_OK;	
	break;
    113c:	03 c0       	rjmp	.+6      	; 0x1144 <Icu_ReadTime+0x2c>
	case ICU_TIMER_CH2:
	TCCR2|=0x07;
    113e:	85 b5       	in	r24, 0x25	; 37
    1140:	87 60       	ori	r24, 0x07	; 7
    1142:	85 bd       	out	0x25, r24	; 37
	default:
	Ret=E_NOK;
	break;
}  

switch(Icu_EdgeToEdge)
    1144:	61 30       	cpi	r22, 0x01	; 1
    1146:	01 f1       	breq	.+64     	; 0x1188 <Icu_ReadTime+0x70>
    1148:	61 30       	cpi	r22, 0x01	; 1
    114a:	18 f0       	brcs	.+6      	; 0x1152 <Icu_ReadTime+0x3a>
    114c:	62 30       	cpi	r22, 0x02	; 2
    114e:	d1 f5       	brne	.+116    	; 0x11c4 <Icu_ReadTime+0xac>
    1150:	2a c0       	rjmp	.+84     	; 0x11a6 <Icu_ReadTime+0x8e>
{
	case ICU_RISE_TO_RISE:
	*Icu_Time=Timer_High+Timer_Low;
    1152:	80 91 e5 01 	lds	r24, 0x01E5
    1156:	90 91 e6 01 	lds	r25, 0x01E6
    115a:	a0 91 e7 01 	lds	r26, 0x01E7
    115e:	b0 91 e8 01 	lds	r27, 0x01E8
    1162:	00 91 e1 01 	lds	r16, 0x01E1
    1166:	10 91 e2 01 	lds	r17, 0x01E2
    116a:	20 91 e3 01 	lds	r18, 0x01E3
    116e:	30 91 e4 01 	lds	r19, 0x01E4
    1172:	80 0f       	add	r24, r16
    1174:	91 1f       	adc	r25, r17
    1176:	a2 1f       	adc	r26, r18
    1178:	b3 1f       	adc	r27, r19
    117a:	fa 01       	movw	r30, r20
    117c:	80 83       	st	Z, r24
    117e:	91 83       	std	Z+1, r25	; 0x01
    1180:	a2 83       	std	Z+2, r26	; 0x02
    1182:	b3 83       	std	Z+3, r27	; 0x03
	Ret=E_OK;
    1184:	80 e0       	ldi	r24, 0x00	; 0
	break;
    1186:	1f c0       	rjmp	.+62     	; 0x11c6 <Icu_ReadTime+0xae>
	case ICU_RISE_TO_FALL:
	*Icu_Time=Timer_High;
    1188:	80 91 e5 01 	lds	r24, 0x01E5
    118c:	90 91 e6 01 	lds	r25, 0x01E6
    1190:	a0 91 e7 01 	lds	r26, 0x01E7
    1194:	b0 91 e8 01 	lds	r27, 0x01E8
    1198:	fa 01       	movw	r30, r20
    119a:	80 83       	st	Z, r24
    119c:	91 83       	std	Z+1, r25	; 0x01
    119e:	a2 83       	std	Z+2, r26	; 0x02
    11a0:	b3 83       	std	Z+3, r27	; 0x03
	Ret=E_OK;
    11a2:	80 e0       	ldi	r24, 0x00	; 0
	break;
    11a4:	10 c0       	rjmp	.+32     	; 0x11c6 <Icu_ReadTime+0xae>
	case ICU_FALE_TO_RISE:
	*Icu_Time=Timer_Low;
    11a6:	80 91 e1 01 	lds	r24, 0x01E1
    11aa:	90 91 e2 01 	lds	r25, 0x01E2
    11ae:	a0 91 e3 01 	lds	r26, 0x01E3
    11b2:	b0 91 e4 01 	lds	r27, 0x01E4
    11b6:	fa 01       	movw	r30, r20
    11b8:	80 83       	st	Z, r24
    11ba:	91 83       	std	Z+1, r25	; 0x01
    11bc:	a2 83       	std	Z+2, r26	; 0x02
    11be:	b3 83       	std	Z+3, r27	; 0x03
	Ret=E_OK;
    11c0:	80 e0       	ldi	r24, 0x00	; 0
	break;
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <Icu_ReadTime+0xae>
	
	default:
	Ret=E_NOK;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
	break;
}

return Ret;
}
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	08 95       	ret

000011cc <EXTI>:
void EXTI(void)
{	u32_sgv_TimerVal=TCNT1;
    11cc:	8c b5       	in	r24, 0x2c	; 44
    11ce:	9d b5       	in	r25, 0x2d	; 45
    11d0:	a0 e0       	ldi	r26, 0x00	; 0
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	80 93 f2 01 	sts	0x01F2, r24
    11d8:	90 93 f3 01 	sts	0x01F3, r25
    11dc:	a0 93 f4 01 	sts	0x01F4, r26
    11e0:	b0 93 f5 01 	sts	0x01F5, r27
	u8_ovf_happend=0;
    11e4:	10 92 f1 01 	sts	0x01F1, r1
		if(READBIT(MCUCSR,6))
    11e8:	84 b7       	in	r24, 0x34	; 52
    11ea:	82 95       	swap	r24
    11ec:	86 95       	lsr	r24
    11ee:	86 95       	lsr	r24
    11f0:	83 70       	andi	r24, 0x03	; 3
    11f2:	80 ff       	sbrs	r24, 0
    11f4:	30 c0       	rjmp	.+96     	; 0x1256 <EXTI+0x8a>
		{
		u32_Time_rising_edge=u32_sgv_TimerVal;
    11f6:	80 91 f2 01 	lds	r24, 0x01F2
    11fa:	90 91 f3 01 	lds	r25, 0x01F3
    11fe:	a0 91 f4 01 	lds	r26, 0x01F4
    1202:	b0 91 f5 01 	lds	r27, 0x01F5
    1206:	80 93 ed 01 	sts	0x01ED, r24
    120a:	90 93 ee 01 	sts	0x01EE, r25
    120e:	a0 93 ef 01 	sts	0x01EF, r26
    1212:	b0 93 f0 01 	sts	0x01F0, r27
		Timer_Low = u32_Time_rising_edge - u32_Time_faling_edge;
    1216:	80 91 ed 01 	lds	r24, 0x01ED
    121a:	90 91 ee 01 	lds	r25, 0x01EE
    121e:	a0 91 ef 01 	lds	r26, 0x01EF
    1222:	b0 91 f0 01 	lds	r27, 0x01F0
    1226:	40 91 e9 01 	lds	r20, 0x01E9
    122a:	50 91 ea 01 	lds	r21, 0x01EA
    122e:	60 91 eb 01 	lds	r22, 0x01EB
    1232:	70 91 ec 01 	lds	r23, 0x01EC
    1236:	84 1b       	sub	r24, r20
    1238:	95 0b       	sbc	r25, r21
    123a:	a6 0b       	sbc	r26, r22
    123c:	b7 0b       	sbc	r27, r23
    123e:	80 93 e1 01 	sts	0x01E1, r24
    1242:	90 93 e2 01 	sts	0x01E2, r25
    1246:	a0 93 e3 01 	sts	0x01E3, r26
    124a:	b0 93 e4 01 	sts	0x01E4, r27
		/*****************************************/	
		CLEAR_BIT(MCUCSR,6);   /*Make it falling*/
    124e:	84 b7       	in	r24, 0x34	; 52
    1250:	8f 7b       	andi	r24, 0xBF	; 191
    1252:	84 bf       	out	0x34, r24	; 52
    1254:	08 95       	ret
		/***************************************/
		}else{
			u32_Time_faling_edge=u32_sgv_TimerVal;
    1256:	80 91 f2 01 	lds	r24, 0x01F2
    125a:	90 91 f3 01 	lds	r25, 0x01F3
    125e:	a0 91 f4 01 	lds	r26, 0x01F4
    1262:	b0 91 f5 01 	lds	r27, 0x01F5
    1266:	80 93 e9 01 	sts	0x01E9, r24
    126a:	90 93 ea 01 	sts	0x01EA, r25
    126e:	a0 93 eb 01 	sts	0x01EB, r26
    1272:	b0 93 ec 01 	sts	0x01EC, r27
			Timer_High =u32_Time_faling_edge - u32_Time_rising_edge;
    1276:	80 91 e9 01 	lds	r24, 0x01E9
    127a:	90 91 ea 01 	lds	r25, 0x01EA
    127e:	a0 91 eb 01 	lds	r26, 0x01EB
    1282:	b0 91 ec 01 	lds	r27, 0x01EC
    1286:	40 91 ed 01 	lds	r20, 0x01ED
    128a:	50 91 ee 01 	lds	r21, 0x01EE
    128e:	60 91 ef 01 	lds	r22, 0x01EF
    1292:	70 91 f0 01 	lds	r23, 0x01F0
    1296:	84 1b       	sub	r24, r20
    1298:	95 0b       	sbc	r25, r21
    129a:	a6 0b       	sbc	r26, r22
    129c:	b7 0b       	sbc	r27, r23
    129e:	80 93 e5 01 	sts	0x01E5, r24
    12a2:	90 93 e6 01 	sts	0x01E6, r25
    12a6:	a0 93 e7 01 	sts	0x01E7, r26
    12aa:	b0 93 e8 01 	sts	0x01E8, r27
			/*********************************/	
			SET_BIT(MCUCSR,6);		/*Make it Rising*/
    12ae:	84 b7       	in	r24, 0x34	; 52
    12b0:	80 64       	ori	r24, 0x40	; 64
    12b2:	84 bf       	out	0x34, r24	; 52
    12b4:	08 95       	ret

000012b6 <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
	static uint8_t u8_Button_press[3];
static uint8_t u8_S_button_status[3];
switch(en_butotn_id)
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	c1 f0       	breq	.+48     	; 0x12ea <pushButtonGetStatus+0x34>
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	18 f0       	brcs	.+6      	; 0x12c4 <pushButtonGetStatus+0xe>
    12be:	82 30       	cpi	r24, 0x02	; 2
    12c0:	d1 f5       	brne	.+116    	; 0x1336 <pushButtonGetStatus+0x80>
    12c2:	26 c0       	rjmp	.+76     	; 0x1310 <pushButtonGetStatus+0x5a>
{
case BTN_0:
{DIO_Read(BTN_0_GPIO,BTN_0_BIT,&(u8_Button_press[0]));
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	60 e1       	ldi	r22, 0x10	; 16
    12c8:	46 ef       	ldi	r20, 0xF6	; 246
    12ca:	51 e0       	ldi	r21, 0x01	; 1
    12cc:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_Read>
if( u8_Button_press[0]== Pressed)
    12d0:	80 91 f6 01 	lds	r24, 0x01F6
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	81 f5       	brne	.+96     	; 0x1338 <pushButtonGetStatus+0x82>
{ 
	(u8_S_button_status[0])++;
    12d8:	90 91 f9 01 	lds	r25, 0x01F9
    12dc:	9f 5f       	subi	r25, 0xFF	; 255
    12de:	90 93 f9 01 	sts	0x01F9, r25
	/************************************************************************/
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 50)
	return Pressed;
    12e2:	93 33       	cpi	r25, 0x33	; 51
    12e4:	70 f5       	brcc	.+92     	; 0x1342 <pushButtonGetStatus+0x8c>
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	08 95       	ret
	else {return Released;}
}else{return Released;}
break;
}
case BTN_1:
{DIO_Read(BTN_1_GPIO,BTN_1_BIT,&(u8_Button_press[1]));
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	64 e0       	ldi	r22, 0x04	; 4
    12ee:	47 ef       	ldi	r20, 0xF7	; 247
    12f0:	51 e0       	ldi	r21, 0x01	; 1
    12f2:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_Read>
if( u8_Button_press[1] == Pressed)
    12f6:	80 91 f7 01 	lds	r24, 0x01F7
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	f9 f4       	brne	.+62     	; 0x133c <pushButtonGetStatus+0x86>
{
	(u8_S_button_status[0])++;
    12fe:	90 91 f9 01 	lds	r25, 0x01F9
    1302:	9f 5f       	subi	r25, 0xFF	; 255
    1304:	90 93 f9 01 	sts	0x01F9, r25
	(u8_S_button_status[0])++;
	/************************************************************************/
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 50)
	return Pressed;
    1308:	93 33       	cpi	r25, 0x33	; 51
    130a:	d8 f4       	brcc	.+54     	; 0x1342 <pushButtonGetStatus+0x8c>
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	08 95       	ret
	else {return Released;}
}else{return Released;}
break;
}
case BTN_2:
{DIO_Read(BTN_2_GPIO,BTN_2_BIT,&(u8_Button_press[2]));
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	64 e0       	ldi	r22, 0x04	; 4
    1314:	48 ef       	ldi	r20, 0xF8	; 248
    1316:	51 e0       	ldi	r21, 0x01	; 1
    1318:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_Read>
if((u8_Button_press[2])== Pressed)
    131c:	80 91 f8 01 	lds	r24, 0x01F8
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	71 f4       	brne	.+28     	; 0x1340 <pushButtonGetStatus+0x8a>
{	(u8_S_button_status[1])++;
    1324:	90 91 fa 01 	lds	r25, 0x01FA
    1328:	9f 5f       	subi	r25, 0xFF	; 255
    132a:	90 93 fa 01 	sts	0x01FA, r25
	(u8_S_button_status[0])++;
	/************************************************************************/
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 50)
	return Pressed;
    132e:	95 31       	cpi	r25, 0x15	; 21
    1330:	40 f4       	brcc	.+16     	; 0x1342 <pushButtonGetStatus+0x8c>
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	08 95       	ret
    1336:	08 95       	ret
	else {return Released;}
}else{return Released;}
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	08 95       	ret
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 50)
return Pressed;
	else {return Released;}
}else{return Released;}
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	08 95       	ret
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[1]) > 20)
	return Pressed;
else {return Released;}
}else{return Released;}
    1340:	80 e0       	ldi	r24, 0x00	; 0


	}


}
    1342:	08 95       	ret

00001344 <Pwm_Init>:
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/

ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{uint8_t Ret=0;
    1344:	fc 01       	movw	r30, r24
	switch(Pwm_Cfg->Channel)
    1346:	80 81       	ld	r24, Z
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	61 f0       	breq	.+24     	; 0x1364 <Pwm_Init+0x20>
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	28 f0       	brcs	.+10     	; 0x135a <Pwm_Init+0x16>
    1350:	82 30       	cpi	r24, 0x02	; 2
    1352:	81 f0       	breq	.+32     	; 0x1374 <Pwm_Init+0x30>
    1354:	83 30       	cpi	r24, 0x03	; 3
    1356:	d9 f4       	brne	.+54     	; 0x138e <Pwm_Init+0x4a>
    1358:	15 c0       	rjmp	.+42     	; 0x1384 <Pwm_Init+0x40>
		{
			case PWM_CH0:
			TCCR0|=T0_PWM_FAST |T0_NON_INVERTING;
    135a:	83 b7       	in	r24, 0x33	; 51
    135c:	88 66       	ori	r24, 0x68	; 104
    135e:	83 bf       	out	0x33, r24	; 51
			Ret=E_OK;
    1360:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1362:	16 c0       	rjmp	.+44     	; 0x1390 <Pwm_Init+0x4c>

			case PWM_CH1A:
			TCCR1 |= T1_PWM_Phase_8 | T1_OC1A_OC1B|0x0020;
    1364:	8e b5       	in	r24, 0x2e	; 46
    1366:	9f b5       	in	r25, 0x2f	; 47
    1368:	80 62       	ori	r24, 0x20	; 32
    136a:	91 6a       	ori	r25, 0xA1	; 161
    136c:	9f bd       	out	0x2f, r25	; 47
    136e:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
    1370:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1372:	0e c0       	rjmp	.+28     	; 0x1390 <Pwm_Init+0x4c>

			case PWM_CH1B:
			TCCR1 |= T1_PWM_Phase_8 | T1_OC1A_OC1B;
    1374:	8e b5       	in	r24, 0x2e	; 46
    1376:	9f b5       	in	r25, 0x2f	; 47
    1378:	80 62       	ori	r24, 0x20	; 32
    137a:	91 6a       	ori	r25, 0xA1	; 161
    137c:	9f bd       	out	0x2f, r25	; 47
    137e:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
    1380:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1382:	06 c0       	rjmp	.+12     	; 0x1390 <Pwm_Init+0x4c>


			case PWM_CH2:
			TCCR2 |=T2_PWM_FAST |T2_NON_INVERTING;
    1384:	85 b5       	in	r24, 0x25	; 37
    1386:	88 66       	ori	r24, 0x68	; 104
    1388:	85 bd       	out	0x25, r24	; 37
			Ret=E_OK;
    138a:	80 e0       	ldi	r24, 0x00	; 0
			break;
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <Pwm_Init+0x4c>
			default:
			Ret=E_NOK;
    138e:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	sgl_Prescaler=Pwm_Cfg->Prescaler;
    1390:	91 81       	ldd	r25, Z+1	; 0x01
    1392:	90 93 fc 01 	sts	0x01FC, r25
	u32g_T1_Prescaler=en_prescal;
	OCR1A =u16_outputCompareA;
	OCR1B =u16_outputCompareB;
	TCNT1=u16_initialValue;
	*/
}
    1396:	08 95       	ret

00001398 <Pwm_Start>:
/*-------------------------------------------------------                        */
/*((all this calculations are for phase correct mode))                           */
/*all this calculation for F_CPU 16MHz                                           */
/*********************************************************************************/
ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{uint8_t Ret=0;
    1398:	cf 92       	push	r12
    139a:	df 92       	push	r13
    139c:	ef 92       	push	r14
    139e:	ff 92       	push	r15
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	89 01       	movw	r16, r18
    13a6:	9a 01       	movw	r18, r20
	float dutyReal;
uint32_t pwm_time_on = MAX_HOLD;

if(Frequncy <= 31372 && Frequncy > 3921 )
    13a8:	0f 2e       	mov	r0, r31
    13aa:	fe ea       	ldi	r31, 0xAE	; 174
    13ac:	cf 2e       	mov	r12, r31
    13ae:	f0 ef       	ldi	r31, 0xF0	; 240
    13b0:	df 2e       	mov	r13, r31
    13b2:	ff ef       	ldi	r31, 0xFF	; 255
    13b4:	ef 2e       	mov	r14, r31
    13b6:	ff ef       	ldi	r31, 0xFF	; 255
    13b8:	ff 2e       	mov	r15, r31
    13ba:	f0 2d       	mov	r31, r0
    13bc:	c0 0e       	add	r12, r16
    13be:	d1 1e       	adc	r13, r17
    13c0:	e2 1e       	adc	r14, r18
    13c2:	f3 1e       	adc	r15, r19
    13c4:	9b e3       	ldi	r25, 0x3B	; 59
    13c6:	c9 16       	cp	r12, r25
    13c8:	9b e6       	ldi	r25, 0x6B	; 107
    13ca:	d9 06       	cpc	r13, r25
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	e9 06       	cpc	r14, r25
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	f9 06       	cpc	r15, r25
    13d4:	18 f4       	brcc	.+6      	; 0x13dc <Pwm_Start+0x44>
	sgl_Prescaler=PWM_PRESCALER_NO;
    13d6:	10 92 fc 01 	sts	0x01FC, r1
    13da:	a2 c0       	rjmp	.+324    	; 0x1520 <Pwm_Start+0x188>
else if(Frequncy <= 3921 && Frequncy > 980)
    13dc:	0f 2e       	mov	r0, r31
    13de:	fb e2       	ldi	r31, 0x2B	; 43
    13e0:	cf 2e       	mov	r12, r31
    13e2:	fc ef       	ldi	r31, 0xFC	; 252
    13e4:	df 2e       	mov	r13, r31
    13e6:	ff ef       	ldi	r31, 0xFF	; 255
    13e8:	ef 2e       	mov	r14, r31
    13ea:	ff ef       	ldi	r31, 0xFF	; 255
    13ec:	ff 2e       	mov	r15, r31
    13ee:	f0 2d       	mov	r31, r0
    13f0:	c0 0e       	add	r12, r16
    13f2:	d1 1e       	adc	r13, r17
    13f4:	e2 1e       	adc	r14, r18
    13f6:	f3 1e       	adc	r15, r19
    13f8:	9d e7       	ldi	r25, 0x7D	; 125
    13fa:	c9 16       	cp	r12, r25
    13fc:	9b e0       	ldi	r25, 0x0B	; 11
    13fe:	d9 06       	cpc	r13, r25
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	e9 06       	cpc	r14, r25
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	f9 06       	cpc	r15, r25
    1408:	20 f4       	brcc	.+8      	; 0x1412 <Pwm_Start+0x7a>
	sgl_Prescaler=PWM_PRESCALER_8;
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	90 93 fc 01 	sts	0x01FC, r25
    1410:	a5 c0       	rjmp	.+330    	; 0x155c <Pwm_Start+0x1c4>
else if(Frequncy <= 980 && Frequncy > 490)
    1412:	0f 2e       	mov	r0, r31
    1414:	f5 e1       	ldi	r31, 0x15	; 21
    1416:	cf 2e       	mov	r12, r31
    1418:	fe ef       	ldi	r31, 0xFE	; 254
    141a:	df 2e       	mov	r13, r31
    141c:	ff ef       	ldi	r31, 0xFF	; 255
    141e:	ef 2e       	mov	r14, r31
    1420:	ff ef       	ldi	r31, 0xFF	; 255
    1422:	ff 2e       	mov	r15, r31
    1424:	f0 2d       	mov	r31, r0
    1426:	c0 0e       	add	r12, r16
    1428:	d1 1e       	adc	r13, r17
    142a:	e2 1e       	adc	r14, r18
    142c:	f3 1e       	adc	r15, r19
    142e:	9a ee       	ldi	r25, 0xEA	; 234
    1430:	c9 16       	cp	r12, r25
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	d9 06       	cpc	r13, r25
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	e9 06       	cpc	r14, r25
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	f9 06       	cpc	r15, r25
    143e:	20 f4       	brcc	.+8      	; 0x1448 <Pwm_Start+0xb0>
	sgl_Prescaler=PWM_PRESCALER_32;
    1440:	92 e0       	ldi	r25, 0x02	; 2
    1442:	90 93 fc 01 	sts	0x01FC, r25
    1446:	a1 c0       	rjmp	.+322    	; 0x158a <Pwm_Start+0x1f2>
else if(Frequncy <= 490 && Frequncy > 245)
    1448:	0f 2e       	mov	r0, r31
    144a:	fa e0       	ldi	r31, 0x0A	; 10
    144c:	cf 2e       	mov	r12, r31
    144e:	ff ef       	ldi	r31, 0xFF	; 255
    1450:	df 2e       	mov	r13, r31
    1452:	ff ef       	ldi	r31, 0xFF	; 255
    1454:	ef 2e       	mov	r14, r31
    1456:	ff ef       	ldi	r31, 0xFF	; 255
    1458:	ff 2e       	mov	r15, r31
    145a:	f0 2d       	mov	r31, r0
    145c:	c0 0e       	add	r12, r16
    145e:	d1 1e       	adc	r13, r17
    1460:	e2 1e       	adc	r14, r18
    1462:	f3 1e       	adc	r15, r19
    1464:	95 ef       	ldi	r25, 0xF5	; 245
    1466:	c9 16       	cp	r12, r25
    1468:	d1 04       	cpc	r13, r1
    146a:	e1 04       	cpc	r14, r1
    146c:	f1 04       	cpc	r15, r1
    146e:	20 f4       	brcc	.+8      	; 0x1478 <Pwm_Start+0xe0>
	sgl_Prescaler=PWM_PRESCALER_64;
    1470:	93 e0       	ldi	r25, 0x03	; 3
    1472:	90 93 fc 01 	sts	0x01FC, r25
    1476:	90 c0       	rjmp	.+288    	; 0x1598 <Pwm_Start+0x200>
else if(Frequncy <= 245 && Frequncy > 122)
    1478:	0f 2e       	mov	r0, r31
    147a:	f5 e8       	ldi	r31, 0x85	; 133
    147c:	cf 2e       	mov	r12, r31
    147e:	ff ef       	ldi	r31, 0xFF	; 255
    1480:	df 2e       	mov	r13, r31
    1482:	ff ef       	ldi	r31, 0xFF	; 255
    1484:	ef 2e       	mov	r14, r31
    1486:	ff ef       	ldi	r31, 0xFF	; 255
    1488:	ff 2e       	mov	r15, r31
    148a:	f0 2d       	mov	r31, r0
    148c:	c0 0e       	add	r12, r16
    148e:	d1 1e       	adc	r13, r17
    1490:	e2 1e       	adc	r14, r18
    1492:	f3 1e       	adc	r15, r19
    1494:	9b e7       	ldi	r25, 0x7B	; 123
    1496:	c9 16       	cp	r12, r25
    1498:	d1 04       	cpc	r13, r1
    149a:	e1 04       	cpc	r14, r1
    149c:	f1 04       	cpc	r15, r1
    149e:	20 f4       	brcc	.+8      	; 0x14a8 <Pwm_Start+0x110>
	sgl_Prescaler=PWM_PRESCALER_128;
    14a0:	94 e0       	ldi	r25, 0x04	; 4
    14a2:	90 93 fc 01 	sts	0x01FC, r25
    14a6:	a5 c0       	rjmp	.+330    	; 0x15f2 <Pwm_Start+0x25a>
else if(Frequncy <= 122 && Frequncy > 31)
    14a8:	0f 2e       	mov	r0, r31
    14aa:	f0 ee       	ldi	r31, 0xE0	; 224
    14ac:	cf 2e       	mov	r12, r31
    14ae:	ff ef       	ldi	r31, 0xFF	; 255
    14b0:	df 2e       	mov	r13, r31
    14b2:	ff ef       	ldi	r31, 0xFF	; 255
    14b4:	ef 2e       	mov	r14, r31
    14b6:	ff ef       	ldi	r31, 0xFF	; 255
    14b8:	ff 2e       	mov	r15, r31
    14ba:	f0 2d       	mov	r31, r0
    14bc:	c0 0e       	add	r12, r16
    14be:	d1 1e       	adc	r13, r17
    14c0:	e2 1e       	adc	r14, r18
    14c2:	f3 1e       	adc	r15, r19
    14c4:	9b e5       	ldi	r25, 0x5B	; 91
    14c6:	c9 16       	cp	r12, r25
    14c8:	d1 04       	cpc	r13, r1
    14ca:	e1 04       	cpc	r14, r1
    14cc:	f1 04       	cpc	r15, r1
    14ce:	20 f4       	brcc	.+8      	; 0x14d8 <Pwm_Start+0x140>
	sgl_Prescaler=PWM_PRESCALER_256;
    14d0:	95 e0       	ldi	r25, 0x05	; 5
    14d2:	90 93 fc 01 	sts	0x01FC, r25
    14d6:	77 c0       	rjmp	.+238    	; 0x15c6 <Pwm_Start+0x22e>
else if(Frequncy <= 31 && Frequncy > 0)
    14d8:	01 50       	subi	r16, 0x01	; 1
    14da:	10 40       	sbci	r17, 0x00	; 0
    14dc:	20 40       	sbci	r18, 0x00	; 0
    14de:	30 40       	sbci	r19, 0x00	; 0
    14e0:	0f 31       	cpi	r16, 0x1F	; 31
    14e2:	11 05       	cpc	r17, r1
    14e4:	21 05       	cpc	r18, r1
    14e6:	31 05       	cpc	r19, r1
    14e8:	20 f4       	brcc	.+8      	; 0x14f2 <Pwm_Start+0x15a>
	sgl_Prescaler=PWM_PRESCALER_1024;
    14ea:	96 e0       	ldi	r25, 0x06	; 6
    14ec:	90 93 fc 01 	sts	0x01FC, r25
    14f0:	86 c0       	rjmp	.+268    	; 0x15fe <Pwm_Start+0x266>
else{Ret=E_NOK;}
switch(sgl_Prescaler)
    14f2:	90 91 fc 01 	lds	r25, 0x01FC
    14f6:	93 30       	cpi	r25, 0x03	; 3
    14f8:	09 f4       	brne	.+2      	; 0x14fc <Pwm_Start+0x164>
    14fa:	4e c0       	rjmp	.+156    	; 0x1598 <Pwm_Start+0x200>
    14fc:	94 30       	cpi	r25, 0x04	; 4
    14fe:	30 f4       	brcc	.+12     	; 0x150c <Pwm_Start+0x174>
    1500:	91 30       	cpi	r25, 0x01	; 1
    1502:	61 f1       	breq	.+88     	; 0x155c <Pwm_Start+0x1c4>
    1504:	92 30       	cpi	r25, 0x02	; 2
    1506:	08 f0       	brcs	.+2      	; 0x150a <Pwm_Start+0x172>
    1508:	40 c0       	rjmp	.+128    	; 0x158a <Pwm_Start+0x1f2>
    150a:	0a c0       	rjmp	.+20     	; 0x1520 <Pwm_Start+0x188>
    150c:	95 30       	cpi	r25, 0x05	; 5
    150e:	09 f4       	brne	.+2      	; 0x1512 <Pwm_Start+0x17a>
    1510:	5a c0       	rjmp	.+180    	; 0x15c6 <Pwm_Start+0x22e>
    1512:	95 30       	cpi	r25, 0x05	; 5
    1514:	08 f4       	brcc	.+2      	; 0x1518 <Pwm_Start+0x180>
    1516:	6d c0       	rjmp	.+218    	; 0x15f2 <Pwm_Start+0x25a>
    1518:	96 30       	cpi	r25, 0x06	; 6
    151a:	09 f0       	breq	.+2      	; 0x151e <Pwm_Start+0x186>
    151c:	8d c0       	rjmp	.+282    	; 0x1638 <Pwm_Start+0x2a0>
    151e:	6f c0       	rjmp	.+222    	; 0x15fe <Pwm_Start+0x266>
{
	case PWM_PRESCALER_NO:
	{
		switch(Channel)
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	61 f0       	breq	.+24     	; 0x153c <Pwm_Start+0x1a4>
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	30 f0       	brcs	.+12     	; 0x1534 <Pwm_Start+0x19c>
    1528:	82 30       	cpi	r24, 0x02	; 2
    152a:	71 f0       	breq	.+28     	; 0x1548 <Pwm_Start+0x1b0>
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	09 f0       	breq	.+2      	; 0x1532 <Pwm_Start+0x19a>
    1530:	83 c0       	rjmp	.+262    	; 0x1638 <Pwm_Start+0x2a0>
    1532:	10 c0       	rjmp	.+32     	; 0x1554 <Pwm_Start+0x1bc>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_NO_CONFIG;
    1534:	83 b7       	in	r24, 0x33	; 51
    1536:	81 60       	ori	r24, 0x01	; 1
    1538:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    153a:	88 c0       	rjmp	.+272    	; 0x164c <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			{
			TCCR1|=PWM_PRESCALER_NO_CONFIG;
    153c:	8e b5       	in	r24, 0x2e	; 46
    153e:	9f b5       	in	r25, 0x2f	; 47
    1540:	81 60       	ori	r24, 0x01	; 1
    1542:	9f bd       	out	0x2f, r25	; 47
    1544:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
			break;
    1546:	98 c0       	rjmp	.+304    	; 0x1678 <Pwm_Start+0x2e0>
			}			
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_NO_CONFIG;
    1548:	8e b5       	in	r24, 0x2e	; 46
    154a:	9f b5       	in	r25, 0x2f	; 47
    154c:	81 60       	ori	r24, 0x01	; 1
    154e:	9f bd       	out	0x2f, r25	; 47
    1550:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
    1552:	ad c0       	rjmp	.+346    	; 0x16ae <Pwm_Start+0x316>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_NO_CONFIG;
    1554:	85 b5       	in	r24, 0x25	; 37
    1556:	81 60       	ori	r24, 0x01	; 1
    1558:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    155a:	c4 c0       	rjmp	.+392    	; 0x16e4 <Pwm_Start+0x34c>
	}

	
	case PWM_PRESCALER_8:
	{
		switch(Channel)
    155c:	83 30       	cpi	r24, 0x03	; 3
    155e:	18 f4       	brcc	.+6      	; 0x1566 <Pwm_Start+0x1ce>
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	48 f4       	brcc	.+18     	; 0x1576 <Pwm_Start+0x1de>
    1564:	04 c0       	rjmp	.+8      	; 0x156e <Pwm_Start+0x1d6>
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	09 f0       	breq	.+2      	; 0x156c <Pwm_Start+0x1d4>
    156a:	66 c0       	rjmp	.+204    	; 0x1638 <Pwm_Start+0x2a0>
    156c:	0a c0       	rjmp	.+20     	; 0x1582 <Pwm_Start+0x1ea>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_8_CONFIG;
    156e:	83 b7       	in	r24, 0x33	; 51
    1570:	82 60       	ori	r24, 0x02	; 2
    1572:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    1574:	6b c0       	rjmp	.+214    	; 0x164c <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_8_CONFIG;
    1576:	2e b5       	in	r18, 0x2e	; 46
    1578:	3f b5       	in	r19, 0x2f	; 47
    157a:	22 60       	ori	r18, 0x02	; 2
    157c:	3f bd       	out	0x2f, r19	; 47
    157e:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
    1580:	5b c0       	rjmp	.+182    	; 0x1638 <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_8_CONFIG;
    1582:	85 b5       	in	r24, 0x25	; 37
    1584:	82 60       	ori	r24, 0x02	; 2
    1586:	85 bd       	out	0x25, r24	; 37
			Ret=E_OK;	
				break;
    1588:	ad c0       	rjmp	.+346    	; 0x16e4 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_32:
	{
		switch(Channel)
    158a:	83 30       	cpi	r24, 0x03	; 3
    158c:	09 f0       	breq	.+2      	; 0x1590 <Pwm_Start+0x1f8>
    158e:	54 c0       	rjmp	.+168    	; 0x1638 <Pwm_Start+0x2a0>
		{
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_32_CONFIG_T2;
    1590:	85 b5       	in	r24, 0x25	; 37
    1592:	83 60       	ori	r24, 0x03	; 3
    1594:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    1596:	a6 c0       	rjmp	.+332    	; 0x16e4 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_64:
	{
		switch(Channel)
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	18 f4       	brcc	.+6      	; 0x15a2 <Pwm_Start+0x20a>
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	48 f4       	brcc	.+18     	; 0x15b2 <Pwm_Start+0x21a>
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <Pwm_Start+0x212>
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <Pwm_Start+0x210>
    15a6:	48 c0       	rjmp	.+144    	; 0x1638 <Pwm_Start+0x2a0>
    15a8:	0a c0       	rjmp	.+20     	; 0x15be <Pwm_Start+0x226>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_64_CONFIG;
    15aa:	83 b7       	in	r24, 0x33	; 51
    15ac:	83 60       	ori	r24, 0x03	; 3
    15ae:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    15b0:	4d c0       	rjmp	.+154    	; 0x164c <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_64_CONFIG;
    15b2:	2e b5       	in	r18, 0x2e	; 46
    15b4:	3f b5       	in	r19, 0x2f	; 47
    15b6:	23 60       	ori	r18, 0x03	; 3
    15b8:	3f bd       	out	0x2f, r19	; 47
    15ba:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
    15bc:	3d c0       	rjmp	.+122    	; 0x1638 <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_64_CONFIG_T2;
    15be:	85 b5       	in	r24, 0x25	; 37
    15c0:	84 60       	ori	r24, 0x04	; 4
    15c2:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    15c4:	8f c0       	rjmp	.+286    	; 0x16e4 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_256:
	{
		switch(Channel)
    15c6:	83 30       	cpi	r24, 0x03	; 3
    15c8:	18 f4       	brcc	.+6      	; 0x15d0 <Pwm_Start+0x238>
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	40 f4       	brcc	.+16     	; 0x15de <Pwm_Start+0x246>
    15ce:	03 c0       	rjmp	.+6      	; 0x15d6 <Pwm_Start+0x23e>
    15d0:	83 30       	cpi	r24, 0x03	; 3
    15d2:	91 f5       	brne	.+100    	; 0x1638 <Pwm_Start+0x2a0>
    15d4:	0a c0       	rjmp	.+20     	; 0x15ea <Pwm_Start+0x252>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_64_CONFIG;
    15d6:	83 b7       	in	r24, 0x33	; 51
    15d8:	83 60       	ori	r24, 0x03	; 3
    15da:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    15dc:	37 c0       	rjmp	.+110    	; 0x164c <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_64_CONFIG;
    15de:	2e b5       	in	r18, 0x2e	; 46
    15e0:	3f b5       	in	r19, 0x2f	; 47
    15e2:	23 60       	ori	r18, 0x03	; 3
    15e4:	3f bd       	out	0x2f, r19	; 47
    15e6:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
    15e8:	27 c0       	rjmp	.+78     	; 0x1638 <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_64_CONFIG_T2;
    15ea:	85 b5       	in	r24, 0x25	; 37
    15ec:	84 60       	ori	r24, 0x04	; 4
    15ee:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    15f0:	79 c0       	rjmp	.+242    	; 0x16e4 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_128:
	{
		switch(Channel)
    15f2:	83 30       	cpi	r24, 0x03	; 3
    15f4:	09 f5       	brne	.+66     	; 0x1638 <Pwm_Start+0x2a0>
		{
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_128_CONFIG_T2;
    15f6:	85 b5       	in	r24, 0x25	; 37
    15f8:	85 60       	ori	r24, 0x05	; 5
    15fa:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    15fc:	73 c0       	rjmp	.+230    	; 0x16e4 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_1024:
	{
		switch(Channel)
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	59 f0       	breq	.+22     	; 0x1618 <Pwm_Start+0x280>
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	28 f0       	brcs	.+10     	; 0x1610 <Pwm_Start+0x278>
    1606:	82 30       	cpi	r24, 0x02	; 2
    1608:	69 f0       	breq	.+26     	; 0x1624 <Pwm_Start+0x28c>
    160a:	83 30       	cpi	r24, 0x03	; 3
    160c:	a9 f4       	brne	.+42     	; 0x1638 <Pwm_Start+0x2a0>
    160e:	10 c0       	rjmp	.+32     	; 0x1630 <Pwm_Start+0x298>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_1024_CONFIG;
    1610:	83 b7       	in	r24, 0x33	; 51
    1612:	85 60       	ori	r24, 0x05	; 5
    1614:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    1616:	1a c0       	rjmp	.+52     	; 0x164c <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			{	TCCR1|=PWM_PRESCALER_NO_CONFIG;
    1618:	8e b5       	in	r24, 0x2e	; 46
    161a:	9f b5       	in	r25, 0x2f	; 47
    161c:	81 60       	ori	r24, 0x01	; 1
    161e:	9f bd       	out	0x2f, r25	; 47
    1620:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
    1622:	2a c0       	rjmp	.+84     	; 0x1678 <Pwm_Start+0x2e0>
			}
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_1024_CONFIG;
    1624:	8e b5       	in	r24, 0x2e	; 46
    1626:	9f b5       	in	r25, 0x2f	; 47
    1628:	85 60       	ori	r24, 0x05	; 5
    162a:	9f bd       	out	0x2f, r25	; 47
    162c:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
    162e:	3f c0       	rjmp	.+126    	; 0x16ae <Pwm_Start+0x316>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_1024_CONFIG_T2;
    1630:	85 b5       	in	r24, 0x25	; 37
    1632:	87 60       	ori	r24, 0x07	; 7
    1634:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    1636:	56 c0       	rjmp	.+172    	; 0x16e4 <Pwm_Start+0x34c>

	
	
}

switch(Channel)
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	f1 f0       	breq	.+60     	; 0x1678 <Pwm_Start+0x2e0>
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	30 f0       	brcs	.+12     	; 0x164c <Pwm_Start+0x2b4>
    1640:	82 30       	cpi	r24, 0x02	; 2
    1642:	a9 f1       	breq	.+106    	; 0x16ae <Pwm_Start+0x316>
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	09 f0       	breq	.+2      	; 0x164a <Pwm_Start+0x2b2>
    1648:	63 c0       	rjmp	.+198    	; 0x1710 <Pwm_Start+0x378>
    164a:	4c c0       	rjmp	.+152    	; 0x16e4 <Pwm_Start+0x34c>
		{
			case PWM_CH0:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 1a 11 	call	0x2234	; 0x2234 <__floatunsisf>
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	48 ec       	ldi	r20, 0xC8	; 200
    165c:	52 e4       	ldi	r21, 0x42	; 66
    165e:	0e 94 86 10 	call	0x210c	; 0x210c <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	4f e7       	ldi	r20, 0x7F	; 127
    1668:	53 e4       	ldi	r21, 0x43	; 67
    166a:	0e 94 a8 11 	call	0x2350	; 0x2350 <__mulsf3>
    166e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__fixunssfsi>
			OCR0=pwm_time_on;
    1672:	6c bf       	out	0x3c, r22	; 60
			Ret=E_OK;
    1674:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1676:	4d c0       	rjmp	.+154    	; 0x1712 <Pwm_Start+0x37a>
			}			
			case PWM_CH1A:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 1a 11 	call	0x2234	; 0x2234 <__floatunsisf>
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	48 ec       	ldi	r20, 0xC8	; 200
    1688:	52 e4       	ldi	r21, 0x42	; 66
    168a:	0e 94 86 10 	call	0x210c	; 0x210c <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	4f e7       	ldi	r20, 0x7F	; 127
    1694:	53 e4       	ldi	r21, 0x43	; 67
    1696:	0e 94 a8 11 	call	0x2350	; 0x2350 <__mulsf3>
    169a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
			OCR1A=pwm_time_on;
    16a2:	9b bd       	out	0x2b, r25	; 43
    16a4:	8a bd       	out	0x2a, r24	; 42
			OCR1B=pwm_time_on;
    16a6:	99 bd       	out	0x29, r25	; 41
    16a8:	88 bd       	out	0x28, r24	; 40
			Ret=E_OK;
    16aa:	80 e0       	ldi	r24, 0x00	; 0
			break;
    16ac:	32 c0       	rjmp	.+100    	; 0x1712 <Pwm_Start+0x37a>
			}			
			case PWM_CH1B:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 1a 11 	call	0x2234	; 0x2234 <__floatunsisf>
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	48 ec       	ldi	r20, 0xC8	; 200
    16be:	52 e4       	ldi	r21, 0x42	; 66
    16c0:	0e 94 86 10 	call	0x210c	; 0x210c <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	53 e4       	ldi	r21, 0x43	; 67
    16cc:	0e 94 a8 11 	call	0x2350	; 0x2350 <__mulsf3>
    16d0:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
			OCR1A=pwm_time_on;
    16d8:	9b bd       	out	0x2b, r25	; 43
    16da:	8a bd       	out	0x2a, r24	; 42
			OCR1B=pwm_time_on;
    16dc:	99 bd       	out	0x29, r25	; 41
    16de:	88 bd       	out	0x28, r24	; 40
			Ret=E_OK;
    16e0:	80 e0       	ldi	r24, 0x00	; 0
			break;
    16e2:	17 c0       	rjmp	.+46     	; 0x1712 <Pwm_Start+0x37a>
			}
			case PWM_CH2:{
			pwm_time_on=MAX_HOLD;	
			dutyReal=((float)Duty/(float)FULL_SPEED);
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 1a 11 	call	0x2234	; 0x2234 <__floatunsisf>
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	48 ec       	ldi	r20, 0xC8	; 200
    16f4:	52 e4       	ldi	r21, 0x42	; 66
    16f6:	0e 94 86 10 	call	0x210c	; 0x210c <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	4f e7       	ldi	r20, 0x7F	; 127
    1700:	53 e4       	ldi	r21, 0x43	; 67
    1702:	0e 94 a8 11 	call	0x2350	; 0x2350 <__mulsf3>
    1706:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__fixunssfsi>
			OCR2=pwm_time_on;
    170a:	63 bd       	out	0x23, r22	; 35
			Ret=E_OK;
    170c:	80 e0       	ldi	r24, 0x00	; 0
			}			
			break;
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <Pwm_Start+0x37a>
			default:
			Ret=E_NOK;
    1710:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
sgl_is_started=1;
    1712:	91 e0       	ldi	r25, 0x01	; 1
    1714:	90 93 fd 01 	sts	0x01FD, r25
return Ret;
}
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	cf 90       	pop	r12
    1724:	08 95       	ret

00001726 <Pwm_Update>:


ERROR_STATUS Pwm_Update(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
uint8_t Ret=0;
if (sgl_is_started == 1)
    1726:	90 91 fd 01 	lds	r25, 0x01FD
    172a:	91 30       	cpi	r25, 0x01	; 1
    172c:	21 f4       	brne	.+8      	; 0x1736 <Pwm_Update+0x10>
{
	Pwm_Start( Channel,Duty,Frequncy);
    172e:	0e 94 cc 09 	call	0x1398	; 0x1398 <Pwm_Start>
Ret=E_OK;
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	08 95       	ret
}else{Ret=E_NOK;}
    1736:	81 e0       	ldi	r24, 0x01	; 1
	

return Ret;
}
    1738:	08 95       	ret

0000173a <Pwm_Stop>:
/*********************************************************************************/

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
uint8_t Ret=0;
switch(Channel)
    173a:	83 30       	cpi	r24, 0x03	; 3
    173c:	18 f4       	brcc	.+6      	; 0x1744 <Pwm_Stop+0xa>
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	48 f4       	brcc	.+18     	; 0x1754 <Pwm_Stop+0x1a>
    1742:	03 c0       	rjmp	.+6      	; 0x174a <Pwm_Stop+0x10>
    1744:	83 30       	cpi	r24, 0x03	; 3
    1746:	81 f4       	brne	.+32     	; 0x1768 <Pwm_Stop+0x2e>
    1748:	0a c0       	rjmp	.+20     	; 0x175e <Pwm_Stop+0x24>
{
	case PWM_CH0:
	TCCR0 &=TIMER_STOPT02;
    174a:	83 b7       	in	r24, 0x33	; 51
    174c:	88 7f       	andi	r24, 0xF8	; 248
    174e:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
    1750:	80 e0       	ldi	r24, 0x00	; 0
	break;
    1752:	08 95       	ret

	case PWM_CH1A:
	case PWM_CH1B:
	TCCR0 &=TIMER_STOPT1;
    1754:	83 b7       	in	r24, 0x33	; 51
    1756:	88 7f       	andi	r24, 0xF8	; 248
    1758:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
    175a:	80 e0       	ldi	r24, 0x00	; 0
	break;
    175c:	08 95       	ret


	case PWM_CH2:
	TCCR2 &=TIMER_STOPT02;
    175e:	85 b5       	in	r24, 0x25	; 37
    1760:	88 7f       	andi	r24, 0xF8	; 248
    1762:	85 bd       	out	0x25, r24	; 37
	Ret=E_OK;
    1764:	80 e0       	ldi	r24, 0x00	; 0
	break;
    1766:	08 95       	ret
	default:
	Ret=E_NOK;
    1768:	81 e0       	ldi	r24, 0x01	; 1
	break;
}

return Ret;
}
    176a:	08 95       	ret

0000176c <Timer_Stop>:
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
switch (Timer_CH_NO) {
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	51 f0       	breq	.+20     	; 0x1784 <Timer_Stop+0x18>
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	18 f0       	brcs	.+6      	; 0x177a <Timer_Stop+0xe>
    1774:	82 30       	cpi	r24, 0x02	; 2
    1776:	91 f4       	brne	.+36     	; 0x179c <Timer_Stop+0x30>
    1778:	0c c0       	rjmp	.+24     	; 0x1792 <Timer_Stop+0x26>
case TIMER_CH0:
{
	TCCR0 &=0xF8;
    177a:	83 b7       	in	r24, 0x33	; 51
    177c:	88 7f       	andi	r24, 0xF8	; 248
    177e:	83 bf       	out	0x33, r24	; 51
 * Return: The error status of the function.
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
    1780:	80 e0       	ldi	r24, 0x00	; 0
switch (Timer_CH_NO) {
case TIMER_CH0:
{
	TCCR0 &=0xF8;
	break;
    1782:	08 95       	ret
}
case TIMER_CH1:
{
	TCCR1 &=0xFFF8;
    1784:	8e b5       	in	r24, 0x2e	; 46
    1786:	9f b5       	in	r25, 0x2f	; 47
    1788:	88 7f       	andi	r24, 0xF8	; 248
    178a:	9f bd       	out	0x2f, r25	; 47
    178c:	8e bd       	out	0x2e, r24	; 46
 * Return: The error status of the function.
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
    178e:	80 e0       	ldi	r24, 0x00	; 0
case TIMER_CH1:
{
	TCCR1 &=0xFFF8;
	
	
	break;
    1790:	08 95       	ret
}
case TIMER_CH2:
{
	TCCR2 &= 0xF8;
    1792:	85 b5       	in	r24, 0x25	; 37
    1794:	88 7f       	andi	r24, 0xF8	; 248
    1796:	85 bd       	out	0x25, r24	; 37
 * Return: The error status of the function.
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret=E_OK;
    1798:	80 e0       	ldi	r24, 0x00	; 0
case TIMER_CH2:
{
	TCCR2 &= 0xF8;
	
	
	break;
    179a:	08 95       	ret
}
default :
	Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    179c:	86 e3       	ldi	r24, 0x36	; 54
	break;
}

return Ret;

}
    179e:	08 95       	ret

000017a0 <Timer_Start>:
 * In/Out:
 * Return: The error status of the function.
 * Description: This function strats the needed timer.
 *
 */
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	eb 01       	movw	r28, r22
	uint8_t Ret;
	switch (Timer_CH_NO) {
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	09 f4       	brne	.+2      	; 0x17ac <Timer_Start+0xc>
    17aa:	7c c0       	rjmp	.+248    	; 0x18a4 <Timer_Start+0x104>
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	20 f0       	brcs	.+8      	; 0x17b8 <Timer_Start+0x18>
    17b0:	82 30       	cpi	r24, 0x02	; 2
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <Timer_Start+0x16>
    17b4:	69 c1       	rjmp	.+722    	; 0x1a88 <Timer_Start+0x2e8>
    17b6:	ec c0       	rjmp	.+472    	; 0x1990 <Timer_Start+0x1f0>
	case TIMER_CH0:{
		if(u8_timer0_is_init == 1)
    17b8:	80 91 00 02 	lds	r24, 0x0200
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	09 f0       	breq	.+2      	; 0x17c2 <Timer_Start+0x22>
    17c0:	6c c0       	rjmp	.+216    	; 0x189a <Timer_Start+0xfa>
		/***********************************************************************************************************************/
			{
		switch(prescaler_value){
    17c2:	80 91 ff 01 	lds	r24, 0x01FF
    17c6:	84 30       	cpi	r24, 0x04	; 4
    17c8:	91 f1       	breq	.+100    	; 0x182e <Timer_Start+0x8e>
    17ca:	85 30       	cpi	r24, 0x05	; 5
    17cc:	30 f4       	brcc	.+12     	; 0x17da <Timer_Start+0x3a>
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	51 f0       	breq	.+20     	; 0x17e6 <Timer_Start+0x46>
    17d2:	82 30       	cpi	r24, 0x02	; 2
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <Timer_Start+0x38>
    17d6:	5a c1       	rjmp	.+692    	; 0x1a8c <Timer_Start+0x2ec>
    17d8:	18 c0       	rjmp	.+48     	; 0x180a <Timer_Start+0x6a>
    17da:	86 30       	cpi	r24, 0x06	; 6
    17dc:	d1 f1       	breq	.+116    	; 0x1852 <Timer_Start+0xb2>
    17de:	87 30       	cpi	r24, 0x07	; 7
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <Timer_Start+0x44>
    17e2:	54 c1       	rjmp	.+680    	; 0x1a8c <Timer_Start+0x2ec>
    17e4:	48 c0       	rjmp	.+144    	; 0x1876 <Timer_Start+0xd6>
		case TIMER_PRESCALER_NO :{
			if(Timer_Count < MAX0){
    17e6:	6f 3f       	cpi	r22, 0xFF	; 255
    17e8:	71 05       	cpc	r23, r1
    17ea:	08 f0       	brcs	.+2      	; 0x17ee <Timer_Start+0x4e>
    17ec:	51 c1       	rjmp	.+674    	; 0x1a90 <Timer_Start+0x2f0>
				if(u8_sgv_TimerMode==1)
    17ee:	80 91 fe 01 	lds	r24, 0x01FE
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	31 f4       	brne	.+12     	; 0x1802 <Timer_Start+0x62>
				{
				Timer_Stop(TIMER_CH0);	
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR0 |=TIMER_PRESCALER_NO;
    17fc:	83 b7       	in	r24, 0x33	; 51
    17fe:	81 60       	ori	r24, 0x01	; 1
    1800:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =	MAX0 - Timer_Count;
    1802:	c0 95       	com	r28
    1804:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	62 c1       	rjmp	.+708    	; 0x1ace <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_8 :{
			if(Timer_Count < MAX0){
    180a:	6f 3f       	cpi	r22, 0xFF	; 255
    180c:	71 05       	cpc	r23, r1
    180e:	08 f0       	brcs	.+2      	; 0x1812 <Timer_Start+0x72>
    1810:	41 c1       	rjmp	.+642    	; 0x1a94 <Timer_Start+0x2f4>
				if(u8_sgv_TimerMode==1)
    1812:	80 91 fe 01 	lds	r24, 0x01FE
    1816:	81 30       	cpi	r24, 0x01	; 1
    1818:	31 f4       	brne	.+12     	; 0x1826 <Timer_Start+0x86>
				{
				Timer_Stop(TIMER_CH0);	
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_8_CONFIG;
    1820:	83 b7       	in	r24, 0x33	; 51
    1822:	82 60       	ori	r24, 0x02	; 2
    1824:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =MAX0 - Timer_Count;
    1826:	c0 95       	com	r28
    1828:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	50 c1       	rjmp	.+672    	; 0x1ace <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_64 :{
			if(Timer_Count < MAX0){
    182e:	6f 3f       	cpi	r22, 0xFF	; 255
    1830:	71 05       	cpc	r23, r1
    1832:	08 f0       	brcs	.+2      	; 0x1836 <Timer_Start+0x96>
    1834:	31 c1       	rjmp	.+610    	; 0x1a98 <Timer_Start+0x2f8>
				if(u8_sgv_TimerMode==1)
    1836:	80 91 fe 01 	lds	r24, 0x01FE
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	31 f4       	brne	.+12     	; 0x184a <Timer_Start+0xaa>
				{
				Timer_Stop(TIMER_CH0);
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_64_CONFIG;
    1844:	83 b7       	in	r24, 0x33	; 51
    1846:	83 60       	ori	r24, 0x03	; 3
    1848:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 = MAX0 - Timer_Count;
    184a:	c0 95       	com	r28
    184c:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	3e c1       	rjmp	.+636    	; 0x1ace <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_256 :{
			if(Timer_Count < MAX0){
    1852:	6f 3f       	cpi	r22, 0xFF	; 255
    1854:	71 05       	cpc	r23, r1
    1856:	08 f0       	brcs	.+2      	; 0x185a <Timer_Start+0xba>
    1858:	21 c1       	rjmp	.+578    	; 0x1a9c <Timer_Start+0x2fc>
				if(u8_sgv_TimerMode==1)
    185a:	80 91 fe 01 	lds	r24, 0x01FE
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	31 f4       	brne	.+12     	; 0x186e <Timer_Start+0xce>
				{
				Timer_Stop(TIMER_CH0);
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_256_CONFIG;
    1868:	83 b7       	in	r24, 0x33	; 51
    186a:	84 60       	ori	r24, 0x04	; 4
    186c:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =MAX0 - Timer_Count;
    186e:	c0 95       	com	r28
    1870:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	2c c1       	rjmp	.+600    	; 0x1ace <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_1024 :{
			if(Timer_Count < MAX0){
    1876:	6f 3f       	cpi	r22, 0xFF	; 255
    1878:	71 05       	cpc	r23, r1
    187a:	08 f0       	brcs	.+2      	; 0x187e <Timer_Start+0xde>
    187c:	11 c1       	rjmp	.+546    	; 0x1aa0 <Timer_Start+0x300>
				if(u8_sgv_TimerMode==1)
    187e:	80 91 fe 01 	lds	r24, 0x01FE
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	31 f4       	brne	.+12     	; 0x1892 <Timer_Start+0xf2>
				{	
				Timer_Stop(TIMER_CH0);
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR0 |=TIMER0_PRESCALER_1024_CONFIG;
    188c:	83 b7       	in	r24, 0x33	; 51
    188e:	85 60       	ori	r24, 0x05	; 5
    1890:	83 bf       	out	0x33, r24	; 51
				}
				TCNT0 =MAX0 - Timer_Count;
    1892:	c0 95       	com	r28
    1894:	c2 bf       	out	0x32, r28	; 50
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	1a c1       	rjmp	.+564    	; 0x1ace <Timer_Start+0x32e>
		break;
		}
		else if(u8_timer0_is_init > 1){
    189a:	82 30       	cpi	r24, 0x02	; 2
    189c:	08 f4       	brcc	.+2      	; 0x18a0 <Timer_Start+0x100>
    189e:	02 c1       	rjmp	.+516    	; 0x1aa4 <Timer_Start+0x304>
			Ret=MULTIPLE_INIT+TIMER_MODULE;
    18a0:	84 e2       	ldi	r24, 0x24	; 36
    18a2:	15 c1       	rjmp	.+554    	; 0x1ace <Timer_Start+0x32e>
			Ret=NOT_INIT+TIMER_MODULE;
			break;
			}
	}
	case TIMER_CH1:{
			if(u8_timer1_is_init == 1){
    18a4:	80 91 01 02 	lds	r24, 0x0201
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	09 f0       	breq	.+2      	; 0x18ae <Timer_Start+0x10e>
    18ac:	6c c0       	rjmp	.+216    	; 0x1986 <Timer_Start+0x1e6>
		switch(prescaler_value){
    18ae:	80 91 ff 01 	lds	r24, 0x01FF
    18b2:	84 30       	cpi	r24, 0x04	; 4
    18b4:	91 f1       	breq	.+100    	; 0x191a <Timer_Start+0x17a>
    18b6:	85 30       	cpi	r24, 0x05	; 5
    18b8:	30 f4       	brcc	.+12     	; 0x18c6 <Timer_Start+0x126>
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	51 f0       	breq	.+20     	; 0x18d2 <Timer_Start+0x132>
    18be:	82 30       	cpi	r24, 0x02	; 2
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <Timer_Start+0x124>
    18c2:	f2 c0       	rjmp	.+484    	; 0x1aa8 <Timer_Start+0x308>
    18c4:	18 c0       	rjmp	.+48     	; 0x18f6 <Timer_Start+0x156>
    18c6:	86 30       	cpi	r24, 0x06	; 6
    18c8:	d1 f1       	breq	.+116    	; 0x193e <Timer_Start+0x19e>
    18ca:	87 30       	cpi	r24, 0x07	; 7
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <Timer_Start+0x130>
    18ce:	ec c0       	rjmp	.+472    	; 0x1aa8 <Timer_Start+0x308>
    18d0:	48 c0       	rjmp	.+144    	; 0x1962 <Timer_Start+0x1c2>
		case TIMER_PRESCALER_NO :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    18d2:	80 91 fe 01 	lds	r24, 0x01FE
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	39 f4       	brne	.+14     	; 0x18e8 <Timer_Start+0x148>
				{
				Timer_Stop(TIMER_CH1);
    18da:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR1 |=TIMER_PRESCALER_NO;
    18de:	8e b5       	in	r24, 0x2e	; 46
    18e0:	9f b5       	in	r25, 0x2f	; 47
    18e2:	81 60       	ori	r24, 0x01	; 1
    18e4:	9f bd       	out	0x2f, r25	; 47
    18e6:	8e bd       	out	0x2e, r24	; 46
				}
				TCNT1 =MAX1 - Timer_Count;
    18e8:	d0 95       	com	r29
    18ea:	c1 95       	neg	r28
    18ec:	df 4f       	sbci	r29, 0xFF	; 255
    18ee:	dd bd       	out	0x2d, r29	; 45
    18f0:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    18f2:	80 e0       	ldi	r24, 0x00	; 0
				TCNT1 =MAX1 - Timer_Count;
			}else
			{
				Ret=E_NOK;
			}
			break;
    18f4:	ec c0       	rjmp	.+472    	; 0x1ace <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_8 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    18f6:	80 91 fe 01 	lds	r24, 0x01FE
    18fa:	81 30       	cpi	r24, 0x01	; 1
    18fc:	39 f4       	brne	.+14     	; 0x190c <Timer_Start+0x16c>
							{
				Timer_Stop(TIMER_CH1);
    18fe:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_8_CONFIG;
    1902:	8e b5       	in	r24, 0x2e	; 46
    1904:	9f b5       	in	r25, 0x2f	; 47
    1906:	82 60       	ori	r24, 0x02	; 2
    1908:	9f bd       	out	0x2f, r25	; 47
    190a:	8e bd       	out	0x2e, r24	; 46
							}
							
			TCNT1 =MAX1 - Timer_Count;
    190c:	d0 95       	com	r29
    190e:	c1 95       	neg	r28
    1910:	df 4f       	sbci	r29, 0xFF	; 255
    1912:	dd bd       	out	0x2d, r29	; 45
    1914:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    1916:	80 e0       	ldi	r24, 0x00	; 0
			TCNT1 =MAX1 - Timer_Count;
			}else
			{
				Ret= E_NOK;
			}
			break;
    1918:	da c0       	rjmp	.+436    	; 0x1ace <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_64 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    191a:	80 91 fe 01 	lds	r24, 0x01FE
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	39 f4       	brne	.+14     	; 0x1930 <Timer_Start+0x190>
			{
				Timer_Stop(TIMER_CH1);
    1922:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_64_CONFIG;
    1926:	8e b5       	in	r24, 0x2e	; 46
    1928:	9f b5       	in	r25, 0x2f	; 47
    192a:	83 60       	ori	r24, 0x03	; 3
    192c:	9f bd       	out	0x2f, r25	; 47
    192e:	8e bd       	out	0x2e, r24	; 46
			}
			TCNT1 =MAX1 - Timer_Count;
    1930:	d0 95       	com	r29
    1932:	c1 95       	neg	r28
    1934:	df 4f       	sbci	r29, 0xFF	; 255
    1936:	dd bd       	out	0x2d, r29	; 45
    1938:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    193a:	80 e0       	ldi	r24, 0x00	; 0
			TCNT1 =MAX1 - Timer_Count;
			}else
			{
				Ret= E_NOK;
			}
			break;
    193c:	c8 c0       	rjmp	.+400    	; 0x1ace <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_256 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    193e:	80 91 fe 01 	lds	r24, 0x01FE
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	39 f4       	brne	.+14     	; 0x1954 <Timer_Start+0x1b4>
						{
				Timer_Stop(TIMER_CH1);
    1946:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_256_CONFIG;
    194a:	8e b5       	in	r24, 0x2e	; 46
    194c:	9f b5       	in	r25, 0x2f	; 47
    194e:	84 60       	ori	r24, 0x04	; 4
    1950:	9f bd       	out	0x2f, r25	; 47
    1952:	8e bd       	out	0x2e, r24	; 46
						}
				TCNT1 =MAX1 - Timer_Count;
    1954:	d0 95       	com	r29
    1956:	c1 95       	neg	r28
    1958:	df 4f       	sbci	r29, 0xFF	; 255
    195a:	dd bd       	out	0x2d, r29	; 45
    195c:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    195e:	80 e0       	ldi	r24, 0x00	; 0
			}else
			{
				Ret= E_NOK;

			}
			break;
    1960:	b6 c0       	rjmp	.+364    	; 0x1ace <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_1024 :{
			if(Timer_Count < MAX1){
				if(u8_sgv_TimerMode==1)
    1962:	80 91 fe 01 	lds	r24, 0x01FE
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	39 f4       	brne	.+14     	; 0x1978 <Timer_Start+0x1d8>
				{
			Timer_Stop(TIMER_CH1);
    196a:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR1 |=TIMER1_PRESCALER_1024_CONFIG;
    196e:	8e b5       	in	r24, 0x2e	; 46
    1970:	9f b5       	in	r25, 0x2f	; 47
    1972:	85 60       	ori	r24, 0x05	; 5
    1974:	9f bd       	out	0x2f, r25	; 47
    1976:	8e bd       	out	0x2e, r24	; 46
				}
				TCNT1 =MAX1 - Timer_Count;
    1978:	d0 95       	com	r29
    197a:	c1 95       	neg	r28
    197c:	df 4f       	sbci	r29, 0xFF	; 255
    197e:	dd bd       	out	0x2d, r29	; 45
    1980:	cc bd       	out	0x2c, r28	; 44
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    1982:	80 e0       	ldi	r24, 0x00	; 0
			}else
			{
				Ret= E_NOK;

			}
			break;
    1984:	a4 c0       	rjmp	.+328    	; 0x1ace <Timer_Start+0x32e>
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
		break;
			}else if(u8_timer1_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
    1986:	82 30       	cpi	r24, 0x02	; 2
    1988:	08 f4       	brcc	.+2      	; 0x198c <Timer_Start+0x1ec>
    198a:	90 c0       	rjmp	.+288    	; 0x1aac <Timer_Start+0x30c>
    198c:	84 e2       	ldi	r24, 0x24	; 36
    198e:	9f c0       	rjmp	.+318    	; 0x1ace <Timer_Start+0x32e>
			break;}
			
	}
	case TIMER_CH2:
	{
		if(u8_timer2_is_init==1){
    1990:	80 91 02 02 	lds	r24, 0x0202
    1994:	81 30       	cpi	r24, 0x01	; 1
    1996:	09 f0       	breq	.+2      	; 0x199a <Timer_Start+0x1fa>
    1998:	73 c0       	rjmp	.+230    	; 0x1a80 <Timer_Start+0x2e0>
		switch(prescaler_value){
    199a:	80 91 ff 01 	lds	r24, 0x01FF
    199e:	84 30       	cpi	r24, 0x04	; 4
    19a0:	c9 f1       	breq	.+114    	; 0x1a14 <Timer_Start+0x274>
    19a2:	85 30       	cpi	r24, 0x05	; 5
    19a4:	40 f4       	brcc	.+16     	; 0x19b6 <Timer_Start+0x216>
    19a6:	82 30       	cpi	r24, 0x02	; 2
    19a8:	e9 f0       	breq	.+58     	; 0x19e4 <Timer_Start+0x244>
    19aa:	83 30       	cpi	r24, 0x03	; 3
    19ac:	48 f5       	brcc	.+82     	; 0x1a00 <Timer_Start+0x260>
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	09 f0       	breq	.+2      	; 0x19b4 <Timer_Start+0x214>
    19b2:	7e c0       	rjmp	.+252    	; 0x1ab0 <Timer_Start+0x310>
    19b4:	09 c0       	rjmp	.+18     	; 0x19c8 <Timer_Start+0x228>
    19b6:	86 30       	cpi	r24, 0x06	; 6
    19b8:	09 f4       	brne	.+2      	; 0x19bc <Timer_Start+0x21c>
    19ba:	48 c0       	rjmp	.+144    	; 0x1a4c <Timer_Start+0x2ac>
    19bc:	86 30       	cpi	r24, 0x06	; 6
    19be:	c0 f1       	brcs	.+112    	; 0x1a30 <Timer_Start+0x290>
    19c0:	87 30       	cpi	r24, 0x07	; 7
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <Timer_Start+0x226>
    19c4:	75 c0       	rjmp	.+234    	; 0x1ab0 <Timer_Start+0x310>
    19c6:	4f c0       	rjmp	.+158    	; 0x1a66 <Timer_Start+0x2c6>

		case TIMER_PRESCALER_NO :
		{

			if(Timer_Count < MAX0){
    19c8:	6f 3f       	cpi	r22, 0xFF	; 255
    19ca:	71 05       	cpc	r23, r1
    19cc:	08 f0       	brcs	.+2      	; 0x19d0 <Timer_Start+0x230>
    19ce:	72 c0       	rjmp	.+228    	; 0x1ab4 <Timer_Start+0x314>
				Timer_Stop(TIMER_CH2);
    19d0:	82 e0       	ldi	r24, 0x02	; 2
    19d2:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR2 |= TIMER_PRESCALER_NO;
    19d6:	85 b5       	in	r24, 0x25	; 37
    19d8:	81 60       	ori	r24, 0x01	; 1
    19da:	85 bd       	out	0x25, r24	; 37
				TCNT2 = MAX2 - Timer_Count;
    19dc:	c0 95       	com	r28
    19de:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	75 c0       	rjmp	.+234    	; 0x1ace <Timer_Start+0x32e>
			break;
		}

		case TIMER_PRESCALER_8 :
		{
			if(Timer_Count < MAX0)
    19e4:	6f 3f       	cpi	r22, 0xFF	; 255
    19e6:	71 05       	cpc	r23, r1
    19e8:	08 f0       	brcs	.+2      	; 0x19ec <Timer_Start+0x24c>
    19ea:	66 c0       	rjmp	.+204    	; 0x1ab8 <Timer_Start+0x318>
			{ 
				Timer_Stop(TIMER_CH2);
    19ec:	82 e0       	ldi	r24, 0x02	; 2
    19ee:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_8;
    19f2:	85 b5       	in	r24, 0x25	; 37
    19f4:	82 60       	ori	r24, 0x02	; 2
    19f6:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    19f8:	c0 95       	com	r28
    19fa:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	67 c0       	rjmp	.+206    	; 0x1ace <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_32:
		{
			if(Timer_Count < MAX1)
			{
				Timer_Stop(TIMER_CH2);
    1a00:	82 e0       	ldi	r24, 0x02	; 2
    1a02:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_32;
    1a06:	85 b5       	in	r24, 0x25	; 37
    1a08:	83 60       	ori	r24, 0x03	; 3
    1a0a:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    1a0c:	c0 95       	com	r28
    1a0e:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    1a10:	80 e0       	ldi	r24, 0x00	; 0
			else
			{
				Ret=E_NOK;
			}

			break;
    1a12:	5d c0       	rjmp	.+186    	; 0x1ace <Timer_Start+0x32e>
		}
		case TIMER_PRESCALER_64 :
		{
			if(Timer_Count < MAX2)
    1a14:	6f 3f       	cpi	r22, 0xFF	; 255
    1a16:	71 05       	cpc	r23, r1
    1a18:	08 f0       	brcs	.+2      	; 0x1a1c <Timer_Start+0x27c>
    1a1a:	50 c0       	rjmp	.+160    	; 0x1abc <Timer_Start+0x31c>
			{
				Timer_Stop(TIMER_CH2);
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_64;
    1a22:	85 b5       	in	r24, 0x25	; 37
    1a24:	84 60       	ori	r24, 0x04	; 4
    1a26:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    1a28:	c0 95       	com	r28
    1a2a:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	4f c0       	rjmp	.+158    	; 0x1ace <Timer_Start+0x32e>
				Ret=E_NOK;
			}
			break;
		}
		case TIMER_PRESCALER_128 :{
			if(Timer_Count < MAX2){
    1a30:	6f 3f       	cpi	r22, 0xFF	; 255
    1a32:	71 05       	cpc	r23, r1
    1a34:	08 f0       	brcs	.+2      	; 0x1a38 <Timer_Start+0x298>
    1a36:	44 c0       	rjmp	.+136    	; 0x1ac0 <Timer_Start+0x320>
				Timer_Stop(TIMER_CH2);
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR2 |= TIMER_PRESCALER_128;
    1a3e:	85 b5       	in	r24, 0x25	; 37
    1a40:	85 60       	ori	r24, 0x05	; 5
    1a42:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    1a44:	c0 95       	com	r28
    1a46:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	41 c0       	rjmp	.+130    	; 0x1ace <Timer_Start+0x32e>
			}
			break;
		}
		case TIMER_PRESCALER_256 :
		{
			if(Timer_Count < MAX2){
    1a4c:	6f 3f       	cpi	r22, 0xFF	; 255
    1a4e:	71 05       	cpc	r23, r1
    1a50:	c8 f5       	brcc	.+114    	; 0x1ac4 <Timer_Start+0x324>
				Timer_Stop(TIMER_CH2);
    1a52:	82 e0       	ldi	r24, 0x02	; 2
    1a54:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR2 |= TIMER_PRESCALER_256;
    1a58:	85 b5       	in	r24, 0x25	; 37
    1a5a:	86 60       	ori	r24, 0x06	; 6
    1a5c:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    1a5e:	c0 95       	com	r28
    1a60:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	34 c0       	rjmp	.+104    	; 0x1ace <Timer_Start+0x32e>
			}
			break;
		}
		case TIMER_PRESCALER_1024 :
		{
			if(Timer_Count < MAX2){
    1a66:	6f 3f       	cpi	r22, 0xFF	; 255
    1a68:	71 05       	cpc	r23, r1
    1a6a:	70 f5       	brcc	.+92     	; 0x1ac8 <Timer_Start+0x328>
				Timer_Stop(TIMER_CH2);
    1a6c:	82 e0       	ldi	r24, 0x02	; 2
    1a6e:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
				TCCR2 |=TIMER_PRESCALER_1024;
    1a72:	85 b5       	in	r24, 0x25	; 37
    1a74:	87 60       	ori	r24, 0x07	; 7
    1a76:	85 bd       	out	0x25, r24	; 37
				TCNT2 =MAX2 - Timer_Count;
    1a78:	c0 95       	com	r28
    1a7a:	c4 bd       	out	0x24, r28	; 36
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	27 c0       	rjmp	.+78     	; 0x1ace <Timer_Start+0x32e>
		break;
		}else if(u8_timer2_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
    1a80:	82 30       	cpi	r24, 0x02	; 2
    1a82:	20 f1       	brcs	.+72     	; 0x1acc <Timer_Start+0x32c>
    1a84:	84 e2       	ldi	r24, 0x24	; 36
    1a86:	23 c0       	rjmp	.+70     	; 0x1ace <Timer_Start+0x32e>
			break;
			}else{Ret=NOT_INIT+TIMER_MODULE;
			break;}
	}
	default:
		Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    1a88:	86 e3       	ldi	r24, 0x36	; 54
    1a8a:	21 c0       	rjmp	.+66     	; 0x1ace <Timer_Start+0x32e>
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		
		Ret=E_OK;
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	1f c0       	rjmp	.+62     	; 0x1ace <Timer_Start+0x32e>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	1d c0       	rjmp	.+58     	; 0x1ace <Timer_Start+0x32e>
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	1b c0       	rjmp	.+54     	; 0x1ace <Timer_Start+0x32e>
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	19 c0       	rjmp	.+50     	; 0x1ace <Timer_Start+0x32e>
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	17 c0       	rjmp	.+46     	; 0x1ace <Timer_Start+0x32e>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	15 c0       	rjmp	.+42     	; 0x1ace <Timer_Start+0x32e>
		else if(u8_timer0_is_init > 1){
			Ret=MULTIPLE_INIT+TIMER_MODULE;
			break;
		}
		else{
			Ret=NOT_INIT+TIMER_MODULE;
    1aa4:	82 e2       	ldi	r24, 0x22	; 34
    1aa6:	13 c0       	rjmp	.+38     	; 0x1ace <Timer_Start+0x32e>
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret= E_OK;
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	11 c0       	rjmp	.+34     	; 0x1ace <Timer_Start+0x32e>
		break;
			}else if(u8_timer1_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
			break;
			}else{Ret=NOT_INIT+TIMER_MODULE;
    1aac:	82 e2       	ldi	r24, 0x22	; 34
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <Timer_Start+0x32e>
		}
		default :
			Ret= INVALID_PRESCALER+TIMER_MODULE;
			break;
		}
		Ret=E_OK;
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	0d c0       	rjmp	.+26     	; 0x1ace <Timer_Start+0x32e>
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	0b c0       	rjmp	.+22     	; 0x1ace <Timer_Start+0x32e>
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	09 c0       	rjmp	.+18     	; 0x1ace <Timer_Start+0x32e>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	07 c0       	rjmp	.+14     	; 0x1ace <Timer_Start+0x32e>
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	05 c0       	rjmp	.+10     	; 0x1ace <Timer_Start+0x32e>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	03 c0       	rjmp	.+6      	; 0x1ace <Timer_Start+0x32e>
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	01 c0       	rjmp	.+2      	; 0x1ace <Timer_Start+0x32e>
		break;
		}else if(u8_timer2_is_init > 1){Ret=MULTIPLE_INIT+TIMER_MODULE;
			break;
			}else{Ret=NOT_INIT+TIMER_MODULE;
    1acc:	82 e2       	ldi	r24, 0x22	; 34
		Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
		break;
	}
	return Ret;

}
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	08 95       	ret

00001ad4 <Timer_Init>:
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	ec 01       	movw	r28, r24
if (Timer_cfg == 0)
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <Timer_Init+0xe>
    1ae0:	13 c1       	rjmp	.+550    	; 0x1d08 <Timer_Init+0x234>
{
	Ret=TIMER_MODULE+NULL_PTR;
}else
{
	
if(Timer_cfg->Timer_Mode==TIMER_MODE){u8_sgv_TimerMode=1;}else{u8_sgv_TimerMode=0;}
    1ae2:	99 81       	ldd	r25, Y+1	; 0x01
    1ae4:	99 23       	and	r25, r25
    1ae6:	21 f4       	brne	.+8      	; 0x1af0 <Timer_Init+0x1c>
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	80 93 fe 01 	sts	0x01FE, r24
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <Timer_Init+0x20>
    1af0:	10 92 fe 01 	sts	0x01FE, r1

prescaler_value=Timer_cfg->Timer_Prescaler;
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	80 93 ff 01 	sts	0x01FF, r24
switch (Timer_cfg->Timer_CH_NO) {
    1afa:	88 81       	ld	r24, Y
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <Timer_Init+0x2e>
    1b00:	5b c0       	rjmp	.+182    	; 0x1bb8 <Timer_Init+0xe4>
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	20 f0       	brcs	.+8      	; 0x1b0e <Timer_Init+0x3a>
    1b06:	82 30       	cpi	r24, 0x02	; 2
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <Timer_Init+0x38>
    1b0a:	00 c1       	rjmp	.+512    	; 0x1d0c <Timer_Init+0x238>
    1b0c:	af c0       	rjmp	.+350    	; 0x1c6c <Timer_Init+0x198>
/*************************************************************************/
/*                             TIMER 0                                   */
/*************************************************************************/
case TIMER_CH0:
{
	u8_timer0_is_init+=1;
    1b0e:	80 91 00 02 	lds	r24, 0x0200
    1b12:	8f 5f       	subi	r24, 0xFF	; 255
    1b14:	80 93 00 02 	sts	0x0200, r24
	
	TCCR0 |=T0_NORMAL_MODE;
    1b18:	83 b7       	in	r24, 0x33	; 51
    1b1a:	83 bf       	out	0x33, r24	; 51

	switch (Timer_cfg->Timer_Mode) {
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	81 30       	cpi	r24, 0x01	; 1
    1b20:	c9 f0       	breq	.+50     	; 0x1b54 <Timer_Init+0x80>
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	20 f0       	brcs	.+8      	; 0x1b2e <Timer_Init+0x5a>
    1b26:	82 30       	cpi	r24, 0x02	; 2
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <Timer_Init+0x58>
    1b2a:	f2 c0       	rjmp	.+484    	; 0x1d10 <Timer_Init+0x23c>
    1b2c:	2c c0       	rjmp	.+88     	; 0x1b86 <Timer_Init+0xb2>
	case TIMER_MODE:
	{
		switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	88 23       	and	r24, r24
    1b32:	21 f0       	breq	.+8      	; 0x1b3c <Timer_Init+0x68>
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <Timer_Init+0x66>
    1b38:	ed c0       	rjmp	.+474    	; 0x1d14 <Timer_Init+0x240>
    1b3a:	05 c0       	rjmp	.+10     	; 0x1b46 <Timer_Init+0x72>
		{
		case TIMER_POLLING_MODE:
		{/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
    1b3c:	89 b7       	in	r24, 0x39	; 57
    1b3e:	8c 7f       	andi	r24, 0xFC	; 252
    1b40:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1b42:	10 e0       	ldi	r17, 0x00	; 0
		{
		case TIMER_POLLING_MODE:
		{/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
			break;
    1b44:	fa c0       	rjmp	.+500    	; 0x1d3a <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{ /*Enable Global INTERRUPT
                                    Enable Timer0 interrupt
		 */
			G_interrupt_Enable();
    1b46:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
			TIMSK |= T0_INTERRUPT_NORMAL;
    1b4a:	89 b7       	in	r24, 0x39	; 57
    1b4c:	81 60       	ori	r24, 0x01	; 1
    1b4e:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1b50:	10 e0       	ldi	r17, 0x00	; 0
		{ /*Enable Global INTERRUPT
                                    Enable Timer0 interrupt
		 */
			G_interrupt_Enable();
			TIMSK |= T0_INTERRUPT_NORMAL;
			break;
    1b52:	f3 c0       	rjmp	.+486    	; 0x1d3a <Timer_Init+0x266>
	/*                             TIMER 0 As a COUNTER_RISING_MODE          */
	/*************************************************************************/

	case COUNTER_RISING_MODE:
	{
		Timer_Stop(TIMER_CH0);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
		TCCR0 |=T0_COUNTER_RISING_MODE_CONFIG;
    1b5a:	83 b7       	in	r24, 0x33	; 51
    1b5c:	8d 60       	ori	r24, 0x0D	; 13
    1b5e:	83 bf       	out	0x33, r24	; 51
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) 
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	88 23       	and	r24, r24
    1b64:	21 f0       	breq	.+8      	; 0x1b6e <Timer_Init+0x9a>
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <Timer_Init+0x98>
    1b6a:	d6 c0       	rjmp	.+428    	; 0x1d18 <Timer_Init+0x244>
    1b6c:	05 c0       	rjmp	.+10     	; 0x1b78 <Timer_Init+0xa4>
		
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
    1b6e:	89 b7       	in	r24, 0x39	; 57
    1b70:	8c 7f       	andi	r24, 0xFC	; 252
    1b72:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1b74:	10 e0       	ldi	r17, 0x00	; 0
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T0 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T0_INTERRUPT_DISABLE;
			break;
    1b76:	e1 c0       	rjmp	.+450    	; 0x1d3a <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{	/*Enable Global INTERRUPT
                                              Enable Timer0 interrupt
			 */
			G_interrupt_Enable();
    1b78:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
			TIMSK |= T0_INTERRUPT_NORMAL;
    1b7c:	89 b7       	in	r24, 0x39	; 57
    1b7e:	81 60       	ori	r24, 0x01	; 1
    1b80:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1b82:	10 e0       	ldi	r17, 0x00	; 0
		{	/*Enable Global INTERRUPT
                                              Enable Timer0 interrupt
			 */
			G_interrupt_Enable();
			TIMSK |= T0_INTERRUPT_NORMAL;
			break;
    1b84:	da c0       	rjmp	.+436    	; 0x1d3a <Timer_Init+0x266>
		/*                             TIMER 0 As a COUNTER_FALLING_MODE         */
		/*************************************************************************/
	
		case COUNTER_FALLING_MODE:
		{
			Timer_Stop(TIMER_CH0);
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
			TCCR0 |=T0_COUNTER_FALLING_MODE_CONFIG;
    1b8c:	83 b7       	in	r24, 0x33	; 51
    1b8e:	8c 60       	ori	r24, 0x0C	; 12
    1b90:	83 bf       	out	0x33, r24	; 51
			switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	88 23       	and	r24, r24
    1b96:	21 f0       	breq	.+8      	; 0x1ba0 <Timer_Init+0xcc>
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	09 f0       	breq	.+2      	; 0x1b9e <Timer_Init+0xca>
    1b9c:	bf c0       	rjmp	.+382    	; 0x1d1c <Timer_Init+0x248>
    1b9e:	05 c0       	rjmp	.+10     	; 0x1baa <Timer_Init+0xd6>
			case TIMER_POLLING_MODE:
			{

				/*Disable interrupts for T0 without effecting any other timer*/
				/*without Disabling Global interrupt*/
				TIMSK &=T0_INTERRUPT_DISABLE;
    1ba0:	89 b7       	in	r24, 0x39	; 57
    1ba2:	8c 7f       	andi	r24, 0xFC	; 252
    1ba4:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1ba6:	10 e0       	ldi	r17, 0x00	; 0

				/*Disable interrupts for T0 without effecting any other timer*/
				/*without Disabling Global interrupt*/
				TIMSK &=T0_INTERRUPT_DISABLE;

				break;
    1ba8:	c8 c0       	rjmp	.+400    	; 0x1d3a <Timer_Init+0x266>
			case TIMER_INTERRUPT_MODE:
			{
				/*Enable Global INTERRUPT
                                                    Enable Timer0 interrupt
				 */
				G_interrupt_Enable();
    1baa:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
				TIMSK |= T0_INTERRUPT_NORMAL;
    1bae:	89 b7       	in	r24, 0x39	; 57
    1bb0:	81 60       	ori	r24, 0x01	; 1
    1bb2:	89 bf       	out	0x39, r24	; 57
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1bb4:	10 e0       	ldi	r17, 0x00	; 0
                                                    Enable Timer0 interrupt
				 */
				G_interrupt_Enable();
				TIMSK |= T0_INTERRUPT_NORMAL;

				break;
    1bb6:	c1 c0       	rjmp	.+386    	; 0x1d3a <Timer_Init+0x266>
/*                             TIMER 1                                   */
/*************************************************************************/

case TIMER_CH1:
{
u8_timer1_is_init+=1;
    1bb8:	80 91 01 02 	lds	r24, 0x0201
    1bbc:	8f 5f       	subi	r24, 0xFF	; 255
    1bbe:	80 93 01 02 	sts	0x0201, r24
	switch (Timer_cfg->Timer_Mode)
    1bc2:	91 30       	cpi	r25, 0x01	; 1
    1bc4:	e9 f0       	breq	.+58     	; 0x1c00 <Timer_Init+0x12c>
    1bc6:	91 30       	cpi	r25, 0x01	; 1
    1bc8:	20 f0       	brcs	.+8      	; 0x1bd2 <Timer_Init+0xfe>
    1bca:	92 30       	cpi	r25, 0x02	; 2
    1bcc:	09 f0       	breq	.+2      	; 0x1bd0 <Timer_Init+0xfc>
    1bce:	a8 c0       	rjmp	.+336    	; 0x1d20 <Timer_Init+0x24c>
    1bd0:	32 c0       	rjmp	.+100    	; 0x1c36 <Timer_Init+0x162>
	{
	case TIMER_MODE:
	{
		TCCR1 |= T1_NORMAL_MODE_CONFIG;
    1bd2:	8e b5       	in	r24, 0x2e	; 46
    1bd4:	9f b5       	in	r25, 0x2f	; 47
    1bd6:	9f bd       	out	0x2f, r25	; 47
    1bd8:	8e bd       	out	0x2e, r24	; 46
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	88 23       	and	r24, r24
    1bde:	21 f0       	breq	.+8      	; 0x1be8 <Timer_Init+0x114>
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	09 f0       	breq	.+2      	; 0x1be6 <Timer_Init+0x112>
    1be4:	9f c0       	rjmp	.+318    	; 0x1d24 <Timer_Init+0x250>
    1be6:	05 c0       	rjmp	.+10     	; 0x1bf2 <Timer_Init+0x11e>
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
    1be8:	89 b7       	in	r24, 0x39	; 57
    1bea:	83 7c       	andi	r24, 0xC3	; 195
    1bec:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1bee:	10 e0       	ldi	r17, 0x00	; 0
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;

			break;
    1bf0:	a4 c0       	rjmp	.+328    	; 0x1d3a <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    1bf2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
			TIMSK |=T1_INTERRUPT_NORMAL;
    1bf6:	89 b7       	in	r24, 0x39	; 57
    1bf8:	84 60       	ori	r24, 0x04	; 4
    1bfa:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1bfc:	10 e0       	ldi	r17, 0x00	; 0
			G_interrupt_Enable();
			TIMSK |=T1_INTERRUPT_NORMAL;
			/*Enable Global INTERRUPT
                Enable Timer0 interrupt
			 */
			break;
    1bfe:	9d c0       	rjmp	.+314    	; 0x1d3a <Timer_Init+0x266>
		}
		break;
	}
	case COUNTER_RISING_MODE:
	{
		Timer_Stop(TIMER_CH1);
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
		TCCR1|=T1_COUNTER_RISING_MODE_CONFIG;
    1c06:	8e b5       	in	r24, 0x2e	; 46
    1c08:	9f b5       	in	r25, 0x2f	; 47
    1c0a:	87 60       	ori	r24, 0x07	; 7
    1c0c:	9f bd       	out	0x2f, r25	; 47
    1c0e:	8e bd       	out	0x2e, r24	; 46

		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	88 23       	and	r24, r24
    1c14:	21 f0       	breq	.+8      	; 0x1c1e <Timer_Init+0x14a>
    1c16:	81 30       	cpi	r24, 0x01	; 1
    1c18:	09 f0       	breq	.+2      	; 0x1c1c <Timer_Init+0x148>
    1c1a:	86 c0       	rjmp	.+268    	; 0x1d28 <Timer_Init+0x254>
    1c1c:	05 c0       	rjmp	.+10     	; 0x1c28 <Timer_Init+0x154>
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
    1c1e:	89 b7       	in	r24, 0x39	; 57
    1c20:	83 7c       	andi	r24, 0xC3	; 195
    1c22:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1c24:	10 e0       	ldi	r17, 0x00	; 0
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;

			break;
    1c26:	89 c0       	rjmp	.+274    	; 0x1d3a <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    1c28:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
			TIMSK |=T1_INTERRUPT_NORMAL;
    1c2c:	89 b7       	in	r24, 0x39	; 57
    1c2e:	84 60       	ori	r24, 0x04	; 4
    1c30:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1c32:	10 e0       	ldi	r17, 0x00	; 0
			G_interrupt_Enable();
			TIMSK |=T1_INTERRUPT_NORMAL;
			/*Enable Global INTERRUPT
                Enable Timer0 interrupt
			 */
			break;
    1c34:	82 c0       	rjmp	.+260    	; 0x1d3a <Timer_Init+0x266>
		}
		break;
	}
	case COUNTER_FALLING_MODE:
	{
		Timer_Stop(TIMER_CH1);
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	0e 94 b6 0b 	call	0x176c	; 0x176c <Timer_Stop>
		TCCR1|=T1_COUNTER_FALLING_MODE_CONFIG;
    1c3c:	8e b5       	in	r24, 0x2e	; 46
    1c3e:	9f b5       	in	r25, 0x2f	; 47
    1c40:	86 60       	ori	r24, 0x06	; 6
    1c42:	9f bd       	out	0x2f, r25	; 47
    1c44:	8e bd       	out	0x2e, r24	; 46
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	88 23       	and	r24, r24
    1c4a:	21 f0       	breq	.+8      	; 0x1c54 <Timer_Init+0x180>
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <Timer_Init+0x17e>
    1c50:	6d c0       	rjmp	.+218    	; 0x1d2c <Timer_Init+0x258>
    1c52:	05 c0       	rjmp	.+10     	; 0x1c5e <Timer_Init+0x18a>
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
    1c54:	89 b7       	in	r24, 0x39	; 57
    1c56:	83 7c       	andi	r24, 0xC3	; 195
    1c58:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1c5a:	10 e0       	ldi	r17, 0x00	; 0
		case TIMER_POLLING_MODE:
		{
			/*Disable interrupts for T1 without effecting any other timer*/
			/*without Disabling Global interrupt*/
			TIMSK &=T1_INTERRUPT_DISABLE;
			break;
    1c5c:	6e c0       	rjmp	.+220    	; 0x1d3a <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    1c5e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
			TIMSK |=T1_INTERRUPT_NORMAL;
    1c62:	89 b7       	in	r24, 0x39	; 57
    1c64:	84 60       	ori	r24, 0x04	; 4
    1c66:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1c68:	10 e0       	ldi	r17, 0x00	; 0
			TIMSK |=T1_INTERRUPT_NORMAL;
			/*Enable Global INTERRUPT
                Enable Timer0 interrupt
			 */

			break;
    1c6a:	67 c0       	rjmp	.+206    	; 0x1d3a <Timer_Init+0x266>
/*************************************************************************/
/*                             TIMER 2                                   */
/*************************************************************************/

case TIMER_CH2:
{u8_timer2_is_init+=1;
    1c6c:	80 91 02 02 	lds	r24, 0x0202
    1c70:	8f 5f       	subi	r24, 0xFF	; 255
    1c72:	80 93 02 02 	sts	0x0202, r24
	TCCR2 |=T2_NORMAL_MODE_CONFIG;
    1c76:	85 b5       	in	r24, 0x25	; 37
    1c78:	85 bd       	out	0x25, r24	; 37
	switch (Timer_cfg->Timer_Mode) 
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	c9 f0       	breq	.+50     	; 0x1cb2 <Timer_Init+0x1de>
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	20 f0       	brcs	.+8      	; 0x1c8c <Timer_Init+0x1b8>
    1c84:	82 30       	cpi	r24, 0x02	; 2
    1c86:	09 f0       	breq	.+2      	; 0x1c8a <Timer_Init+0x1b6>
    1c88:	53 c0       	rjmp	.+166    	; 0x1d30 <Timer_Init+0x25c>
    1c8a:	28 c0       	rjmp	.+80     	; 0x1cdc <Timer_Init+0x208>
	{
	case TIMER_MODE:
	{
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	88 23       	and	r24, r24
    1c90:	21 f0       	breq	.+8      	; 0x1c9a <Timer_Init+0x1c6>
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <Timer_Init+0x1c4>
    1c96:	4e c0       	rjmp	.+156    	; 0x1d34 <Timer_Init+0x260>
    1c98:	05 c0       	rjmp	.+10     	; 0x1ca4 <Timer_Init+0x1d0>
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;
    1c9a:	89 b7       	in	r24, 0x39	; 57
    1c9c:	8f 73       	andi	r24, 0x3F	; 63
    1c9e:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1ca0:	10 e0       	ldi	r17, 0x00	; 0
	{
		switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;
			break;
    1ca2:	4b c0       	rjmp	.+150    	; 0x1d3a <Timer_Init+0x266>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    1ca4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
			TIMSK|=T2_INTERRUPT_NORMAL;
    1ca8:	89 b7       	in	r24, 0x39	; 57
    1caa:	80 6c       	ori	r24, 0xC0	; 192
    1cac:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1cae:	10 e0       	ldi	r17, 0x00	; 0
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
			TIMSK|=T2_INTERRUPT_NORMAL;

			break;
    1cb0:	44 c0       	rjmp	.+136    	; 0x1d3a <Timer_Init+0x266>
		}
		break;
	}
	case COUNTER_RISING_MODE:
	{
		ASSR |=0x08;
    1cb2:	82 b5       	in	r24, 0x22	; 34
    1cb4:	88 60       	ori	r24, 0x08	; 8
    1cb6:	82 bd       	out	0x22, r24	; 34
		switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	88 23       	and	r24, r24
    1cbc:	19 f0       	breq	.+6      	; 0x1cc4 <Timer_Init+0x1f0>
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	79 f4       	brne	.+30     	; 0x1ce0 <Timer_Init+0x20c>
    1cc2:	05 c0       	rjmp	.+10     	; 0x1cce <Timer_Init+0x1fa>
		{
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;
    1cc4:	89 b7       	in	r24, 0x39	; 57
    1cc6:	8f 73       	andi	r24, 0x3F	; 63
    1cc8:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1cca:	10 e0       	ldi	r17, 0x00	; 0
		{
		case TIMER_POLLING_MODE:
		{
			TIMSK &= T2_INTERRUPT_DISABLE;

			break;
    1ccc:	0a c0       	rjmp	.+20     	; 0x1ce2 <Timer_Init+0x20e>
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
    1cce:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
			TIMSK|=T2_INTERRUPT_NORMAL;
    1cd2:	89 b7       	in	r24, 0x39	; 57
    1cd4:	80 6c       	ori	r24, 0xC0	; 192
    1cd6:	89 bf       	out	0x39, r24	; 57
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1cd8:	10 e0       	ldi	r17, 0x00	; 0
		}
		case TIMER_INTERRUPT_MODE:
		{
			G_interrupt_Enable();
			TIMSK|=T2_INTERRUPT_NORMAL;
			break;
    1cda:	03 c0       	rjmp	.+6      	; 0x1ce2 <Timer_Init+0x20e>
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1cdc:	10 e0       	ldi	r17, 0x00	; 0
    1cde:	01 c0       	rjmp	.+2      	; 0x1ce2 <Timer_Init+0x20e>
			TIMSK|=T2_INTERRUPT_NORMAL;
			break;
		}
		
		default:
			Ret=INVALID_VALUE+TIMER_MODULE;
    1ce0:	10 e3       	ldi	r17, 0x30	; 48
		}
	}

	case COUNTER_FALLING_MODE:
		{
			ASSR |=0x08;
    1ce2:	82 b5       	in	r24, 0x22	; 34
    1ce4:	88 60       	ori	r24, 0x08	; 8
    1ce6:	82 bd       	out	0x22, r24	; 34
			switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	88 23       	and	r24, r24
    1cec:	19 f0       	breq	.+6      	; 0x1cf4 <Timer_Init+0x220>
    1cee:	81 30       	cpi	r24, 0x01	; 1
    1cf0:	19 f5       	brne	.+70     	; 0x1d38 <Timer_Init+0x264>
    1cf2:	04 c0       	rjmp	.+8      	; 0x1cfc <Timer_Init+0x228>
			{
			case TIMER_POLLING_MODE:
			{
				TIMSK &= T2_INTERRUPT_DISABLE;
    1cf4:	89 b7       	in	r24, 0x39	; 57
    1cf6:	8f 73       	andi	r24, 0x3F	; 63
    1cf8:	89 bf       	out	0x39, r24	; 57

				break;
    1cfa:	1f c0       	rjmp	.+62     	; 0x1d3a <Timer_Init+0x266>
			}
			case TIMER_INTERRUPT_MODE:
			{
				G_interrupt_Enable();
    1cfc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
				TIMSK|=T2_INTERRUPT_NORMAL;
    1d00:	89 b7       	in	r24, 0x39	; 57
    1d02:	80 6c       	ori	r24, 0xC0	; 192
    1d04:	89 bf       	out	0x39, r24	; 57
				break;
    1d06:	19 c0       	rjmp	.+50     	; 0x1d3a <Timer_Init+0x266>

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
if (Timer_cfg == 0)
{
	Ret=TIMER_MODULE+NULL_PTR;
    1d08:	10 e2       	ldi	r17, 0x20	; 32
    1d0a:	17 c0       	rjmp	.+46     	; 0x1d3a <Timer_Init+0x266>
static uint8_t u8_timer0_is_init=0;
static uint8_t u8_timer1_is_init=0;
static uint8_t u8_timer2_is_init=0;

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1d0c:	10 e0       	ldi	r17, 0x00	; 0
    1d0e:	15 c0       	rjmp	.+42     	; 0x1d3a <Timer_Init+0x266>
		}
		default:
			Ret+=INVALID_TIMER_MODE+TIMER_MODULE;
			break;
	}
	Ret=E_OK;
    1d10:	10 e0       	ldi	r17, 0x00	; 0
    1d12:	13 c0       	rjmp	.+38     	; 0x1d3a <Timer_Init+0x266>
    1d14:	10 e0       	ldi	r17, 0x00	; 0
    1d16:	11 c0       	rjmp	.+34     	; 0x1d3a <Timer_Init+0x266>
    1d18:	10 e0       	ldi	r17, 0x00	; 0
    1d1a:	0f c0       	rjmp	.+30     	; 0x1d3a <Timer_Init+0x266>
    1d1c:	10 e0       	ldi	r17, 0x00	; 0
    1d1e:	0d c0       	rjmp	.+26     	; 0x1d3a <Timer_Init+0x266>
			break;
		}
		break;
	}
	default :
		Ret=INVALID_TIMER_MODE+TIMER_MODULE;
    1d20:	14 e3       	ldi	r17, 0x34	; 52
    1d22:	0b c0       	rjmp	.+22     	; 0x1d3a <Timer_Init+0x266>
                Enable Timer0 interrupt
			 */
			break;
		}
		default :
			Ret=INVALID_VALUE+TIMER_MODULE;
    1d24:	10 e3       	ldi	r17, 0x30	; 48
    1d26:	09 c0       	rjmp	.+18     	; 0x1d3a <Timer_Init+0x266>
                Enable Timer0 interrupt
			 */
			break;
		}
		default:
			Ret=INVALID_VALUE+TIMER_MODULE;
    1d28:	10 e3       	ldi	r17, 0x30	; 48
    1d2a:	07 c0       	rjmp	.+14     	; 0x1d3a <Timer_Init+0x266>
			 */

			break;
		}
		default :
			Ret=INVALID_VALUE+TIMER_MODULE;
    1d2c:	10 e3       	ldi	r17, 0x30	; 48
    1d2e:	05 c0       	rjmp	.+10     	; 0x1d3a <Timer_Init+0x266>


	}
	
	default :
		Ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    1d30:	16 e3       	ldi	r17, 0x36	; 54
    1d32:	03 c0       	rjmp	.+6      	; 0x1d3a <Timer_Init+0x266>
			TIMSK|=T2_INTERRUPT_NORMAL;

			break;
		}
		default :
			Ret=INVALID_VALUE+TIMER_MODULE;
    1d34:	10 e3       	ldi	r17, 0x30	; 48
    1d36:	01 c0       	rjmp	.+2      	; 0x1d3a <Timer_Init+0x266>
				TIMSK|=T2_INTERRUPT_NORMAL;
				break;
			}

			default :
				Ret=INVALID_VALUE+TIMER_MODULE;
    1d38:	10 e3       	ldi	r17, 0x30	; 48
}
}
}
return Ret;

}
    1d3a:	81 2f       	mov	r24, r17
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	08 95       	ret

00001d44 <Timer_GetStatus>:
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
	if(Data){
    1d44:	61 15       	cp	r22, r1
    1d46:	71 05       	cpc	r23, r1
    1d48:	f9 f0       	breq	.+62     	; 0x1d88 <Timer_GetStatus+0x44>
	switch (Timer_CH_NO) {
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	59 f0       	breq	.+22     	; 0x1d64 <Timer_GetStatus+0x20>
    1d4e:	81 30       	cpi	r24, 0x01	; 1
    1d50:	18 f0       	brcs	.+6      	; 0x1d58 <Timer_GetStatus+0x14>
    1d52:	82 30       	cpi	r24, 0x02	; 2
    1d54:	d9 f4       	brne	.+54     	; 0x1d8c <Timer_GetStatus+0x48>
    1d56:	0e c0       	rjmp	.+28     	; 0x1d74 <Timer_GetStatus+0x30>
	case TIMER_CH0:
	{
		*Data =((TIFR>>TOV0)&1);
    1d58:	88 b7       	in	r24, 0x38	; 56
    1d5a:	81 70       	andi	r24, 0x01	; 1
    1d5c:	fb 01       	movw	r30, r22
    1d5e:	80 83       	st	Z, r24
 * Return: The error status of the function.
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
    1d60:	80 e0       	ldi	r24, 0x00	; 0
	if(Data){
	switch (Timer_CH_NO) {
	case TIMER_CH0:
	{
		*Data =((TIFR>>TOV0)&1);
	break;
    1d62:	08 95       	ret
	}
	case TIMER_CH1:
	{
		*Data =((TIFR>>TOV1)&1);
    1d64:	88 b7       	in	r24, 0x38	; 56
    1d66:	86 95       	lsr	r24
    1d68:	86 95       	lsr	r24
    1d6a:	81 70       	andi	r24, 0x01	; 1
    1d6c:	fb 01       	movw	r30, r22
    1d6e:	80 83       	st	Z, r24
 * Return: The error status of the function.
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
    1d70:	80 e0       	ldi	r24, 0x00	; 0
	break;
	}
	case TIMER_CH1:
	{
		*Data =((TIFR>>TOV1)&1);
		break;
    1d72:	08 95       	ret
	}
	case TIMER_CH2:
	{
		*Data =((TIFR>>TOV2)&1);
    1d74:	88 b7       	in	r24, 0x38	; 56
    1d76:	82 95       	swap	r24
    1d78:	86 95       	lsr	r24
    1d7a:	86 95       	lsr	r24
    1d7c:	83 70       	andi	r24, 0x03	; 3
    1d7e:	81 70       	andi	r24, 0x01	; 1
    1d80:	fb 01       	movw	r30, r22
    1d82:	80 83       	st	Z, r24
 * Return: The error status of the function.
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{uint8_t ret=0;
    1d84:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	case TIMER_CH2:
	{
		*Data =((TIFR>>TOV2)&1);
		break;
    1d86:	08 95       	ret
	}
	default :
		ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
	}
	}else{ret=NULL_PTR+TIMER_MODULE;}
    1d88:	80 e2       	ldi	r24, 0x20	; 32
    1d8a:	08 95       	ret
	{
		*Data =((TIFR>>TOV2)&1);
		break;
	}
	default :
		ret=INVALID_TIMER_CHANNEL+TIMER_MODULE;
    1d8c:	86 e3       	ldi	r24, 0x36	; 54
	}
	}else{ret=NULL_PTR+TIMER_MODULE;}
	return ret;
}
    1d8e:	08 95       	ret

00001d90 <Timer_GetValue>:
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
	if(Data){
    1d90:	61 15       	cp	r22, r1
    1d92:	71 05       	cpc	r23, r1
    1d94:	d1 f0       	breq	.+52     	; 0x1dca <Timer_GetValue+0x3a>
	switch (Timer_CH_NO) {
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	59 f0       	breq	.+22     	; 0x1db0 <Timer_GetValue+0x20>
    1d9a:	81 30       	cpi	r24, 0x01	; 1
    1d9c:	18 f0       	brcs	.+6      	; 0x1da4 <Timer_GetValue+0x14>
    1d9e:	82 30       	cpi	r24, 0x02	; 2
    1da0:	b1 f4       	brne	.+44     	; 0x1dce <Timer_GetValue+0x3e>
    1da2:	0d c0       	rjmp	.+26     	; 0x1dbe <Timer_GetValue+0x2e>
	case TIMER_CH0:
	{
		*Data =TCNT0;
    1da4:	82 b7       	in	r24, 0x32	; 50
    1da6:	fb 01       	movw	r30, r22
    1da8:	80 83       	st	Z, r24
    1daa:	11 82       	std	Z+1, r1	; 0x01
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
    1dac:	80 e0       	ldi	r24, 0x00	; 0
	if(Data){
	switch (Timer_CH_NO) {
	case TIMER_CH0:
	{
		*Data =TCNT0;
		break;
    1dae:	08 95       	ret
	}
	case TIMER_CH1:
	{
		*Data =TCNT1;
    1db0:	8c b5       	in	r24, 0x2c	; 44
    1db2:	9d b5       	in	r25, 0x2d	; 45
    1db4:	fb 01       	movw	r30, r22
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	80 83       	st	Z, r24
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
    1dba:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	case TIMER_CH1:
	{
		*Data =TCNT1;
		break;
    1dbc:	08 95       	ret
	}
	case TIMER_CH2:
	{
		*Data =TCNT2;
    1dbe:	84 b5       	in	r24, 0x24	; 36
    1dc0:	fb 01       	movw	r30, r22
    1dc2:	80 83       	st	Z, r24
    1dc4:	11 82       	std	Z+1, r1	; 0x01
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
	uint8_t Ret=0;
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	case TIMER_CH2:
	{
		*Data =TCNT2;
		break;
    1dc8:	08 95       	ret
		Ret= INVALID_TIMER_CHANNEL+TIMER_MODULE;
		break;
	}
	}
	else{
		Ret=NULL_PTR+TIMER_MODULE;
    1dca:	80 e2       	ldi	r24, 0x20	; 32
    1dcc:	08 95       	ret
	{
		*Data =TCNT2;
		break;
	}
	default :
		Ret= INVALID_TIMER_CHANNEL+TIMER_MODULE;
    1dce:	86 e3       	ldi	r24, 0x36	; 54
	else{
		Ret=NULL_PTR+TIMER_MODULE;
		}
	return Ret;

}
    1dd0:	08 95       	ret

00001dd2 <SOS_Init>:
//static uint8_t u8_is_Started=0;
uint8_t Start_status[Buffer_Size];
static uint8_t stu8_increment=0;

ERROR_STATUS SOS_Init (const TMU_ConfigType * ConfigPtr )
{uint8_t u8_channel_ID=ConfigPtr->u8_Timer_channel;
    1dd2:	0f 93       	push	r16
    1dd4:	1f 93       	push	r17
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	ec 01       	movw	r28, r24
    1ddc:	09 81       	ldd	r16, Y+1	; 0x01
uint8_t ret=E_OK;
/*************************************************************************/
/*			Intializ the required timer identified by the user			 */
/************************************************************************/
u8_Is_Intialized++;
    1dde:	80 91 05 02 	lds	r24, 0x0205
    1de2:	8f 5f       	subi	r24, 0xFF	; 255
    1de4:	80 93 05 02 	sts	0x0205, r24

if(ConfigPtr==NULL){ret=TMU_MODULE+NULL_PTR;}
    1de8:	20 97       	sbiw	r28, 0x00	; 0
    1dea:	11 f0       	breq	.+4      	; 0x1df0 <SOS_Init+0x1e>
uint8_t Start_status[Buffer_Size];
static uint8_t stu8_increment=0;

ERROR_STATUS SOS_Init (const TMU_ConfigType * ConfigPtr )
{uint8_t u8_channel_ID=ConfigPtr->u8_Timer_channel;
uint8_t ret=E_OK;
    1dec:	10 e0       	ldi	r17, 0x00	; 0
    1dee:	01 c0       	rjmp	.+2      	; 0x1df2 <SOS_Init+0x20>
/*************************************************************************/
/*			Intializ the required timer identified by the user			 */
/************************************************************************/
u8_Is_Intialized++;

if(ConfigPtr==NULL){ret=TMU_MODULE+NULL_PTR;}
    1df0:	1a e2       	ldi	r17, 0x2A	; 42
switch(u8_channel_ID)
    1df2:	00 23       	and	r16, r16
    1df4:	19 f0       	breq	.+6      	; 0x1dfc <SOS_Init+0x2a>
    1df6:	02 30       	cpi	r16, 0x02	; 2
    1df8:	79 f4       	brne	.+30     	; 0x1e18 <SOS_Init+0x46>
    1dfa:	07 c0       	rjmp	.+14     	; 0x1e0a <SOS_Init+0x38>
{
	case TIMER_CH0:
			G_interrupt_Enable();
    1dfc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
			Timer_Init(&Timer_Configuration0);
    1e00:	8c e8       	ldi	r24, 0x8C	; 140
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Timer_Init>
				break;
    1e08:	08 c0       	rjmp	.+16     	; 0x1e1a <SOS_Init+0x48>
	case TIMER_CH2:
		G_interrupt_Enable();
    1e0a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
		Timer_Init(&Timer_Configuration2);
    1e0e:	82 e9       	ldi	r24, 0x92	; 146
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Timer_Init>
			break;
    1e16:	01 c0       	rjmp	.+2      	; 0x1e1a <SOS_Init+0x48>
	default:
			ret+=E_NOK;
    1e18:	1f 5f       	subi	r17, 0xFF	; 255

/*************************************************************************/
/*Intializ the required timer identified by the user using required prescaler  */
/************************************************************************/

switch(ConfigPtr->u8_resolution)
    1e1a:	88 81       	ld	r24, Y
    1e1c:	81 30       	cpi	r24, 0x01	; 1
    1e1e:	99 f4       	brne	.+38     	; 0x1e46 <SOS_Init+0x74>
{
	case TIMER_RESOLUTION_1_MS:
	{
		switch(u8_channel_ID)
    1e20:	00 23       	and	r16, r16
    1e22:	19 f0       	breq	.+6      	; 0x1e2a <SOS_Init+0x58>
    1e24:	02 30       	cpi	r16, 0x02	; 2
    1e26:	69 f4       	brne	.+26     	; 0x1e42 <SOS_Init+0x70>
    1e28:	06 c0       	rjmp	.+12     	; 0x1e36 <SOS_Init+0x64>
		{
			case TIMER_CH0 :
		Timer_Start(TIMER_CH0,250);
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	6a ef       	ldi	r22, 0xFA	; 250
    1e2e:	70 e0       	ldi	r23, 0x00	; 0
    1e30:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <Timer_Start>
					//TCNT0=5;
					break;
    1e34:	09 c0       	rjmp	.+18     	; 0x1e48 <SOS_Init+0x76>
			case TIMER_CH2 :
				Timer_Start(TIMER_CH2,14);
    1e36:	82 e0       	ldi	r24, 0x02	; 2
    1e38:	6e e0       	ldi	r22, 0x0E	; 14
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <Timer_Start>
					break;
    1e40:	03 c0       	rjmp	.+6      	; 0x1e48 <SOS_Init+0x76>
			default:
				ret+=E_NOK;
    1e42:	1f 5f       	subi	r17, 0xFF	; 255
					break;
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <SOS_Init+0x76>
	}	
	
	
	
	default:
	ret+=E_NOK;
    1e46:	1f 5f       	subi	r17, 0xFF	; 255

/****************************************************************************/
/*      Deal with Errors  to be returned									*/
/***************************************************************************/
return ret;
}
    1e48:	81 2f       	mov	r24, r17
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	1f 91       	pop	r17
    1e50:	0f 91       	pop	r16
    1e52:	08 95       	ret

00001e54 <TMU_DeInit>:
	uint8_t ret=E_OK;
	/************************************************************************************************/
	/*1    	De_intialize the timer																	*/
	/*2		make sure this function is not called unless timer was intialized before by  TMU_INIT	*/
	/************************************************************************************************/
if (u8_Is_Intialized==1)
    1e54:	80 91 05 02 	lds	r24, 0x0205
    1e58:	81 30       	cpi	r24, 0x01	; 1
    1e5a:	41 f4       	brne	.+16     	; 0x1e6c <TMU_DeInit+0x18>
{/*Make the timer without a clk*/
	Timer_Init(&Timer_Deinit_Configuration0);
    1e5c:	86 e8       	ldi	r24, 0x86	; 134
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Timer_Init>

	u8_Is_Intialized=0;
    1e64:	10 92 05 02 	sts	0x0205, r1



ERROR_STATUS TMU_DeInit( void )
{
	uint8_t ret=E_OK;
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	08 95       	ret
{/*Make the timer without a clk*/
	Timer_Init(&Timer_Deinit_Configuration0);

	u8_Is_Intialized=0;
	
}else if(u8_Is_Intialized>1){ret+=MULTIPLE_INIT;}
    1e6c:	82 30       	cpi	r24, 0x02	; 2
    1e6e:	10 f0       	brcs	.+4      	; 0x1e74 <TMU_DeInit+0x20>
    1e70:	86 e0       	ldi	r24, 0x06	; 6
    1e72:	08 95       	ret
	else{
	ret=E_NOK;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
	}

	
return ret;	
}
    1e76:	08 95       	ret

00001e78 <SOS_Create_Task>:
	/*
	this enables interrupt and start the timer with the required configurations
	and provide the request to request buffer (ptr_to_func,delay) Dispatcher with the call back function needed(consumer)
	and make sure this function must not be excuted unless Init happened and De_init not happened
  	*/
	if(u8_Is_Intialized == 1)
    1e78:	50 91 05 02 	lds	r21, 0x0205
    1e7c:	51 30       	cpi	r21, 0x01	; 1
    1e7e:	99 f4       	brne	.+38     	; 0x1ea6 <SOS_Create_Task+0x2e>
	{
		
		
		(Buffer_Array[u8_function_index]).Fuction_consumer=Function_Consumer;
    1e80:	e4 2f       	mov	r30, r20
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	ee 0f       	add	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	ee 0f       	add	r30, r30
    1e8a:	ff 1f       	adc	r31, r31
    1e8c:	ee 0f       	add	r30, r30
    1e8e:	ff 1f       	adc	r31, r31
    1e90:	e9 5c       	subi	r30, 0xC9	; 201
    1e92:	fd 4f       	sbci	r31, 0xFD	; 253
    1e94:	91 83       	std	Z+1, r25	; 0x01
    1e96:	80 83       	st	Z, r24
		(Buffer_Array[u8_function_index]).preodic=u8_Preodicity;
    1e98:	65 83       	std	Z+5, r22	; 0x05
		(Buffer_Array[u8_function_index]).u16_time_delay=u16_Time_delay;
    1e9a:	34 83       	std	Z+4, r19	; 0x04
    1e9c:	23 83       	std	Z+3, r18	; 0x03
		(Buffer_Array[u8_function_index]).u8_flag_is_stopped=1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	82 83       	std	Z+2, r24	; 0x02
	
return ret;	
}

ERROR_STATUS SOS_Create_Task(ptr_to_Fun Function_Consumer,uint8_t  u8_Preodicity,uint8_t u8_function_index,uint16_t u16_Time_delay)
{uint8_t ret=E_OK;
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	08 95       	ret
		(Buffer_Array[u8_function_index]).u16_time_delay=u16_Time_delay;
		(Buffer_Array[u8_function_index]).u8_flag_is_stopped=1;
		
		
	}
	else if(u8_Is_Intialized>1){ret+=MULTIPLE_INIT;}else{
    1ea6:	52 30       	cpi	r21, 0x02	; 2
    1ea8:	10 f0       	brcs	.+4      	; 0x1eae <SOS_Create_Task+0x36>
    1eaa:	86 e0       	ldi	r24, 0x06	; 6
    1eac:	08 95       	ret
		ret+=NOT_INIT;
    1eae:	84 e0       	ldi	r24, 0x04	; 4
	}

	return ret;
}
    1eb0:	08 95       	ret

00001eb2 <SOS_Run>:

ERROR_STATUS SOS_Run(void)
{	uint8_t ret=E_OK;
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
	uint16_t u16_Time_needed=0;
	ptr_to_Fun Excuted;
	*//***********************************************************************/
	/*					LOOP upon Buffer Request						*/
	/*********************************************************************/
if (u8Excution_to_be_done==1)
    1eb6:	80 91 03 02 	lds	r24, 0x0203
    1eba:	81 30       	cpi	r24, 0x01	; 1
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <SOS_Run+0xe>
    1ebe:	65 c0       	rjmp	.+202    	; 0x1f8a <SOS_Run+0xd8>
{	u8Excution_to_be_done=0;
    1ec0:	10 92 03 02 	sts	0x0203, r1

		for (u8_FUN_index=0;u8_FUN_index<Buffer_Size;u8_FUN_index++)
    1ec4:	10 92 04 02 	sts	0x0204, r1
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
	status_flag =(Buffer_Array[u8_FUN_index]).u8_flag_is_stopped;
	preodic_status_flag=(Buffer_Array[u8_FUN_index]).preodic;
*/
/****************************************************************/
/* check if the event is stopped ... do nothing*/
		if((Buffer_Array[u8_FUN_index]).u8_flag_is_stopped==0){ret=E_OK;}
    1eca:	c7 e3       	ldi	r28, 0x37	; 55
    1ecc:	d2 e0       	ldi	r29, 0x02	; 2
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	f9 01       	movw	r30, r18
    1ed2:	ee 0f       	add	r30, r30
    1ed4:	ff 1f       	adc	r31, r31
    1ed6:	ee 0f       	add	r30, r30
    1ed8:	ff 1f       	adc	r31, r31
    1eda:	ee 0f       	add	r30, r30
    1edc:	ff 1f       	adc	r31, r31
    1ede:	ec 0f       	add	r30, r28
    1ee0:	fd 1f       	adc	r31, r29
    1ee2:	82 81       	ldd	r24, Z+2	; 0x02
    1ee4:	88 23       	and	r24, r24
    1ee6:	09 f4       	brne	.+2      	; 0x1eea <SOS_Run+0x38>
    1ee8:	48 c0       	rjmp	.+144    	; 0x1f7a <SOS_Run+0xc8>
	/*if the timer started .. and condition met excute the consumer*/
	/***************************************************************/
		
	/********************************************/
	/*Count up when flag is set**/
	((Buffer_Array[u8_FUN_index]).u16_Counter)++;
    1eea:	f9 01       	movw	r30, r18
    1eec:	ee 0f       	add	r30, r30
    1eee:	ff 1f       	adc	r31, r31
    1ef0:	ee 0f       	add	r30, r30
    1ef2:	ff 1f       	adc	r31, r31
    1ef4:	ee 0f       	add	r30, r30
    1ef6:	ff 1f       	adc	r31, r31
    1ef8:	ec 0f       	add	r30, r28
    1efa:	fd 1f       	adc	r31, r29
    1efc:	86 81       	ldd	r24, Z+6	; 0x06
    1efe:	97 81       	ldd	r25, Z+7	; 0x07
    1f00:	ac 01       	movw	r20, r24
    1f02:	4f 5f       	subi	r20, 0xFF	; 255
    1f04:	5f 4f       	sbci	r21, 0xFF	; 255
    1f06:	57 83       	std	Z+7, r21	; 0x07
    1f08:	46 83       	std	Z+6, r20	; 0x06
	/*make the flag down*/
							
			
/*	u16Excution_to_be_done=100;  ISR*/
	if(((Buffer_Array[u8_FUN_index]).u16_time_delay) == ((Buffer_Array[u8_FUN_index]).u16_Counter) )
    1f0a:	83 81       	ldd	r24, Z+3	; 0x03
    1f0c:	94 81       	ldd	r25, Z+4	; 0x04
    1f0e:	48 17       	cp	r20, r24
    1f10:	59 07       	cpc	r21, r25
    1f12:	d1 f4       	brne	.+52     	; 0x1f48 <SOS_Run+0x96>
	{
		((Buffer_Array[u8_FUN_index]).Fuction_consumer)();
    1f14:	f9 01       	movw	r30, r18
    1f16:	ee 0f       	add	r30, r30
    1f18:	ff 1f       	adc	r31, r31
    1f1a:	ee 0f       	add	r30, r30
    1f1c:	ff 1f       	adc	r31, r31
    1f1e:	ee 0f       	add	r30, r30
    1f20:	ff 1f       	adc	r31, r31
    1f22:	ec 0f       	add	r30, r28
    1f24:	fd 1f       	adc	r31, r29
    1f26:	01 90       	ld	r0, Z+
    1f28:	f0 81       	ld	r31, Z
    1f2a:	e0 2d       	mov	r30, r0
    1f2c:	09 95       	icall
	/******************************************/
	/*Make it zero so that it will work the next time at the required time (to stop it of ovf)*/
		(Buffer_Array[u8_FUN_index]).u16_Counter=0;
    1f2e:	e0 91 04 02 	lds	r30, 0x0204
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	ee 0f       	add	r30, r30
    1f36:	ff 1f       	adc	r31, r31
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	ff 1f       	adc	r31, r31
    1f40:	ec 0f       	add	r30, r28
    1f42:	fd 1f       	adc	r31, r29
    1f44:	17 82       	std	Z+7, r1	; 0x07
    1f46:	16 82       	std	Z+6, r1	; 0x06
		
	/*********************************************************/
	/* if not preodic increment the index after excuteing	*/
	/*********************************************************/

	if((Buffer_Array[u8_FUN_index]).preodic==0)
    1f48:	80 91 04 02 	lds	r24, 0x0204
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	fc 01       	movw	r30, r24
    1f50:	ee 0f       	add	r30, r30
    1f52:	ff 1f       	adc	r31, r31
    1f54:	ee 0f       	add	r30, r30
    1f56:	ff 1f       	adc	r31, r31
    1f58:	ee 0f       	add	r30, r30
    1f5a:	ff 1f       	adc	r31, r31
    1f5c:	ec 0f       	add	r30, r28
    1f5e:	fd 1f       	adc	r31, r29
    1f60:	25 81       	ldd	r18, Z+5	; 0x05
    1f62:	22 23       	and	r18, r18
    1f64:	51 f4       	brne	.+20     	; 0x1f7a <SOS_Run+0xc8>
	{
		/*to make it see the next event in the next time
		Also Status_flag =1 so that this function will be stopped
		*/
		(Buffer_Array[u8_FUN_index]).u8_flag_is_stopped=0;	
    1f66:	fc 01       	movw	r30, r24
    1f68:	ee 0f       	add	r30, r30
    1f6a:	ff 1f       	adc	r31, r31
    1f6c:	ee 0f       	add	r30, r30
    1f6e:	ff 1f       	adc	r31, r31
    1f70:	ee 0f       	add	r30, r30
    1f72:	ff 1f       	adc	r31, r31
    1f74:	ec 0f       	add	r30, r28
    1f76:	fd 1f       	adc	r31, r29
    1f78:	12 82       	std	Z+2, r1	; 0x02
	/*					LOOP upon Buffer Request						*/
	/*********************************************************************/
if (u8Excution_to_be_done==1)
{	u8Excution_to_be_done=0;

		for (u8_FUN_index=0;u8_FUN_index<Buffer_Size;u8_FUN_index++)
    1f7a:	20 91 04 02 	lds	r18, 0x0204
    1f7e:	2f 5f       	subi	r18, 0xFF	; 255
    1f80:	20 93 04 02 	sts	0x0204, r18
    1f84:	24 30       	cpi	r18, 0x04	; 4
    1f86:	08 f4       	brcc	.+2      	; 0x1f8a <SOS_Run+0xd8>
    1f88:	a2 cf       	rjmp	.-188    	; 0x1ece <SOS_Run+0x1c>

		}		
	}
}	
return ret;
}
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	df 91       	pop	r29
    1f8e:	cf 91       	pop	r28
    1f90:	08 95       	ret

00001f92 <TMU_Stop_Timer>:
{

	/***************************************************/
	/*     Set the stop flag							*/
	/***************************************************/
	(Buffer_Array[u8_function_index]).u8_flag_is_stopped=0;
    1f92:	e8 2f       	mov	r30, r24
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	ee 0f       	add	r30, r30
    1f9c:	ff 1f       	adc	r31, r31
    1f9e:	ee 0f       	add	r30, r30
    1fa0:	ff 1f       	adc	r31, r31
    1fa2:	e9 5c       	subi	r30, 0xC9	; 201
    1fa4:	fd 4f       	sbci	r31, 0xFD	; 253
    1fa6:	12 82       	std	Z+2, r1	; 0x02
}
    1fa8:	08 95       	ret

00001faa <Task1>:
"3.Do You like Chocolate? "
,"4.Do You like Embedded Systems ? ","5.Do You Know My name ? ","6.NO ","7.YES ","8.False Answer!! ","9.Correct Answer!! ","10.Game Over"};
 static uint8_t X_value=0;
 static uint8_t Y_value=0;
	
	if (u8_Init_finished==1)
    1faa:	80 91 06 02 	lds	r24, 0x0206
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <Task1+0xa>
    1fb2:	6a c0       	rjmp	.+212    	; 0x2088 <Task1+0xde>
	{
	if (stu8_increment<10)
    1fb4:	80 91 07 02 	lds	r24, 0x0207
    1fb8:	8a 30       	cpi	r24, 0x0A	; 10
    1fba:	08 f0       	brcs	.+2      	; 0x1fbe <Task1+0x14>
    1fbc:	61 c0       	rjmp	.+194    	; 0x2080 <Task1+0xd6>
	{
		if (u8count < 16)
    1fbe:	80 91 08 02 	lds	r24, 0x0208
    1fc2:	80 31       	cpi	r24, 0x10	; 16
    1fc4:	28 f4       	brcc	.+10     	; 0x1fd0 <Task1+0x26>
		{
			X_value=u8count;
    1fc6:	80 93 09 02 	sts	0x0209, r24
			Y_value=0;
    1fca:	10 92 0a 02 	sts	0x020A, r1
    1fce:	06 c0       	rjmp	.+12     	; 0x1fdc <Task1+0x32>
		}
		
		else if(u8count >= 16 || twoDarr[stu8_increment][u8count])
		{
			Y_value=1;
    1fd0:	91 e0       	ldi	r25, 0x01	; 1
    1fd2:	90 93 0a 02 	sts	0x020A, r25
			X_value=u8count-16;
    1fd6:	80 51       	subi	r24, 0x10	; 16
    1fd8:	80 93 09 02 	sts	0x0209, r24
		}
		
		if(twoDarr[stu8_increment][u8count])
    1fdc:	20 91 07 02 	lds	r18, 0x0207
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 91 08 02 	lds	r20, 0x0208
    1fe6:	f9 01       	movw	r30, r18
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	e2 95       	swap	r30
    1fee:	f2 95       	swap	r31
    1ff0:	f0 7f       	andi	r31, 0xF0	; 240
    1ff2:	fe 27       	eor	r31, r30
    1ff4:	e0 7f       	andi	r30, 0xF0	; 240
    1ff6:	fe 27       	eor	r31, r30
    1ff8:	e4 0f       	add	r30, r20
    1ffa:	f1 1d       	adc	r31, r1
    1ffc:	e8 56       	subi	r30, 0x68	; 104
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 81       	ld	r24, Z
    2002:	88 23       	and	r24, r24
    2004:	f1 f0       	breq	.+60     	; 0x2042 <Task1+0x98>
		{
			LCD_goto_xy(X_value,Y_value);
    2006:	80 91 09 02 	lds	r24, 0x0209
    200a:	60 91 0a 02 	lds	r22, 0x020A
    200e:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_goto_xy>
			LCD_send_char(twoDarr[stu8_increment][u8count++]);
    2012:	90 91 08 02 	lds	r25, 0x0208
    2016:	e0 91 07 02 	lds	r30, 0x0207
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	ee 0f       	add	r30, r30
    201e:	ff 1f       	adc	r31, r31
    2020:	e2 95       	swap	r30
    2022:	f2 95       	swap	r31
    2024:	f0 7f       	andi	r31, 0xF0	; 240
    2026:	fe 27       	eor	r31, r30
    2028:	e0 7f       	andi	r30, 0xF0	; 240
    202a:	fe 27       	eor	r31, r30
    202c:	e9 0f       	add	r30, r25
    202e:	f1 1d       	adc	r31, r1
    2030:	e8 56       	subi	r30, 0x68	; 104
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	80 81       	ld	r24, Z
    2036:	9f 5f       	subi	r25, 0xFF	; 255
    2038:	90 93 08 02 	sts	0x0208, r25
    203c:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_send_char>
    2040:	21 c0       	rjmp	.+66     	; 0x2084 <Task1+0xda>
			
		}
		else if((twoDarr[stu8_increment][u8count]== '\0') && u8count < 32)
    2042:	40 32       	cpi	r20, 0x20	; 32
    2044:	d0 f4       	brcc	.+52     	; 0x207a <Task1+0xd0>
		{while(u8count <= 32){
    2046:	41 32       	cpi	r20, 0x21	; 33
    2048:	e8 f4       	brcc	.+58     	; 0x2084 <Task1+0xda>
			twoDarr[stu8_increment][u8count]=' ';
    204a:	88 e9       	ldi	r24, 0x98	; 152
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	22 0f       	add	r18, r18
    2050:	33 1f       	adc	r19, r19
    2052:	22 95       	swap	r18
    2054:	32 95       	swap	r19
    2056:	30 7f       	andi	r19, 0xF0	; 240
    2058:	32 27       	eor	r19, r18
    205a:	20 7f       	andi	r18, 0xF0	; 240
    205c:	32 27       	eor	r19, r18
    205e:	50 e2       	ldi	r21, 0x20	; 32
    2060:	f9 01       	movw	r30, r18
    2062:	e4 0f       	add	r30, r20
    2064:	f1 1d       	adc	r31, r1
    2066:	e8 0f       	add	r30, r24
    2068:	f9 1f       	adc	r31, r25
    206a:	50 83       	st	Z, r21
    206c:	4f 5f       	subi	r20, 0xFF	; 255
			LCD_goto_xy(X_value,Y_value);
			LCD_send_char(twoDarr[stu8_increment][u8count++]);
			
		}
		else if((twoDarr[stu8_increment][u8count]== '\0') && u8count < 32)
		{while(u8count <= 32){
    206e:	41 32       	cpi	r20, 0x21	; 33
    2070:	b9 f7       	brne	.-18     	; 0x2060 <Task1+0xb6>
    2072:	81 e2       	ldi	r24, 0x21	; 33
    2074:	80 93 08 02 	sts	0x0208, r24
    2078:	05 c0       	rjmp	.+10     	; 0x2084 <Task1+0xda>
			twoDarr[stu8_increment][u8count]=' ';
			u8count++;
		}
	}else{u8count=0;}
    207a:	10 92 08 02 	sts	0x0208, r1
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <Task1+0xda>
	}else{stu8_increment=0;}			
    2080:	10 92 07 02 	sts	0x0207, r1
u8_Init_finished=0;
    2084:	10 92 06 02 	sts	0x0206, r1
    2088:	08 95       	ret

0000208a <Task2>:
}
void Task2(void){	
	
static uint8_t u8_Counter=0;
static uint8_t u8_Counter1=0;
	if (pushButtonGetStatus(BTN_0))
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <pushButtonGetStatus>
    2090:	88 23       	and	r24, r24
    2092:	29 f0       	breq	.+10     	; 0x209e <Task2+0x14>
	{	
		u8_Counter++;
    2094:	80 91 0b 02 	lds	r24, 0x020B
    2098:	8f 5f       	subi	r24, 0xFF	; 255
    209a:	80 93 0b 02 	sts	0x020B, r24
	}
	if (u8_Counter > 20)
    209e:	80 91 0b 02 	lds	r24, 0x020B
    20a2:	85 31       	cpi	r24, 0x15	; 21
    20a4:	38 f0       	brcs	.+14     	; 0x20b4 <Task2+0x2a>
	{
	stu8_increment++;
    20a6:	80 91 07 02 	lds	r24, 0x0207
    20aa:	8f 5f       	subi	r24, 0xFF	; 255
    20ac:	80 93 07 02 	sts	0x0207, r24
	u8_Counter=0;
    20b0:	10 92 0b 02 	sts	0x020B, r1
	}
	
	if (pushButtonGetStatus(BTN_1))
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <pushButtonGetStatus>
    20ba:	88 23       	and	r24, r24
    20bc:	29 f0       	breq	.+10     	; 0x20c8 <Task2+0x3e>
	{
		u8_Counter1++;
    20be:	80 91 0c 02 	lds	r24, 0x020C
    20c2:	8f 5f       	subi	r24, 0xFF	; 255
    20c4:	80 93 0c 02 	sts	0x020C, r24
		//stu8_increment++;
	}
	if (u8_Counter1 > 20)
    20c8:	80 91 0c 02 	lds	r24, 0x020C
    20cc:	85 31       	cpi	r24, 0x15	; 21
    20ce:	38 f0       	brcs	.+14     	; 0x20de <Task2+0x54>
	{
		stu8_increment--;
    20d0:	80 91 07 02 	lds	r24, 0x0207
    20d4:	81 50       	subi	r24, 0x01	; 1
    20d6:	80 93 07 02 	sts	0x0207, r24
		u8_Counter1=0;
    20da:	10 92 0c 02 	sts	0x020C, r1
    20de:	08 95       	ret

000020e0 <Tmu_excute>:
	
}
void Tmu_excute(void){
	
		
}
    20e0:	08 95       	ret

000020e2 <timer_interrupt>:


void timer_interrupt(void)
{
	u8Excution_to_be_done =1;	
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	80 93 03 02 	sts	0x0203, r24
    20e8:	08 95       	ret

000020ea <main>:
/*	DIO_init(&Dio_configurationB);
	DIO_init(&Dio_configurationC);
	LCD_config_pins();
	DIO_init(&Dio_configurationD);
	*/
SOS_Init(&TMU_Configuration);
    20ea:	88 ed       	ldi	r24, 0xD8	; 216
    20ec:	91 e0       	ldi	r25, 0x01	; 1
    20ee:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <SOS_Init>
	SOS_Create_Task(LCD_init,1,0,50);
	SOS_Create_Task(Task1,1,1,20);
	SOS_Create_Task(Task2,1,2,10);
	//	SOS_Create_Task(Tmu_excute,1,2,50);
	*/
	Car_SM_Init();
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <Car_SM_Init>
	SOS_Create_Task(Car_SM_Update,1,0,10);
    20f6:	8f e4       	ldi	r24, 0x4F	; 79
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	61 e0       	ldi	r22, 0x01	; 1
    20fc:	40 e0       	ldi	r20, 0x00	; 0
    20fe:	2a e0       	ldi	r18, 0x0A	; 10
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <SOS_Create_Task>
	while(1)
	{
		//Car_SM_Update();
		SOS_Run();
    2106:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <SOS_Run>
    210a:	fd cf       	rjmp	.-6      	; 0x2106 <main+0x1c>

0000210c <__divsf3>:
    210c:	0c d0       	rcall	.+24     	; 0x2126 <__divsf3x>
    210e:	e6 c0       	rjmp	.+460    	; 0x22dc <__fp_round>
    2110:	de d0       	rcall	.+444    	; 0x22ce <__fp_pscB>
    2112:	40 f0       	brcs	.+16     	; 0x2124 <__divsf3+0x18>
    2114:	d5 d0       	rcall	.+426    	; 0x22c0 <__fp_pscA>
    2116:	30 f0       	brcs	.+12     	; 0x2124 <__divsf3+0x18>
    2118:	21 f4       	brne	.+8      	; 0x2122 <__divsf3+0x16>
    211a:	5f 3f       	cpi	r21, 0xFF	; 255
    211c:	19 f0       	breq	.+6      	; 0x2124 <__divsf3+0x18>
    211e:	c7 c0       	rjmp	.+398    	; 0x22ae <__fp_inf>
    2120:	51 11       	cpse	r21, r1
    2122:	10 c1       	rjmp	.+544    	; 0x2344 <__fp_szero>
    2124:	ca c0       	rjmp	.+404    	; 0x22ba <__fp_nan>

00002126 <__divsf3x>:
    2126:	eb d0       	rcall	.+470    	; 0x22fe <__fp_split3>
    2128:	98 f3       	brcs	.-26     	; 0x2110 <__divsf3+0x4>

0000212a <__divsf3_pse>:
    212a:	99 23       	and	r25, r25
    212c:	c9 f3       	breq	.-14     	; 0x2120 <__divsf3+0x14>
    212e:	55 23       	and	r21, r21
    2130:	b1 f3       	breq	.-20     	; 0x211e <__divsf3+0x12>
    2132:	95 1b       	sub	r25, r21
    2134:	55 0b       	sbc	r21, r21
    2136:	bb 27       	eor	r27, r27
    2138:	aa 27       	eor	r26, r26
    213a:	62 17       	cp	r22, r18
    213c:	73 07       	cpc	r23, r19
    213e:	84 07       	cpc	r24, r20
    2140:	38 f0       	brcs	.+14     	; 0x2150 <__divsf3_pse+0x26>
    2142:	9f 5f       	subi	r25, 0xFF	; 255
    2144:	5f 4f       	sbci	r21, 0xFF	; 255
    2146:	22 0f       	add	r18, r18
    2148:	33 1f       	adc	r19, r19
    214a:	44 1f       	adc	r20, r20
    214c:	aa 1f       	adc	r26, r26
    214e:	a9 f3       	breq	.-22     	; 0x213a <__divsf3_pse+0x10>
    2150:	33 d0       	rcall	.+102    	; 0x21b8 <__divsf3_pse+0x8e>
    2152:	0e 2e       	mov	r0, r30
    2154:	3a f0       	brmi	.+14     	; 0x2164 <__divsf3_pse+0x3a>
    2156:	e0 e8       	ldi	r30, 0x80	; 128
    2158:	30 d0       	rcall	.+96     	; 0x21ba <__divsf3_pse+0x90>
    215a:	91 50       	subi	r25, 0x01	; 1
    215c:	50 40       	sbci	r21, 0x00	; 0
    215e:	e6 95       	lsr	r30
    2160:	00 1c       	adc	r0, r0
    2162:	ca f7       	brpl	.-14     	; 0x2156 <__divsf3_pse+0x2c>
    2164:	29 d0       	rcall	.+82     	; 0x21b8 <__divsf3_pse+0x8e>
    2166:	fe 2f       	mov	r31, r30
    2168:	27 d0       	rcall	.+78     	; 0x21b8 <__divsf3_pse+0x8e>
    216a:	66 0f       	add	r22, r22
    216c:	77 1f       	adc	r23, r23
    216e:	88 1f       	adc	r24, r24
    2170:	bb 1f       	adc	r27, r27
    2172:	26 17       	cp	r18, r22
    2174:	37 07       	cpc	r19, r23
    2176:	48 07       	cpc	r20, r24
    2178:	ab 07       	cpc	r26, r27
    217a:	b0 e8       	ldi	r27, 0x80	; 128
    217c:	09 f0       	breq	.+2      	; 0x2180 <__divsf3_pse+0x56>
    217e:	bb 0b       	sbc	r27, r27
    2180:	80 2d       	mov	r24, r0
    2182:	bf 01       	movw	r22, r30
    2184:	ff 27       	eor	r31, r31
    2186:	93 58       	subi	r25, 0x83	; 131
    2188:	5f 4f       	sbci	r21, 0xFF	; 255
    218a:	2a f0       	brmi	.+10     	; 0x2196 <__divsf3_pse+0x6c>
    218c:	9e 3f       	cpi	r25, 0xFE	; 254
    218e:	51 05       	cpc	r21, r1
    2190:	68 f0       	brcs	.+26     	; 0x21ac <__divsf3_pse+0x82>
    2192:	8d c0       	rjmp	.+282    	; 0x22ae <__fp_inf>
    2194:	d7 c0       	rjmp	.+430    	; 0x2344 <__fp_szero>
    2196:	5f 3f       	cpi	r21, 0xFF	; 255
    2198:	ec f3       	brlt	.-6      	; 0x2194 <__divsf3_pse+0x6a>
    219a:	98 3e       	cpi	r25, 0xE8	; 232
    219c:	dc f3       	brlt	.-10     	; 0x2194 <__divsf3_pse+0x6a>
    219e:	86 95       	lsr	r24
    21a0:	77 95       	ror	r23
    21a2:	67 95       	ror	r22
    21a4:	b7 95       	ror	r27
    21a6:	f7 95       	ror	r31
    21a8:	9f 5f       	subi	r25, 0xFF	; 255
    21aa:	c9 f7       	brne	.-14     	; 0x219e <__divsf3_pse+0x74>
    21ac:	88 0f       	add	r24, r24
    21ae:	91 1d       	adc	r25, r1
    21b0:	96 95       	lsr	r25
    21b2:	87 95       	ror	r24
    21b4:	97 f9       	bld	r25, 7
    21b6:	08 95       	ret
    21b8:	e1 e0       	ldi	r30, 0x01	; 1
    21ba:	66 0f       	add	r22, r22
    21bc:	77 1f       	adc	r23, r23
    21be:	88 1f       	adc	r24, r24
    21c0:	bb 1f       	adc	r27, r27
    21c2:	62 17       	cp	r22, r18
    21c4:	73 07       	cpc	r23, r19
    21c6:	84 07       	cpc	r24, r20
    21c8:	ba 07       	cpc	r27, r26
    21ca:	20 f0       	brcs	.+8      	; 0x21d4 <__divsf3_pse+0xaa>
    21cc:	62 1b       	sub	r22, r18
    21ce:	73 0b       	sbc	r23, r19
    21d0:	84 0b       	sbc	r24, r20
    21d2:	ba 0b       	sbc	r27, r26
    21d4:	ee 1f       	adc	r30, r30
    21d6:	88 f7       	brcc	.-30     	; 0x21ba <__divsf3_pse+0x90>
    21d8:	e0 95       	com	r30
    21da:	08 95       	ret

000021dc <__fixunssfsi>:
    21dc:	98 d0       	rcall	.+304    	; 0x230e <__fp_splitA>
    21de:	88 f0       	brcs	.+34     	; 0x2202 <__fixunssfsi+0x26>
    21e0:	9f 57       	subi	r25, 0x7F	; 127
    21e2:	90 f0       	brcs	.+36     	; 0x2208 <__fixunssfsi+0x2c>
    21e4:	b9 2f       	mov	r27, r25
    21e6:	99 27       	eor	r25, r25
    21e8:	b7 51       	subi	r27, 0x17	; 23
    21ea:	a0 f0       	brcs	.+40     	; 0x2214 <__fixunssfsi+0x38>
    21ec:	d1 f0       	breq	.+52     	; 0x2222 <__fixunssfsi+0x46>
    21ee:	66 0f       	add	r22, r22
    21f0:	77 1f       	adc	r23, r23
    21f2:	88 1f       	adc	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	1a f0       	brmi	.+6      	; 0x21fe <__fixunssfsi+0x22>
    21f8:	ba 95       	dec	r27
    21fa:	c9 f7       	brne	.-14     	; 0x21ee <__fixunssfsi+0x12>
    21fc:	12 c0       	rjmp	.+36     	; 0x2222 <__fixunssfsi+0x46>
    21fe:	b1 30       	cpi	r27, 0x01	; 1
    2200:	81 f0       	breq	.+32     	; 0x2222 <__fixunssfsi+0x46>
    2202:	9f d0       	rcall	.+318    	; 0x2342 <__fp_zero>
    2204:	b1 e0       	ldi	r27, 0x01	; 1
    2206:	08 95       	ret
    2208:	9c c0       	rjmp	.+312    	; 0x2342 <__fp_zero>
    220a:	67 2f       	mov	r22, r23
    220c:	78 2f       	mov	r23, r24
    220e:	88 27       	eor	r24, r24
    2210:	b8 5f       	subi	r27, 0xF8	; 248
    2212:	39 f0       	breq	.+14     	; 0x2222 <__fixunssfsi+0x46>
    2214:	b9 3f       	cpi	r27, 0xF9	; 249
    2216:	cc f3       	brlt	.-14     	; 0x220a <__fixunssfsi+0x2e>
    2218:	86 95       	lsr	r24
    221a:	77 95       	ror	r23
    221c:	67 95       	ror	r22
    221e:	b3 95       	inc	r27
    2220:	d9 f7       	brne	.-10     	; 0x2218 <__fixunssfsi+0x3c>
    2222:	3e f4       	brtc	.+14     	; 0x2232 <__fixunssfsi+0x56>
    2224:	90 95       	com	r25
    2226:	80 95       	com	r24
    2228:	70 95       	com	r23
    222a:	61 95       	neg	r22
    222c:	7f 4f       	sbci	r23, 0xFF	; 255
    222e:	8f 4f       	sbci	r24, 0xFF	; 255
    2230:	9f 4f       	sbci	r25, 0xFF	; 255
    2232:	08 95       	ret

00002234 <__floatunsisf>:
    2234:	e8 94       	clt
    2236:	09 c0       	rjmp	.+18     	; 0x224a <__floatsisf+0x12>

00002238 <__floatsisf>:
    2238:	97 fb       	bst	r25, 7
    223a:	3e f4       	brtc	.+14     	; 0x224a <__floatsisf+0x12>
    223c:	90 95       	com	r25
    223e:	80 95       	com	r24
    2240:	70 95       	com	r23
    2242:	61 95       	neg	r22
    2244:	7f 4f       	sbci	r23, 0xFF	; 255
    2246:	8f 4f       	sbci	r24, 0xFF	; 255
    2248:	9f 4f       	sbci	r25, 0xFF	; 255
    224a:	99 23       	and	r25, r25
    224c:	a9 f0       	breq	.+42     	; 0x2278 <__floatsisf+0x40>
    224e:	f9 2f       	mov	r31, r25
    2250:	96 e9       	ldi	r25, 0x96	; 150
    2252:	bb 27       	eor	r27, r27
    2254:	93 95       	inc	r25
    2256:	f6 95       	lsr	r31
    2258:	87 95       	ror	r24
    225a:	77 95       	ror	r23
    225c:	67 95       	ror	r22
    225e:	b7 95       	ror	r27
    2260:	f1 11       	cpse	r31, r1
    2262:	f8 cf       	rjmp	.-16     	; 0x2254 <__floatsisf+0x1c>
    2264:	fa f4       	brpl	.+62     	; 0x22a4 <__floatsisf+0x6c>
    2266:	bb 0f       	add	r27, r27
    2268:	11 f4       	brne	.+4      	; 0x226e <__floatsisf+0x36>
    226a:	60 ff       	sbrs	r22, 0
    226c:	1b c0       	rjmp	.+54     	; 0x22a4 <__floatsisf+0x6c>
    226e:	6f 5f       	subi	r22, 0xFF	; 255
    2270:	7f 4f       	sbci	r23, 0xFF	; 255
    2272:	8f 4f       	sbci	r24, 0xFF	; 255
    2274:	9f 4f       	sbci	r25, 0xFF	; 255
    2276:	16 c0       	rjmp	.+44     	; 0x22a4 <__floatsisf+0x6c>
    2278:	88 23       	and	r24, r24
    227a:	11 f0       	breq	.+4      	; 0x2280 <__floatsisf+0x48>
    227c:	96 e9       	ldi	r25, 0x96	; 150
    227e:	11 c0       	rjmp	.+34     	; 0x22a2 <__floatsisf+0x6a>
    2280:	77 23       	and	r23, r23
    2282:	21 f0       	breq	.+8      	; 0x228c <__floatsisf+0x54>
    2284:	9e e8       	ldi	r25, 0x8E	; 142
    2286:	87 2f       	mov	r24, r23
    2288:	76 2f       	mov	r23, r22
    228a:	05 c0       	rjmp	.+10     	; 0x2296 <__floatsisf+0x5e>
    228c:	66 23       	and	r22, r22
    228e:	71 f0       	breq	.+28     	; 0x22ac <__floatsisf+0x74>
    2290:	96 e8       	ldi	r25, 0x86	; 134
    2292:	86 2f       	mov	r24, r22
    2294:	70 e0       	ldi	r23, 0x00	; 0
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	2a f0       	brmi	.+10     	; 0x22a4 <__floatsisf+0x6c>
    229a:	9a 95       	dec	r25
    229c:	66 0f       	add	r22, r22
    229e:	77 1f       	adc	r23, r23
    22a0:	88 1f       	adc	r24, r24
    22a2:	da f7       	brpl	.-10     	; 0x229a <__floatsisf+0x62>
    22a4:	88 0f       	add	r24, r24
    22a6:	96 95       	lsr	r25
    22a8:	87 95       	ror	r24
    22aa:	97 f9       	bld	r25, 7
    22ac:	08 95       	ret

000022ae <__fp_inf>:
    22ae:	97 f9       	bld	r25, 7
    22b0:	9f 67       	ori	r25, 0x7F	; 127
    22b2:	80 e8       	ldi	r24, 0x80	; 128
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	60 e0       	ldi	r22, 0x00	; 0
    22b8:	08 95       	ret

000022ba <__fp_nan>:
    22ba:	9f ef       	ldi	r25, 0xFF	; 255
    22bc:	80 ec       	ldi	r24, 0xC0	; 192
    22be:	08 95       	ret

000022c0 <__fp_pscA>:
    22c0:	00 24       	eor	r0, r0
    22c2:	0a 94       	dec	r0
    22c4:	16 16       	cp	r1, r22
    22c6:	17 06       	cpc	r1, r23
    22c8:	18 06       	cpc	r1, r24
    22ca:	09 06       	cpc	r0, r25
    22cc:	08 95       	ret

000022ce <__fp_pscB>:
    22ce:	00 24       	eor	r0, r0
    22d0:	0a 94       	dec	r0
    22d2:	12 16       	cp	r1, r18
    22d4:	13 06       	cpc	r1, r19
    22d6:	14 06       	cpc	r1, r20
    22d8:	05 06       	cpc	r0, r21
    22da:	08 95       	ret

000022dc <__fp_round>:
    22dc:	09 2e       	mov	r0, r25
    22de:	03 94       	inc	r0
    22e0:	00 0c       	add	r0, r0
    22e2:	11 f4       	brne	.+4      	; 0x22e8 <__fp_round+0xc>
    22e4:	88 23       	and	r24, r24
    22e6:	52 f0       	brmi	.+20     	; 0x22fc <__fp_round+0x20>
    22e8:	bb 0f       	add	r27, r27
    22ea:	40 f4       	brcc	.+16     	; 0x22fc <__fp_round+0x20>
    22ec:	bf 2b       	or	r27, r31
    22ee:	11 f4       	brne	.+4      	; 0x22f4 <__fp_round+0x18>
    22f0:	60 ff       	sbrs	r22, 0
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <__fp_round+0x20>
    22f4:	6f 5f       	subi	r22, 0xFF	; 255
    22f6:	7f 4f       	sbci	r23, 0xFF	; 255
    22f8:	8f 4f       	sbci	r24, 0xFF	; 255
    22fa:	9f 4f       	sbci	r25, 0xFF	; 255
    22fc:	08 95       	ret

000022fe <__fp_split3>:
    22fe:	57 fd       	sbrc	r21, 7
    2300:	90 58       	subi	r25, 0x80	; 128
    2302:	44 0f       	add	r20, r20
    2304:	55 1f       	adc	r21, r21
    2306:	59 f0       	breq	.+22     	; 0x231e <__fp_splitA+0x10>
    2308:	5f 3f       	cpi	r21, 0xFF	; 255
    230a:	71 f0       	breq	.+28     	; 0x2328 <__fp_splitA+0x1a>
    230c:	47 95       	ror	r20

0000230e <__fp_splitA>:
    230e:	88 0f       	add	r24, r24
    2310:	97 fb       	bst	r25, 7
    2312:	99 1f       	adc	r25, r25
    2314:	61 f0       	breq	.+24     	; 0x232e <__fp_splitA+0x20>
    2316:	9f 3f       	cpi	r25, 0xFF	; 255
    2318:	79 f0       	breq	.+30     	; 0x2338 <__fp_splitA+0x2a>
    231a:	87 95       	ror	r24
    231c:	08 95       	ret
    231e:	12 16       	cp	r1, r18
    2320:	13 06       	cpc	r1, r19
    2322:	14 06       	cpc	r1, r20
    2324:	55 1f       	adc	r21, r21
    2326:	f2 cf       	rjmp	.-28     	; 0x230c <__fp_split3+0xe>
    2328:	46 95       	lsr	r20
    232a:	f1 df       	rcall	.-30     	; 0x230e <__fp_splitA>
    232c:	08 c0       	rjmp	.+16     	; 0x233e <__fp_splitA+0x30>
    232e:	16 16       	cp	r1, r22
    2330:	17 06       	cpc	r1, r23
    2332:	18 06       	cpc	r1, r24
    2334:	99 1f       	adc	r25, r25
    2336:	f1 cf       	rjmp	.-30     	; 0x231a <__fp_splitA+0xc>
    2338:	86 95       	lsr	r24
    233a:	71 05       	cpc	r23, r1
    233c:	61 05       	cpc	r22, r1
    233e:	08 94       	sec
    2340:	08 95       	ret

00002342 <__fp_zero>:
    2342:	e8 94       	clt

00002344 <__fp_szero>:
    2344:	bb 27       	eor	r27, r27
    2346:	66 27       	eor	r22, r22
    2348:	77 27       	eor	r23, r23
    234a:	cb 01       	movw	r24, r22
    234c:	97 f9       	bld	r25, 7
    234e:	08 95       	ret

00002350 <__mulsf3>:
    2350:	0b d0       	rcall	.+22     	; 0x2368 <__mulsf3x>
    2352:	c4 cf       	rjmp	.-120    	; 0x22dc <__fp_round>
    2354:	b5 df       	rcall	.-150    	; 0x22c0 <__fp_pscA>
    2356:	28 f0       	brcs	.+10     	; 0x2362 <__mulsf3+0x12>
    2358:	ba df       	rcall	.-140    	; 0x22ce <__fp_pscB>
    235a:	18 f0       	brcs	.+6      	; 0x2362 <__mulsf3+0x12>
    235c:	95 23       	and	r25, r21
    235e:	09 f0       	breq	.+2      	; 0x2362 <__mulsf3+0x12>
    2360:	a6 cf       	rjmp	.-180    	; 0x22ae <__fp_inf>
    2362:	ab cf       	rjmp	.-170    	; 0x22ba <__fp_nan>
    2364:	11 24       	eor	r1, r1
    2366:	ee cf       	rjmp	.-36     	; 0x2344 <__fp_szero>

00002368 <__mulsf3x>:
    2368:	ca df       	rcall	.-108    	; 0x22fe <__fp_split3>
    236a:	a0 f3       	brcs	.-24     	; 0x2354 <__mulsf3+0x4>

0000236c <__mulsf3_pse>:
    236c:	95 9f       	mul	r25, r21
    236e:	d1 f3       	breq	.-12     	; 0x2364 <__mulsf3+0x14>
    2370:	95 0f       	add	r25, r21
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	55 1f       	adc	r21, r21
    2376:	62 9f       	mul	r22, r18
    2378:	f0 01       	movw	r30, r0
    237a:	72 9f       	mul	r23, r18
    237c:	bb 27       	eor	r27, r27
    237e:	f0 0d       	add	r31, r0
    2380:	b1 1d       	adc	r27, r1
    2382:	63 9f       	mul	r22, r19
    2384:	aa 27       	eor	r26, r26
    2386:	f0 0d       	add	r31, r0
    2388:	b1 1d       	adc	r27, r1
    238a:	aa 1f       	adc	r26, r26
    238c:	64 9f       	mul	r22, r20
    238e:	66 27       	eor	r22, r22
    2390:	b0 0d       	add	r27, r0
    2392:	a1 1d       	adc	r26, r1
    2394:	66 1f       	adc	r22, r22
    2396:	82 9f       	mul	r24, r18
    2398:	22 27       	eor	r18, r18
    239a:	b0 0d       	add	r27, r0
    239c:	a1 1d       	adc	r26, r1
    239e:	62 1f       	adc	r22, r18
    23a0:	73 9f       	mul	r23, r19
    23a2:	b0 0d       	add	r27, r0
    23a4:	a1 1d       	adc	r26, r1
    23a6:	62 1f       	adc	r22, r18
    23a8:	83 9f       	mul	r24, r19
    23aa:	a0 0d       	add	r26, r0
    23ac:	61 1d       	adc	r22, r1
    23ae:	22 1f       	adc	r18, r18
    23b0:	74 9f       	mul	r23, r20
    23b2:	33 27       	eor	r19, r19
    23b4:	a0 0d       	add	r26, r0
    23b6:	61 1d       	adc	r22, r1
    23b8:	23 1f       	adc	r18, r19
    23ba:	84 9f       	mul	r24, r20
    23bc:	60 0d       	add	r22, r0
    23be:	21 1d       	adc	r18, r1
    23c0:	82 2f       	mov	r24, r18
    23c2:	76 2f       	mov	r23, r22
    23c4:	6a 2f       	mov	r22, r26
    23c6:	11 24       	eor	r1, r1
    23c8:	9f 57       	subi	r25, 0x7F	; 127
    23ca:	50 40       	sbci	r21, 0x00	; 0
    23cc:	8a f0       	brmi	.+34     	; 0x23f0 <__mulsf3_pse+0x84>
    23ce:	e1 f0       	breq	.+56     	; 0x2408 <__mulsf3_pse+0x9c>
    23d0:	88 23       	and	r24, r24
    23d2:	4a f0       	brmi	.+18     	; 0x23e6 <__mulsf3_pse+0x7a>
    23d4:	ee 0f       	add	r30, r30
    23d6:	ff 1f       	adc	r31, r31
    23d8:	bb 1f       	adc	r27, r27
    23da:	66 1f       	adc	r22, r22
    23dc:	77 1f       	adc	r23, r23
    23de:	88 1f       	adc	r24, r24
    23e0:	91 50       	subi	r25, 0x01	; 1
    23e2:	50 40       	sbci	r21, 0x00	; 0
    23e4:	a9 f7       	brne	.-22     	; 0x23d0 <__mulsf3_pse+0x64>
    23e6:	9e 3f       	cpi	r25, 0xFE	; 254
    23e8:	51 05       	cpc	r21, r1
    23ea:	70 f0       	brcs	.+28     	; 0x2408 <__mulsf3_pse+0x9c>
    23ec:	60 cf       	rjmp	.-320    	; 0x22ae <__fp_inf>
    23ee:	aa cf       	rjmp	.-172    	; 0x2344 <__fp_szero>
    23f0:	5f 3f       	cpi	r21, 0xFF	; 255
    23f2:	ec f3       	brlt	.-6      	; 0x23ee <__mulsf3_pse+0x82>
    23f4:	98 3e       	cpi	r25, 0xE8	; 232
    23f6:	dc f3       	brlt	.-10     	; 0x23ee <__mulsf3_pse+0x82>
    23f8:	86 95       	lsr	r24
    23fa:	77 95       	ror	r23
    23fc:	67 95       	ror	r22
    23fe:	b7 95       	ror	r27
    2400:	f7 95       	ror	r31
    2402:	e7 95       	ror	r30
    2404:	9f 5f       	subi	r25, 0xFF	; 255
    2406:	c1 f7       	brne	.-16     	; 0x23f8 <__mulsf3_pse+0x8c>
    2408:	fe 2b       	or	r31, r30
    240a:	88 0f       	add	r24, r24
    240c:	91 1d       	adc	r25, r1
    240e:	96 95       	lsr	r25
    2410:	87 95       	ror	r24
    2412:	97 f9       	bld	r25, 7
    2414:	08 95       	ret

00002416 <__udivmodsi4>:
    2416:	a1 e2       	ldi	r26, 0x21	; 33
    2418:	1a 2e       	mov	r1, r26
    241a:	aa 1b       	sub	r26, r26
    241c:	bb 1b       	sub	r27, r27
    241e:	fd 01       	movw	r30, r26
    2420:	0d c0       	rjmp	.+26     	; 0x243c <__udivmodsi4_ep>

00002422 <__udivmodsi4_loop>:
    2422:	aa 1f       	adc	r26, r26
    2424:	bb 1f       	adc	r27, r27
    2426:	ee 1f       	adc	r30, r30
    2428:	ff 1f       	adc	r31, r31
    242a:	a2 17       	cp	r26, r18
    242c:	b3 07       	cpc	r27, r19
    242e:	e4 07       	cpc	r30, r20
    2430:	f5 07       	cpc	r31, r21
    2432:	20 f0       	brcs	.+8      	; 0x243c <__udivmodsi4_ep>
    2434:	a2 1b       	sub	r26, r18
    2436:	b3 0b       	sbc	r27, r19
    2438:	e4 0b       	sbc	r30, r20
    243a:	f5 0b       	sbc	r31, r21

0000243c <__udivmodsi4_ep>:
    243c:	66 1f       	adc	r22, r22
    243e:	77 1f       	adc	r23, r23
    2440:	88 1f       	adc	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	1a 94       	dec	r1
    2446:	69 f7       	brne	.-38     	; 0x2422 <__udivmodsi4_loop>
    2448:	60 95       	com	r22
    244a:	70 95       	com	r23
    244c:	80 95       	com	r24
    244e:	90 95       	com	r25
    2450:	9b 01       	movw	r18, r22
    2452:	ac 01       	movw	r20, r24
    2454:	bd 01       	movw	r22, r26
    2456:	cf 01       	movw	r24, r30
    2458:	08 95       	ret

0000245a <_exit>:
    245a:	f8 94       	cli

0000245c <__stop_program>:
    245c:	ff cf       	rjmp	.-2      	; 0x245c <__stop_program>
